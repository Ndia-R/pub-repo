５３ファイル

------------------------------------------------------------
devcontainer.json

{
  "name": "my-books-frontend",
  "dockerComposeFile": ["../docker-compose.yml", "docker-compose.yml"],
  "service": "app",
  "workspaceFolder": "/my-books-frontend",
  "customizations": {
    "vscode": {
      "extensions": [
        "formulahendry.auto-rename-tag",
        "streetsidesoftware.code-spell-checker",
        "dsznajder.es7-react-js-snippets",
        "dbaeumer.vscode-eslint",
        "mhutchie.git-graph",
        "ecmel.vscode-html-css",
        "oderwat.indent-rainbow",
        "christian-kohler.path-intellisense",
        "esbenp.prettier-vscode",
        "bradlc.vscode-tailwindcss",
        "shardulm94.trailing-spaces",
        "mosapride.zenkaku"
      ]
    }
  }
}

------------------------------------------------------------
book-detail.tsx

import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import ReviewCountIcon from '@/components/count-icon/review-count-icon';
import GenreList from '@/components/genres/genre-list';
import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import { useApiBook } from '@/hooks/api/use-api-book';
import { formatDateJP, formatIsbn, formatPrice } from '@/lib/util';
import { useSuspenseQuery } from '@tanstack/react-query';
import { Link } from 'react-router-dom';

type Props = {
  bookId: string;
};

export default function BookDetail({ bookId }: Props) {
  const { getBookDetailsById } = useApiBook();

  const { data: book } = useSuspenseQuery({
    queryKey: ['getBookDetailsById', bookId],
    queryFn: () => getBookDetailsById(bookId),
  });

  return (
    <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
      <div className="flex flex-col items-center justify-center lg:w-1/2">
        <Link to={`/read/${bookId}/table-of-contents`} className="size-fit">
          <img
            className="h-[360px] rounded object-cover sm:h-[480px]"
            src={book.imageUrl}
            alt={book.title}
          />
        </Link>
        <div className="mt-2 flex flex-col items-center justify-around sm:w-[440px] sm:flex-row">
          <div className="flex justify-center gap-x-2">
            <FavoriteCountIcon bookId={bookId} />
            <ReviewCountIcon reviewCount={book.reviewCount} />
          </div>
          <Rating rating={book.averageRating} readOnly />
        </div>
        <div className="my-4 flex items-center">
          <Button className="w-44 rounded-full bg-transparent" variant="outline" asChild>
            <Link to={`/read/${bookId}/table-of-contents`}>目次を見る</Link>
          </Button>
        </div>
      </div>

      <div className="p-4 lg:w-1/2">
        <p className="text-3xl font-bold sm:text-4xl">{book.title}</p>

        <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
          <p>著者</p>
          {book.authors.map((author) => (
            <p className="text-lg font-bold sm:text-2xl" key={author}>
              {author}
            </p>
          ))}
        </div>

        <GenreList genres={book.genres} variant="outline" />

        <div className="my-6 md:my-10">{book.description}</div>

        <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
          <div className="flex flex-col gap-y-1 text-muted-foreground">
            <div className="flex">
              <p className="min-w-20">ISBN</p>
              <p>{formatIsbn(book.isbn)}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">出版社</p>
              <p>{book.publisher}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">発売日</p>
              <p className="tracking-wide">{formatDateJP(book.publishedDate)}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">ページ数</p>
              <p>{`${book.pageCount}ページ`}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">価格</p>
              <p>{formatPrice(book.price)}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

------------------------------------------------------------
book-read-content.tsx

import BookmarkCreateDialog from '@/components/bookmarks/bookmark-create-dialog';
import BookmarkUpdateDialog from '@/components/bookmarks/bookmark-update-dialog';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useApiBook } from '@/hooks/api/use-api-book';
import { useApiBookmark } from '@/hooks/api/use-api-bookmark';
import {
  getCurrentPageText,
  getPageLink,
  getPagePosition,
} from '@/lib/book-read-content';
import { cn } from '@/lib/util';
import { Bookmark, BookmarkRequest } from '@/types';
import { useMutation, useQueryClient, useSuspenseQueries } from '@tanstack/react-query';
import {
  BookmarkIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  TableOfContentsIcon,
} from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router-dom';

type Props = {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
};

export default function BookReadContent({ bookId, chapterNumber, pageNumber }: Props) {
  const [isOpenCreateDialog, setIsOpenCreateDialog] = useState(false);
  const [isOpenUpdateDialog, setIsOpenUpdateDialog] = useState(false);

  const { getBookTableOfContents, getBookContentPage } = useApiBook();
  const { getBookmarkByBookId, createBookmark, updateBookmark, deleteBookmark } =
    useApiBookmark();

  const [{ data: bookTableOfContents }, { data: bookContentPage }, { data: bookmark }] =
    useSuspenseQueries({
      queries: [
        {
          queryKey: ['getBookTableOfContents', bookId],
          queryFn: () => getBookTableOfContents(bookId),
        },
        {
          queryKey: ['getBookContentPage', bookId, chapterNumber, pageNumber],
          queryFn: () => getBookContentPage(bookId, chapterNumber, pageNumber),
        },
        {
          queryKey: ['getBookmarkByBookId', bookId],
          queryFn: () => getBookmarkByBookId(bookId),
          select: (bookmarks: Bookmark[]) =>
            bookmarks.find(
              (bookmark) =>
                bookmark.bookId === bookId &&
                bookmark.chapterNumber === chapterNumber &&
                bookmark.pageNumber === pageNumber
            ),
        },
      ],
    });

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({ queryKey: ['getBookmarkByBookId', bookId] });
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const createMutation = useMutation({
    mutationFn: (requestBody: BookmarkRequest) => createBookmark(requestBody),
    onSuccess,
    onError,
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, requestBody }: { id: number; requestBody: BookmarkRequest }) =>
      updateBookmark(id, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (bookmarkId: number) => deleteBookmark(bookmarkId),
    onSuccess,
    onError,
  });

  const handleClickCreate = () => {
    setIsOpenCreateDialog(true);
  };

  const handleClickUpdate = () => {
    setIsOpenUpdateDialog(true);
  };

  const currentPageText = getCurrentPageText(
    bookTableOfContents,
    chapterNumber,
    pageNumber
  );

  const { isFirstPage, isLastPage } = getPagePosition(
    bookTableOfContents,
    chapterNumber,
    pageNumber
  );

  const nextPageLink = getPageLink(
    bookTableOfContents,
    chapterNumber,
    pageNumber,
    'next'
  );

  const prevPageLink = getPageLink(
    bookTableOfContents,
    chapterNumber,
    pageNumber,
    'prev'
  );

  return (
    <div className="delay-0 duration-200 animate-in fade-in-0">
      <div className="flex flex-col gap-y-12 px-4 pb-6 pt-12 sm:px-20">
        <div>
          <p className="mb-2 text-xs text-muted-foreground sm:text-sm">{`第 ${bookContentPage.chapterNumber} 章`}</p>
          <div className="flex flex-wrap items-center">
            <p className="text-wrap text-xl font-bold sm:text-2xl">
              {bookContentPage.chapterTitle}
            </p>
            <p className="ml-4 mr-2 text-xs text-muted-foreground sm:text-sm">
              {currentPageText}
            </p>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="size-8 rounded-full"
                  variant="ghost"
                  size="icon"
                  asChild
                >
                  <Link
                    to={`/read/${bookId}/table-of-contents`}
                    className="flex items-center gap-x-2"
                  >
                    <TableOfContentsIcon className="size-4" />
                  </Link>
                </Button>
              </TooltipTrigger>
              <TooltipContent>目次に戻る</TooltipContent>
            </Tooltip>
            <Tooltip>
              <TooltipTrigger asChild>
                {bookmark ? (
                  <>
                    <Button
                      className={cn(
                        'rounded-full text-muted-foreground size-8',
                        bookmark && 'text-primary bg-transparent'
                      )}
                      variant="ghost"
                      size="icon"
                      onClick={handleClickUpdate}
                    >
                      <BookmarkIcon
                        className="size-4"
                        style={{
                          fill: 'hsl(var(--primary))',
                        }}
                      />
                    </Button>
                    <BookmarkUpdateDialog
                      bookmark={bookmark}
                      isOpen={isOpenUpdateDialog}
                      setIsOpen={setIsOpenUpdateDialog}
                      updateMutation={updateMutation}
                      deleteMutation={deleteMutation}
                    />
                  </>
                ) : (
                  <>
                    <Button
                      className="size-8 rounded-full text-muted-foreground"
                      variant="ghost"
                      size="icon"
                      onClick={handleClickCreate}
                    >
                      <BookmarkIcon className="size-4" />
                    </Button>
                    <BookmarkCreateDialog
                      bookId={bookId}
                      chapterNumber={chapterNumber}
                      pageNumber={pageNumber}
                      isOpen={isOpenCreateDialog}
                      setIsOpen={setIsOpenCreateDialog}
                      createMutation={createMutation}
                    />
                  </>
                )}
              </TooltipTrigger>
              <TooltipContent>
                {bookmark
                  ? bookmark.note
                    ? `メモ「${bookmark.note}」`
                    : 'ブックマークからから削除'
                  : 'ブックマークに追加'}
              </TooltipContent>
            </Tooltip>
          </div>
        </div>
        <p className="whitespace-pre-wrap">{bookContentPage.content}</p>
      </div>
      <div className="flex justify-between px-0 py-6 sm:px-12">
        <Button
          className={cn(
            'flex items-center gap-x-2 rounded-full hover:bg-transparent',
            isFirstPage && 'pointer-events-none opacity-30'
          )}
          variant="ghost"
          asChild
        >
          <Link to={prevPageLink}>
            <ChevronLeftIcon />
            <span>前のページへ</span>
          </Link>
        </Button>
        <Button
          className={cn(
            'flex items-center gap-x-2 rounded-full hover:bg-transparent',
            isLastPage && 'pointer-events-none opacity-30'
          )}
          variant="ghost"
          asChild
        >
          <Link to={nextPageLink}>
            <span>次のページへ</span>
            <ChevronRightIcon />
          </Link>
        </Button>
      </div>
    </div>
  );
}

------------------------------------------------------------
book-table-of-contents.tsx

import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useApiBook } from '@/hooks/api/use-api-book';
import { useAuth } from '@/hooks/use-auth';
import { cn } from '@/lib/util';
import { useSuspenseQueries } from '@tanstack/react-query';
import { Link } from 'react-router-dom';

type Props = {
  bookId: string;
};

export default function BookTableOfContents({ bookId }: Props) {
  const { getBookDetailsById, getBookTableOfContents } = useApiBook();
  const { user } = useAuth();

  const [{ data: book }, { data: bookTableOfContents }] = useSuspenseQueries({
    queries: [
      {
        queryKey: ['getBookDetailsById', bookId],
        queryFn: () => getBookDetailsById(bookId),
      },
      {
        queryKey: ['getBookTableOfContents', bookId],
        queryFn: () => getBookTableOfContents(bookId),
      },
    ],
  });

  return (
    <div className="delay-0 duration-200 animate-in fade-in-0">
      <div className="flex flex-col gap-y-12 px-4 py-12 sm:px-20">
        <div className="flex w-full flex-col items-center gap-y-6 sm:items-start">
          <p className="text-3xl font-bold sm:text-5xl">{book.title}</p>
          <Tooltip>
            <TooltipTrigger asChild>
              <Button
                className={cn(
                  'w-44 rounded-full bg-transparent',
                  (!user || !bookTableOfContents.chapters.length) &&
                    'pointer-events-none opacity-50'
                )}
                variant="outline"
                asChild
              >
                <Link to={`/read/${bookId}/chapter/1/page/1`}>最初から読む</Link>
              </Button>
            </TooltipTrigger>
            {!user && <TooltipContent>ログインしてこの本を読みましょう</TooltipContent>}
          </Tooltip>
        </div>

        {bookTableOfContents.chapters.length ? (
          <ul className="flex w-full flex-col gap-y-8">
            {bookTableOfContents.chapters.map((chapter) => (
              <li className="w-full text-center sm:text-left" key={chapter.chapterNumber}>
                <p className="text-xs text-muted-foreground/70 sm:text-sm">{`第 ${chapter.chapterNumber} 章`}</p>
                <Link
                  to={`/read/${bookId}/chapter/${chapter.chapterNumber}/page/1`}
                  className={cn(
                    'font-semibold hover:text-primary text-base sm:text-xl',
                    !user && 'pointer-events-none'
                  )}
                >
                  {chapter.chapterTitle}
                </Link>
              </li>
            ))}
          </ul>
        ) : (
          <p className="text-center sm:text-start">目次がありません</p>
        )}
      </div>
    </div>
  );
}

------------------------------------------------------------
bookmark-create-dialog.tsx

import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { BookmarkCreateMutation, BookmarkRequest } from '@/types';
import React, { useEffect, useRef, useState } from 'react';

type Props = {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  createMutation?: BookmarkCreateMutation;
};

export default function BookmarkCreateDialog({
  bookId,
  chapterNumber,
  pageNumber,
  isOpen,
  setIsOpen,
  createMutation,
}: Props) {
  const [note, setNote] = useState('');

  const ref = useRef<HTMLTextAreaElement | null>(null);

  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      setNote('');
    }
  }, [isOpen]);

  const handleAnimationStart = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      ref.current?.focus();
    }
  };

  const handleCreate = () => {
    const requestBody: BookmarkRequest = {
      bookId,
      chapterNumber,
      pageNumber,
      note,
    };
    createMutation?.mutate(requestBody, {
      onSuccess: () => {
        toast({ title: 'ブックマークを作成しました' });
        setIsOpen(false);
      },
      onError: () => {
        toast({
          title: 'ブックマークの作成に失敗しました',
          description: '管理者へ連絡してください。',
          variant: 'destructive',
          duration: 5000,
        });
        setIsOpen(false);
      },
    });
  };

  const handleCloseDialog = () => {
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 min-w-[360px] max-w-[600px] p-4 sm:p-6"
        onEscapeKeyDown={handleCloseDialog}
        onPointerDownOutside={handleCloseDialog}
        onAnimationStart={handleAnimationStart}
      >
        <div>
          <p className="font-semibold leading-10">ブックマーク</p>
          <p className="text-xs text-muted-foreground sm:text-sm">
            このブックマークにメモを残せます。メモが未入力でもブックマーク登録できます。
          </p>
        </div>

        <Textarea
          ref={ref}
          spellCheck={false}
          value={note}
          onChange={(e) => setNote(e.currentTarget.value)}
        />

        <DialogFooter>
          <Button
            className="min-w-24 rounded-full"
            variant="ghost"
            onClick={handleCloseDialog}
          >
            キャンセル
          </Button>
          <Button className="min-w-24 rounded-full" onClick={handleCreate}>
            作成
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
bookmark-item.tsx

import BookmarkUpdateDialog from '@/components/bookmarks/bookmark-update-dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { formatDateJP, formatTime } from '@/lib/util';
import {
  Bookmark,
  BookmarkCreateMutation,
  BookmarkDeleteMutation,
  BookmarkUpdateMutation,
} from '@/types';
import { BookmarkIcon, SquarePenIcon, Trash2Icon } from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router-dom';

type Props = {
  bookmark: Bookmark;
  createMutation?: BookmarkCreateMutation;
  updateMutation?: BookmarkUpdateMutation;
  deleteMutation?: BookmarkDeleteMutation;
};

export default function BookmarkItem({
  bookmark,
  updateMutation,
  deleteMutation,
}: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();

  const handleClickUpdate = () => {
    setIsOpen(true);
  };

  const handleClickDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: '!',
      title: '削除しますか？',
      message: '削除すると元に戻りません。',
      actionLabel: '削除',
    });
    if (isCancel) return;

    deleteMutation?.mutate(bookmark.id, {
      onSuccess: () => {
        toast({ title: 'ブックマークを削除しました' });
      },
    });
  };

  return (
    <Card>
      <CardContent>
        <div className="flex gap-x-4 p-4">
          <div className="flex min-w-20 justify-center sm:min-w-24">
            <Link
              to={`/read/${bookmark.bookId}/chapter/${bookmark.chapterNumber}/page/${bookmark.pageNumber}`}
              className="size-fit"
            >
              <img
                className="h-24 rounded object-cover sm:h-28"
                src={bookmark.book.imageUrl}
                alt={bookmark.book.title}
              />
            </Link>
          </div>
          <div className="flex w-full flex-col justify-center">
            <div className="mb-2 flex flex-col items-start gap-x-4 sm:flex-row sm:items-center">
              <Link
                to={`/read/${bookmark.bookId}/chapter/${bookmark.chapterNumber}/page/${bookmark.pageNumber}`}
                className="size-fit"
              >
                <p className="text-base font-semibold hover:text-primary sm:text-xl">
                  {bookmark.book.title}
                </p>
              </Link>
              <div className="flex flex-wrap items-center">
                <BookmarkIcon
                  className="size-4 text-primary"
                  style={{ fill: 'hsl(var(--primary))' }}
                />
                <p className="mx-2 whitespace-nowrap text-xs leading-8 tracking-wide text-muted-foreground sm:text-sm">
                  {formatDateJP(bookmark.updatedAt)} {formatTime(bookmark.updatedAt)}
                </p>
                <Button
                  className="size-8 rounded-full text-muted-foreground"
                  variant="ghost"
                  size="icon"
                  onClick={handleClickUpdate}
                >
                  <SquarePenIcon className="size-4" />
                </Button>
                <BookmarkUpdateDialog
                  bookmark={bookmark}
                  isOpen={isOpen}
                  setIsOpen={setIsOpen}
                  updateMutation={updateMutation}
                />
                <Button
                  className="size-8 rounded-full text-muted-foreground"
                  variant="ghost"
                  size="icon"
                  onClick={handleClickDelete}
                >
                  <Trash2Icon className="size-4" />
                </Button>
              </div>
            </div>
            <p className="mb-4 text-xs text-muted-foreground sm:text-sm">
              第 {bookmark.chapterNumber} 章 : {bookmark.chapterTitle}（
              {bookmark.pageNumber}ページ目）
            </p>
            <p className="text-muted-foreground">
              {bookmark.note && <span>{bookmark.note}</span>}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
bookmark-list.tsx

import BookmarkItem from '@/components/bookmarks/bookmark-item';
import {
  Bookmark,
  BookmarkCreateMutation,
  BookmarkDeleteMutation,
  BookmarkUpdateMutation,
} from '@/types';

type Props = {
  bookmarks: Bookmark[];
  createMutation?: BookmarkCreateMutation;
  updateMutation?: BookmarkUpdateMutation;
  deleteMutation?: BookmarkDeleteMutation;
};

export default function BookmarkList({
  bookmarks,
  createMutation,
  updateMutation,
  deleteMutation,
}: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {bookmarks.map((bookmark) => (
        <li key={bookmark.id}>
          <BookmarkItem
            bookmark={bookmark}
            createMutation={createMutation}
            updateMutation={updateMutation}
            deleteMutation={deleteMutation}
          />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
bookmark-update-dialog.tsx

import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import {
  Bookmark,
  BookmarkDeleteMutation,
  BookmarkRequest,
  BookmarkUpdateMutation,
} from '@/types';
import React, { useEffect, useRef, useState } from 'react';
import { useLocation } from 'react-router-dom';

type Props = {
  bookmark: Bookmark;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  updateMutation?: BookmarkUpdateMutation;
  deleteMutation?: BookmarkDeleteMutation;
};

export default function BookmarkUpdateDialog({
  bookmark,
  isOpen,
  setIsOpen,
  updateMutation,
  deleteMutation,
}: Props) {
  const [note, setNote] = useState('');

  const ref = useRef<HTMLTextAreaElement | null>(null);

  const location = useLocation();

  const { confirmDialog } = useConfirmDialog();
  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      setNote(bookmark.note);
    }
  }, [isOpen, bookmark.note]);

  const handleAnimationStart = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      ref.current?.focus();
    }
  };

  const handleDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: '!',
      title: 'このブックマークを削除しますか？',
      message: 'ブックマークのメモも削除されます。',
    });
    if (isCancel) return;

    deleteMutation?.mutate(bookmark.id, {
      onSuccess: () => {
        toast({ title: 'ブックマークを削除しました' });
        setIsOpen(false);
      },
      onError: () => {
        toast({
          title: 'ブックマークの削除に失敗しました',
          description: '管理者へ連絡してください。',
          variant: 'destructive',
          duration: 5000,
        });
        setIsOpen(false);
      },
    });
  };

  const handleUpdate = () => {
    const requestBody: BookmarkRequest = {
      bookId: bookmark.bookId,
      chapterNumber: bookmark.chapterNumber,
      pageNumber: bookmark.pageNumber,
      note,
    };
    updateMutation?.mutate(
      { id: bookmark.id, requestBody },
      {
        onSuccess: () => {
          toast({ title: 'ブックマークのメモを更新しました' });
          setIsOpen(false);
        },
        onError: () => {
          toast({
            title: 'ブックマークのメモを更新に失敗しました',
            description: '管理者へ連絡してください。',
            variant: 'destructive',
            duration: 5000,
          });
          setIsOpen(false);
        },
      }
    );
  };

  const handleCloseDialog = () => {
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 min-w-[360px] max-w-[600px] p-4 sm:p-6"
        onEscapeKeyDown={handleCloseDialog}
        onPointerDownOutside={handleCloseDialog}
        onAnimationStart={handleAnimationStart}
      >
        <div>
          <p className="font-semibold leading-10">ブックマーク</p>
          <p className="text-xs text-muted-foreground sm:text-sm">
            メモを編集できます。未入力でもブックマーク登録は消えません。
          </p>
        </div>

        <Textarea
          ref={ref}
          spellCheck={false}
          value={note}
          onChange={(e) => setNote(e.currentTarget.value)}
        />

        <DialogFooter>
          <Button
            className="min-w-24 rounded-full"
            variant="ghost"
            onClick={handleCloseDialog}
          >
            キャンセル
          </Button>
          {location.pathname.includes('read') && (
            <Button
              className="min-w-24 rounded-full"
              variant="outline"
              onClick={handleDelete}
            >
              削除
            </Button>
          )}
          <Button className="min-w-24 rounded-full" onClick={handleUpdate}>
            更新
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
bookmarks.tsx

import BookmarkList from '@/components/bookmarks/bookmark-list';
import PaginationUrl from '@/components/pagination-url';
import { useApiBookmark } from '@/hooks/api/use-api-bookmark';
import { BookmarkRequest } from '@/types';
import { useMutation, useQueryClient, useSuspenseQuery } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';

type Props = {
  page: number;
};

export default function Bookmarks({ page }: Props) {
  const navigate = useNavigate();
  const { getBookmarkPage, updateBookmark, deleteBookmark } = useApiBookmark();

  const { data: bookmarkPage } = useSuspenseQuery({
    queryKey: ['getBookmarkPage', page],
    queryFn: () => getBookmarkPage(page),
  });

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({ queryKey: ['getBookmarkPage', page] });
    navigate('/bookmarks');
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const updateMutation = useMutation({
    mutationFn: ({ id, requestBody }: { id: number; requestBody: BookmarkRequest }) =>
      updateBookmark(id, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (bookmarkId: number) => deleteBookmark(bookmarkId),
    onSuccess,
    onError,
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookmarkPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <BookmarkList
        bookmarks={bookmarkPage.bookmarks}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />
      <PaginationUrl totalPages={bookmarkPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
book-item.tsx

import AverageRatingIcon from '@/components/count-icon/average-rating-icon';
import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import ReviewCountIcon from '@/components/count-icon/review-count-icon';
import { Card, CardContent } from '@/components/ui/card';
import { formatDateJP } from '@/lib/util';
import { Book } from '@/types';
import { Link } from 'react-router-dom';

type Props = {
  book: Book;
};

export default function BookItem({ book }: Props) {
  return (
    <Card className="border-card-foreground/5 bg-card/70">
      <CardContent className="relative flex w-40 flex-col items-center px-3 pb-2 pt-4 sm:w-48 sm:px-4">
        <Link to={`/book/${book.id}`} className="size-fit">
          <img
            className="h-44 rounded object-cover sm:h-52"
            src={book.imageUrl}
            alt={book.title}
          />
        </Link>
        <Link
          to={`/book/${book.id}`}
          className="mt-1 flex h-8 w-full items-center justify-center text-xs hover:text-primary sm:h-10 sm:text-sm"
        >
          <p className="line-clamp-2 text-center">{book.title}</p>
        </Link>
        <div className="mt-1 flex w-full flex-col items-center gap-y-1">
          <p className="text-xs tracking-wide text-muted-foreground">
            {formatDateJP(book.publishedDate)}
          </p>
          <div className="flex justify-around gap-x-2 sm:gap-x-4">
            <FavoriteCountIcon size="sm" bookId={book.id} />
            <ReviewCountIcon size="sm" reviewCount={book.reviewCount} />
            <AverageRatingIcon size="sm" averageRating={book.averageRating} />
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
book-list.tsx

import BookItem from '@/components/books/book-item';
import { Book } from '@/types';

type Props = {
  books: Book[];
};

export default function BookList({ books }: Props) {
  if (!books.length) {
    return (
      <div className="flex h-32 items-center justify-center">
        <p>見つかりませんでした</p>
      </div>
    );
  }

  return (
    <ul className="grid grid-cols-2 justify-items-center gap-2 sm:grid-cols-3 sm:gap-3 md:grid-cols-4 lg:grid-cols-5">
      {books.map((book) => (
        <li key={book.id}>
          <BookItem book={book} />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
books-discover.tsx

import BookList from '@/components/books/book-list';
import PaginationUrl from '@/components/pagination-url';
import { useApiBook } from '@/hooks/api/use-api-book';
import { useSuspenseQuery } from '@tanstack/react-query';

type Props = {
  genreIds: string;
  condition: string;
  page: number;
};

export default function BooksDiscover({ genreIds, condition, page }: Props) {
  const { getBookPageByGenreId } = useApiBook();

  const { data: bookPage } = useSuspenseQuery({
    queryKey: ['getBookPageByGenreId', genreIds, condition, page],
    queryFn: () => getBookPageByGenreId(genreIds, condition, page),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <BookList books={bookPage.books} />
      <PaginationUrl totalPages={bookPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
books-new-releases.tsx

import BookList from '@/components/books/book-list';
import { useApiBook } from '@/hooks/api/use-api-book';
import { useSuspenseQuery } from '@tanstack/react-query';

export default function BooksNewReleases() {
  const { getNewBooks } = useApiBook();

  const { data: bookPage } = useSuspenseQuery({
    queryKey: ['getNewBooks'],
    queryFn: () => getNewBooks(),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <BookList books={bookPage.books} />
    </div>
  );
}

------------------------------------------------------------
books-search.tsx

import BookList from '@/components/books/book-list';
import PaginationUrl from '@/components/pagination-url';
import { useApiBook } from '@/hooks/api/use-api-book';
import { useSuspenseQuery } from '@tanstack/react-query';

type Props = {
  searchQuery: string;
  page: number;
};

export default function BooksSearch({ searchQuery, page }: Props) {
  const { getBookPageByQuery } = useApiBook();

  const { data: bookPage } = useSuspenseQuery({
    queryKey: ['getBookPageByQuery', searchQuery, page],
    queryFn: () => getBookPageByQuery(searchQuery, page),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <BookList books={bookPage.books} />
      <PaginationUrl totalPages={bookPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
favorite-item.tsx

import { Card, CardContent } from '@/components/ui/card';
import { formatDateJP, formatTime } from '@/lib/util';
import { Favorite } from '@/types';
import { HeartIcon } from 'lucide-react';
import { Link } from 'react-router-dom';

type Props = {
  favorite: Favorite;
};

export default function FavoriteItem({ favorite }: Props) {
  return (
    <Card>
      <CardContent>
        <div className="flex gap-x-4 p-4">
          <div className="flex min-w-20 justify-center sm:min-w-24">
            <Link to={`/book/${favorite.book.id}`} className="size-fit">
              <img
                className="h-24 rounded object-cover sm:h-28"
                src={favorite.book.imageUrl}
                alt={favorite.book.title}
              />
            </Link>
          </div>
          <div className="flex w-full flex-col justify-center">
            <div className="mb-2 flex flex-col items-start gap-x-4 sm:flex-row sm:items-center">
              <Link to={`/book/${favorite.book.id}`} className="size-fit">
                <p className="text-base font-semibold hover:text-primary sm:text-xl">
                  {favorite.book.title}
                </p>
              </Link>
              <div className="flex items-center">
                <HeartIcon
                  className="size-4 text-primary"
                  style={{ fill: 'hsl(var(--primary))' }}
                />
                <p className="mx-2 whitespace-nowrap text-xs leading-8 tracking-wide text-muted-foreground sm:text-sm">
                  {formatDateJP(favorite.updatedAt)} {formatTime(favorite.updatedAt)}
                </p>
              </div>
            </div>
            <div className="mb-4 flex w-full flex-wrap items-center gap-x-3 text-muted-foreground">
              <p className="text-xs">著者</p>
              {favorite.book.authors.map((author) => (
                <p className="text-sm" key={author}>
                  {author}
                </p>
              ))}
            </div>
            <p className="text-muted-foreground">{favorite.book.description}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
favorite-list.tsx

import FavoriteItem from '@/components/favorites/favorite-item';
import { Favorite } from '@/types';

type Props = {
  favorites: Favorite[];
};

export default function FavoriteList({ favorites }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {favorites.map((favorite, index) => (
        <li key={index}>
          <FavoriteItem favorite={favorite} />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
favorites-skeleton.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { FETCH_BOOKMARKS_MAX_RESULTS } from '@/constants/constants';

export default function FavoritesSkeleton() {
  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <ul className="flex flex-col gap-y-2">
        {[...Array<number>(FETCH_BOOKMARKS_MAX_RESULTS)].map((_, index) => (
          <li key={index}>
            <Card>
              <CardContent className="p-4">
                <div className="flex gap-x-4">
                  <div className="flex min-w-20 justify-center sm:min-w-24">
                    <Skeleton className="h-24 w-20 rounded bg-muted-foreground/5 object-cover sm:h-28" />
                  </div>
                  <div className="flex w-full flex-col justify-center gap-y-2">
                    <div className="sm:px-4">
                      <Skeleton className="h-6 w-48 rounded-full bg-muted-foreground/5 sm:h-7" />
                      <Skeleton className="my-1 h-4 w-16 rounded-full bg-muted-foreground/5" />
                      <Skeleton className="my-1 h-4 w-32 rounded-full bg-muted-foreground/5" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </li>
        ))}
      </ul>
    </div>
  );
}

------------------------------------------------------------
favorites.tsx

import FavoriteList from '@/components/favorites/favorite-list';
import PaginationUrl from '@/components/pagination-url';
import { useApiFavorite } from '@/hooks/api/use-api-favorite';
import { useSuspenseQuery } from '@tanstack/react-query';

type Props = {
  page: number;
};

export default function Favorites({ page }: Props) {
  const { getFavoritePage } = useApiFavorite();

  const { data: bookPage } = useSuspenseQuery({
    queryKey: ['getFavoritePage', page],
    queryFn: () => getFavoritePage(page),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <FavoriteList favorites={bookPage.favorites} />
      <PaginationUrl totalPages={bookPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
genre-item.tsx

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/util';
import { Genre } from '@/types';
import { CheckIcon } from 'lucide-react';
import { useNavigate } from 'react-router-dom';

type Props = {
  genre: Genre;
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost';
  isActive?: boolean;
  onClick?: (genreId: number) => void;
};

export default function GenreItem({
  genre,
  variant = 'ghost',
  isActive = false,
  onClick,
}: Props) {
  const navigate = useNavigate();

  const handleClick = () => {
    if (onClick) {
      onClick(genre.id);
    } else {
      navigate(`/discover?genreIds=${genre.id}&condition=SINGLE`);
    }
  };

  return (
    <Button
      className={cn(
        'rounded-full m-1 text-muted-foreground text-xs sm:text-sm',
        isActive && 'text-foreground',
        variant === 'outline' && 'bg-transparent text-primary'
      )}
      variant={isActive ? 'secondary' : variant}
      size="sm"
      onClick={handleClick}
    >
      {isActive && <CheckIcon className="mr-1 size-4" strokeWidth={4} />}
      {genre.name}
    </Button>
  );
}

------------------------------------------------------------
genre-list.tsx

import GenreItem from '@/components/genres/genre-item';
import { Genre } from '@/types';

type Props = {
  genres: Genre[];
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost';
  activeIds?: number[];
  onClick?: (genreId: number) => void;
};

export default function GenreList({ genres, variant, activeIds, onClick }: Props) {
  return (
    <ul className="flex flex-wrap">
      {genres.map((genre) => (
        <li key={genre.id}>
          <GenreItem
            genre={genre}
            variant={variant}
            isActive={activeIds?.includes(genre.id)}
            onClick={onClick}
          />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
genres-condition-selector.tsx

import { Label } from '@/components/ui/label';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { useEffect, useState } from 'react';

type Props = {
  condition: string;
  onConditionChange: (condition: string) => void;
};

export default function GenresConditionSelector({ condition, onConditionChange }: Props) {
  const CONDITIONS = [
    { text: '単一選択', value: 'SINGLE' },
    { text: 'AND条件', value: 'AND' },
    { text: 'OR条件', value: 'OR' },
  ];

  const [selectedCondition, setSelectedCondition] = useState(condition);

  useEffect(() => {
    setSelectedCondition(condition);
  }, [condition]);

  const handleChangeCondition = (condition: string) => {
    setSelectedCondition(condition);
    onConditionChange(condition);
  };

  return (
    <RadioGroup
      className="flex gap-x-4"
      value={selectedCondition}
      onValueChange={handleChangeCondition}
    >
      {CONDITIONS.map((condition) => (
        <div
          className="flex flex-col-reverse items-center sm:flex-row"
          key={condition.value}
        >
          <RadioGroupItem value={condition.value} id={condition.value} />
          <Label
            className="cursor-pointer select-none p-2 text-xs sm:text-sm"
            htmlFor={condition.value}
          >
            {condition.text}
          </Label>
        </div>
      ))}
    </RadioGroup>
  );
}

------------------------------------------------------------
genres-discover.tsx

import GenreList from '@/components/genres/genre-list';
import { useApiGenre } from '@/hooks/api/use-api-genre';
import { useSuspenseQuery } from '@tanstack/react-query';
import { useEffect, useState } from 'react';

type Props = {
  genreIds: string;
  condition: string;
  onGenreIdsChange: (genreIds: string) => void;
};

export default function GenresDiscover({ genreIds, condition, onGenreIdsChange }: Props) {
  const [selectedGenreIds, setSelectedGenreIds] = useState<number[]>([]);

  const { getGenres } = useApiGenre();

  const { data: genres } = useSuspenseQuery({
    queryKey: ['getGenres'],
    queryFn: () => getGenres(),
  });

  useEffect(() => {
    const ids = genreIds.split(',').map((genreId) => Number(genreId));
    setSelectedGenreIds(ids);
  }, [genreIds]);

  const handleClick = (genreId: number) => {
    let newGenreIds = selectedGenreIds.includes(genreId)
      ? selectedGenreIds.filter((id) => id !== genreId)
      : [...selectedGenreIds, genreId].sort((a, b) => a - b);

    // 最後の一つをクリックした場合、空配列になるので必ず１つは選択になるようにする
    // SINGLE選択に関しては必ず１つの選択になる
    if (newGenreIds.length === 0 || condition === 'SINGLE') {
      newGenreIds = [genreId];
    }
    setSelectedGenreIds(newGenreIds);
    onGenreIdsChange(newGenreIds.join(','));
  };

  return <GenreList genres={genres} activeIds={selectedGenreIds} onClick={handleClick} />;
}

------------------------------------------------------------
genres-skeleton.tsx

import { Skeleton } from '@/components/ui/skeleton';

export default function GenresSkeleton() {
  return (
    <ul className="flex flex-wrap">
      {[...Array<number>(12)].map((_, index) => (
        <li key={index}>
          {/* 背景色を bg-muted-foreground/5 にしてスケルトン見せるより、高さだけズレないように透明のほうがよい */}
          <Skeleton className="m-1 h-9 w-24 rounded-full bg-muted-foreground/5" />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
genres-top-page.tsx

import GenreList from '@/components/genres/genre-list';
import { useApiGenre } from '@/hooks/api/use-api-genre';
import { useSuspenseQuery } from '@tanstack/react-query';

export default function GenresTopPage() {
  const { getGenres } = useApiGenre();

  const { data: genres } = useSuspenseQuery({
    queryKey: ['getGenres'],
    queryFn: () => getGenres(),
  });

  return <GenreList genres={genres} />;
}

------------------------------------------------------------
my-review-item.tsx

import Rating from '@/components/rating';
import ReviewUpdateDialog from '@/components/reviews/review-update-dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { formatDateJP, formatTime } from '@/lib/util';
import {
  Review,
  ReviewCreateMutation,
  ReviewDeleteMutation,
  ReviewUpdateMutation,
} from '@/types';
import { SquarePenIcon, Trash2Icon } from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router-dom';

type Props = {
  review: Review;
  createMutation?: ReviewCreateMutation;
  updateMutation?: ReviewUpdateMutation;
  deleteMutation?: ReviewDeleteMutation;
};

export default function MyReviewItem({ review, updateMutation, deleteMutation }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();

  const handleClickUpdate = () => {
    setIsOpen(true);
  };

  const handleClickDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: '!',
      title: '削除しますか？',
      message: '削除すると元に戻りません。',
      actionLabel: '削除',
    });
    if (isCancel) return;

    deleteMutation?.mutate(review.id, {
      onSuccess: () => {
        toast({ title: 'レビューを削除しました' });
      },
    });
  };

  return (
    <Card>
      <CardContent>
        <div className="flex gap-x-4 p-4">
          <div className="flex min-w-20 justify-center sm:min-w-24">
            <Link to={`/book/${review.book.id}`} className="size-fit">
              <img
                className="h-24 rounded object-cover sm:h-28"
                src={review.book.imageUrl}
                alt={review.book.title}
              />
            </Link>
          </div>
          <div className="flex w-full flex-col justify-center">
            <Link to={`/book/${review.book.id}`} className="size-fit">
              <p className="text-base font-semibold hover:text-primary sm:text-xl">
                {review.book.title}
              </p>
            </Link>
            <div className="mb-2 flex flex-col items-start sm:flex-row sm:items-center">
              <div className="mr-2">
                <Rating rating={review.rating} readOnly />
              </div>
              <div className="flex flex-wrap items-center">
                <p className="mr-2 whitespace-nowrap text-xs leading-8 tracking-wide text-muted-foreground sm:text-sm">
                  {formatDateJP(review.updatedAt)} {formatTime(review.updatedAt)}
                </p>
                <Button
                  className="size-8 rounded-full text-muted-foreground"
                  variant="ghost"
                  size="icon"
                  onClick={handleClickUpdate}
                >
                  <SquarePenIcon className="size-4" />
                </Button>
                <ReviewUpdateDialog
                  review={review}
                  isOpen={isOpen}
                  setIsOpen={setIsOpen}
                  updateMutation={updateMutation}
                />
                <Button
                  className="size-8 rounded-full text-muted-foreground"
                  variant="ghost"
                  size="icon"
                  onClick={handleClickDelete}
                >
                  <Trash2Icon className="size-4" />
                </Button>
              </div>
            </div>
            <p className="text-muted-foreground">{review.comment}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
my-review-list.tsx

import MyReviewItem from '@/components/my-reviews/my-review-item';
import {
  Review,
  ReviewCreateMutation,
  ReviewDeleteMutation,
  ReviewUpdateMutation,
} from '@/types';

type Props = {
  reviews: Review[];
  createMutation?: ReviewCreateMutation;
  updateMutation?: ReviewUpdateMutation;
  deleteMutation?: ReviewDeleteMutation;
};

export default function MyReviewList({
  reviews,
  createMutation,
  updateMutation,
  deleteMutation,
}: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {reviews.map((review) => (
        <li key={review.id}>
          <MyReviewItem
            review={review}
            createMutation={createMutation}
            updateMutation={updateMutation}
            deleteMutation={deleteMutation}
          />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
my-reviews.tsx

import MyReviewList from '@/components/my-reviews/my-review-list';
import PaginationUrl from '@/components/pagination-url';
import { useApiReview } from '@/hooks/api/use-api-review';
import { ReviewRequest } from '@/types';
import { useMutation, useQueryClient, useSuspenseQuery } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';

type Props = {
  page: number;
};

export default function MyReviews({ page }: Props) {
  const navigate = useNavigate();

  const { getReviewPageByUser, updateReview, deleteReview } = useApiReview();

  const { data: reviewPage } = useSuspenseQuery({
    queryKey: ['getReviewPageByUser', page],
    queryFn: () => getReviewPageByUser(page),
  });

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({
      queryKey: ['getReviewPageByUser', page],
    });
    navigate('/my-reviews');
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const updateMutation = useMutation({
    mutationFn: ({ id, requestBody }: { id: number; requestBody: ReviewRequest }) =>
      updateReview(id, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (id: number) => deleteReview(id),
    onSuccess,
    onError,
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {reviewPage.totalItems}
        <span className="ml-1 mr-4 text-sm text-muted-foreground">件</span>
      </p>
      <MyReviewList
        reviews={reviewPage.reviews}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />
      <PaginationUrl totalPages={reviewPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
review-create-dialog.tsx

import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { ReviewCreateMutation, ReviewRequest } from '@/types';
import React, { useEffect, useRef, useState } from 'react';

type Props = {
  bookId: string;
  page: number;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  createMutation?: ReviewCreateMutation;
};

export default function ReviewCreateDialog({
  bookId,
  isOpen,
  setIsOpen,
  createMutation,
}: Props) {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');

  const ref = useRef<HTMLTextAreaElement | null>(null);

  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();

  useEffect(() => {
    if (isOpen) {
      setRating(0);
      setComment('');
    }
  }, [isOpen]);

  const handleAnimationStart = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      ref.current?.focus();
    }
  };

  const handleClickPost = async () => {
    if (rating === 0) {
      const { isCancel } = await confirmDialog({
        icon: '?',
        title: 'このまま投稿しますか？',
        message: '星の数が「0」のままです。',
        actionLabel: '投稿',
      });
      if (isCancel) return;
    }

    const requestBody: ReviewRequest = { bookId, comment, rating };
    createMutation?.mutate(requestBody, {
      onSuccess: () => {
        toast({ title: 'レビューを投稿しました' });
        setIsOpen(false);
      },
      onError: () => {
        toast({
          title: 'レビュー投稿に失敗しました',
          description: '管理者へ連絡してください。',
          variant: 'destructive',
          duration: 5000,
        });
        setIsOpen(false);
      },
    });
  };

  const handleClickCancel = async () => {
    if (comment) {
      const { isCancel } = await confirmDialog({
        icon: '?',
        title: 'キャンセルして閉じますか？',
        message: 'コメントはまだ投稿していません。',
        persistent: true,
      });
      if (isCancel) return;
    }
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 min-w-[360px] max-w-[600px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
        onAnimationStart={handleAnimationStart}
      >
        <div className="flex items-start justify-between">
          <div>
            <p className="font-semibold leading-10">レビュー</p>
            <p className="text-xs text-muted-foreground sm:text-sm">
              素敵な感想を伝えましょう！
            </p>
          </div>
          <div>
            <Rating rating={rating} onChange={setRating} />
            <p className="text-center text-xs text-muted-foreground sm:text-sm">
              星をクリックして決定
            </p>
          </div>
        </div>

        <Textarea
          ref={ref}
          spellCheck={false}
          value={comment}
          onChange={(e) => setComment(e.currentTarget.value)}
        />

        <DialogFooter>
          <Button
            className="min-w-24 rounded-full"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24 rounded-full"
            disabled={comment === ''}
            onClick={handleClickPost}
          >
            投稿
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
review-item.tsx

import Rating from '@/components/rating';
import ReviewUpdateDialog from '@/components/reviews/review-update-dialog';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { useAuth } from '@/hooks/use-auth';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { formatDateJP, formatTime } from '@/lib/util';
import {
  Review,
  ReviewCreateMutation,
  ReviewDeleteMutation,
  ReviewUpdateMutation,
} from '@/types';
import { SquarePenIcon, Trash2Icon } from 'lucide-react';
import { useState } from 'react';

type Props = {
  review: Review;
  createMutation?: ReviewCreateMutation;
  updateMutation?: ReviewUpdateMutation;
  deleteMutation?: ReviewDeleteMutation;
};

export default function ReviewItem({ review, updateMutation, deleteMutation }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const { user } = useAuth();
  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();

  const handleClickUpdate = () => {
    setIsOpen(true);
  };

  const handleClickDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: '!',
      title: '削除しますか？',
      message: '削除すると元に戻りません。',
      actionLabel: '削除',
    });
    if (isCancel) return;

    deleteMutation?.mutate(review.id, {
      onSuccess: () => {
        toast({ title: 'レビューを削除しました' });
      },
    });
  };

  return (
    <div className="delay-0 duration-500 animate-in fade-in-0 slide-in-from-top-2 fill-mode-both">
      <div className="p-4">
        <div className="flex flex-col items-center justify-between sm:flex-row">
          <div className="flex w-full items-center gap-x-4">
            <Avatar className="size-16">
              <AvatarImage
                className="bg-primary/50"
                src={review.avatarUrl}
                alt="avatar-image"
              />
              <AvatarFallback className="font-semibold">
                {review.name.slice(0, 1)}
              </AvatarFallback>
            </Avatar>
            <div>
              <p className="-mb-1 text-lg font-semibold">{review.name}</p>
              <div className="flex items-center">
                <p className="whitespace-nowrap text-sm leading-8 tracking-wide text-muted-foreground">
                  {formatDateJP(review.updatedAt)} {formatTime(review.updatedAt)}
                </p>
                <div className="ml-2 flex w-16">
                  {user?.id === review.userId && (
                    <>
                      <Button
                        className="size-8 rounded-full text-muted-foreground"
                        variant="ghost"
                        size="icon"
                        onClick={handleClickUpdate}
                      >
                        <SquarePenIcon className="size-4" />
                      </Button>
                      <ReviewUpdateDialog
                        review={review}
                        isOpen={isOpen}
                        setIsOpen={setIsOpen}
                        updateMutation={updateMutation}
                      />
                      <Button
                        className="size-8 rounded-full text-muted-foreground"
                        variant="ghost"
                        size="icon"
                        onClick={handleClickDelete}
                      >
                        <Trash2Icon className="size-4" />
                      </Button>
                    </>
                  )}
                </div>
              </div>
            </div>
          </div>
          <Rating rating={review.rating} readOnly />
        </div>
        <p className="mt-2 text-muted-foreground sm:pl-20">{review.comment}</p>
      </div>
    </div>
  );
}

------------------------------------------------------------
review-list.tsx

import ReviewItem from '@/components/reviews/review-item';
import { Separator } from '@/components/ui/separator';
import {
  Review,
  ReviewCreateMutation,
  ReviewDeleteMutation,
  ReviewUpdateMutation,
} from '@/types';

type Props = {
  reviews: Review[];
  createMutation?: ReviewCreateMutation;
  updateMutation?: ReviewUpdateMutation;
  deleteMutation?: ReviewDeleteMutation;
};

export default function ReviewList({
  reviews,
  createMutation,
  updateMutation,
  deleteMutation,
}: Props) {
  return (
    <ul className="flex flex-col p-3 sm:p-6">
      {reviews.map((review) => (
        <li key={review.id}>
          <Separator className="bg-foreground/10" />
          <ReviewItem
            review={review}
            createMutation={createMutation}
            updateMutation={updateMutation}
            deleteMutation={deleteMutation}
          />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
review-update-dialog.tsx

import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useToast } from '@/hooks/use-toast';
import { Review, ReviewRequest, ReviewUpdateMutation } from '@/types';
import React, { useEffect, useRef, useState } from 'react';

type Props = {
  review: Review;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  updateMutation?: ReviewUpdateMutation;
};

export default function ReviewUpdateDialog({
  review,
  isOpen,
  setIsOpen,
  updateMutation,
}: Props) {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');

  const ref = useRef<HTMLTextAreaElement | null>(null);

  const { toast } = useToast();

  useEffect(() => {
    if (isOpen) {
      setRating(review.rating);
      setComment(review.comment);
    }
  }, [isOpen, review.comment, review.rating]);

  const handleAnimationStart = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      ref.current?.focus();
    }
  };

  const handleClickUpdate = () => {
    const requestBody: ReviewRequest = { bookId: review.bookId, comment, rating };
    updateMutation?.mutate(
      { id: review.id, requestBody },
      {
        onSuccess: () => {
          toast({ title: 'レビューを更新しました' });
          setIsOpen(false);
        },
        onError: () => {
          toast({
            title: 'レビューの更新に失敗しました',
            description: '管理者へ連絡してください。',
            variant: 'destructive',
            duration: 5000,
          });
          setIsOpen(false);
        },
      }
    );
  };

  const handleClickCancel = async () => {
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 min-w-[360px] max-w-[600px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
        onAnimationStart={handleAnimationStart}
      >
        <div className="flex items-start justify-between">
          <div>
            <p className="font-semibold leading-10">レビュー</p>
            <p className="text-xs text-muted-foreground sm:text-sm">
              レビュー内容を編集できます。
            </p>
          </div>
          <div>
            <Rating rating={rating} onChange={setRating} />
            <p className="text-center text-xs text-muted-foreground sm:text-sm">
              星をクリックして決定
            </p>
          </div>
        </div>

        <Textarea
          ref={ref}
          spellCheck={false}
          value={comment}
          onChange={(e) => setComment(e.currentTarget.value)}
        />

        <DialogFooter>
          <Button
            className="min-w-24 rounded-full"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24 rounded-full"
            disabled={comment === ''}
            onClick={handleClickUpdate}
          >
            更新
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
reviews-book-detail.tsx

import ReviewCreateDialog from '@/components/reviews/review-create-dialog';
import ReviewList from '@/components/reviews/review-list';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useApiReview } from '@/hooks/api/use-api-review';
import { useAuth } from '@/hooks/use-auth';
import { Review, ReviewRequest } from '@/types';
import {
  useMutation,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import { useEffect, useState } from 'react';

type Props = {
  bookId: string;
};

export default function ReviewsBookDetail({ bookId }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const [currentPage, setCurrentPage] = useState(1);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [totalPages, setTotalPages] = useState(0);

  const { user } = useAuth();
  const {
    getReviewPage,
    checkSelfReviewExists,
    createReview,
    updateReview,
    deleteReview,
  } = useApiReview();

  const { data: initialReviewPage } = useSuspenseQuery({
    queryKey: ['getReviewPage', bookId, 1],
    queryFn: () => getReviewPage(bookId, 1),
  });

  // ログインしていない場合は、enabledオプションを指定して
  // queryFnを呼び出さないようにする（この指定はuseSuspenseQueryでは出来ない模様）
  const { data: reviewExists = false } = useQuery({
    queryKey: ['checkSelfReviewExists', bookId],
    queryFn: () => checkSelfReviewExists(bookId),
    enabled: !!user,
    retry: false,
  });

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({ queryKey: ['getReviewPage', bookId, 1] });
    queryClient.invalidateQueries({ queryKey: ['getBookDetailsById', bookId] });
    queryClient.invalidateQueries({ queryKey: ['checkSelfReviewExists', bookId] });
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const createMutation = useMutation({
    mutationFn: (reqestBody: ReviewRequest) => createReview(reqestBody),
    onSuccess,
    onError,
  });

  const updateMutation = useMutation({
    mutationFn: ({ id, requestBody }: { id: number; requestBody: ReviewRequest }) =>
      updateReview(id, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (id: number) => deleteReview(id),
    onSuccess,
    onError,
  });

  useEffect(() => {
    if (initialReviewPage) {
      setCurrentPage(1);
      setReviews(initialReviewPage.reviews);
      setTotalPages(initialReviewPage.totalPages);
    }
  }, [initialReviewPage]);

  const loadMoreReviews = async () => {
    const nextPage = currentPage + 1;
    const nextReviewPage = await getReviewPage(bookId, nextPage);
    setReviews((prevReviews) => [...prevReviews, ...nextReviewPage.reviews]);
    setCurrentPage(nextPage);
  };

  return (
    <div className="mx-auto w-full pb-4 lg:w-3/4">
      <div className="flex flex-col-reverse items-center justify-end gap-y-4 sm:flex-row sm:gap-x-4 sm:px-6">
        <p>レビュー {initialReviewPage.totalItems} 件</p>
        <Tooltip>
          <TooltipTrigger asChild>
            <Button
              className="w-44 rounded-full bg-transparent"
              variant="outline"
              disabled={user ? reviewExists : true}
              onClick={() => user && setIsOpen(true)}
            >
              {user && reviewExists ? 'レビュー済み' : 'レビューする'}
            </Button>
          </TooltipTrigger>
          {!user && (
            <TooltipContent>
              ログインしてこの本の「レビュー」を書きましょう
            </TooltipContent>
          )}
        </Tooltip>
        <ReviewCreateDialog
          bookId={bookId}
          page={currentPage}
          isOpen={isOpen}
          setIsOpen={setIsOpen}
          createMutation={createMutation}
        />
      </div>

      <ReviewList
        reviews={reviews}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />

      {currentPage < totalPages && (
        <div className="flex justify-center">
          <Button
            className="w-44 rounded-full text-muted-foreground"
            variant="ghost"
            onClick={loadMoreReviews}
          >
            もっと見る
          </Button>
        </div>
      )}
    </div>
  );
}

------------------------------------------------------------
profile-counts.tsx

import CountUpNumber from '@/components/count-up-number';
import { useApiUser } from '@/hooks/api/use-api-user';
import { useSuspenseQuery } from '@tanstack/react-query';
import { Link } from 'react-router-dom';

export default function ProfileCounts() {
  const { getProfileCounts } = useApiUser();

  const { data: profileCounts } = useSuspenseQuery({
    queryKey: ['getProfileCounts'],
    queryFn: () => getProfileCounts(),
  });

  return (
    <div className="flex justify-between pt-8">
      <div className="delay-0 duration-500 animate-in fade-in-0 slide-in-from-bottom-10 fill-mode-both">
        <Link to={'/favorites'}>
          <div className="w-24 text-center">
            <p className="text-xl font-bold">
              <CountUpNumber end={profileCounts.favoriteCount} delay={300} />
            </p>
            <p className="text-sm">お気に入り</p>
          </div>
        </Link>
      </div>
      <div className="delay-100 duration-500 animate-in fade-in-0 slide-in-from-bottom-10 fill-mode-both">
        <Link to={'/bookmarks'}>
          <div className="w-24 text-center">
            <p className="text-xl font-bold">
              <CountUpNumber end={profileCounts.bookmarkCount} delay={400} />
            </p>
            <p className="text-sm">ブックマーク</p>
          </div>
        </Link>
      </div>
      <div className="delay-200 duration-500 animate-in fade-in-0 slide-in-from-bottom-10 fill-mode-both">
        <Link to={'/my-reviews'}>
          <div className="w-24 text-center">
            <p className="text-xl font-bold">
              <CountUpNumber end={profileCounts.reviewCount} delay={500} />
            </p>
            <p className="text-sm">マイレビュー</p>
          </div>
        </Link>
      </div>
    </div>
  );
}

------------------------------------------------------------
confirm-dialog.tsx

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { ConfirmDialogOptions } from '@/hooks/use-confirm-dialog';
import {
  AlertTriangleIcon,
  CheckCircle2Icon,
  HelpCircleIcon,
  InfoIcon,
  LucideProps,
} from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { cn } from '@/lib/util';
import React, { useEffect, useRef, useState } from 'react';

type IconType = {
  [key: string]: {
    icon: React.ForwardRefExoticComponent<
      Omit<LucideProps, 'ref'> & React.RefAttributes<SVGSVGElement>
    >;
    variant: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost';
    color: string;
  };
};

const iconTypes: IconType = {
  ['']: { icon: InfoIcon, variant: 'default', color: '' },
  ['i']: { icon: InfoIcon, variant: 'default', color: '' },
  ['?']: { icon: HelpCircleIcon, variant: 'default', color: '' },
  ['!']: { icon: AlertTriangleIcon, variant: 'destructive', color: 'text-destructive' },
  ['c']: { icon: CheckCircle2Icon, variant: 'default', color: '' },
};

const defaultOptions: ConfirmDialogOptions = {
  icon: '',
  title: '',
  message: '',
  actionLabel: 'OK',
  actionOnly: false,
  persistent: false,
  showInput: false,
  inputLabel: '',
  inputPlaceholder: '',
  inputRows: 1,
};

export const CONFIRM_DIALOG_EVENT = 'CONFIRM_DIALOG_EVENT';

type SELECTED_BUTTON = 'action' | 'cancel' | undefined;

const ConfirmDialog = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [options, setOptions] = useState<ConfirmDialogOptions>(defaultOptions);
  const refTextarea = useRef<HTMLTextAreaElement | null>(null);
  const Icon = iconTypes[options.icon].icon || InfoIcon;

  // hooksから呼ぶためにイベントリスナー登録
  useEffect(() => {
    const handleEvent = (event: CustomEvent<ConfirmDialogOptions>) => {
      setIsOpen(true);
      setOptions({ ...defaultOptions, ...event.detail });
    };
    document.addEventListener(CONFIRM_DIALOG_EVENT, handleEvent as EventListener);
    return () => {
      document.removeEventListener(CONFIRM_DIALOG_EVENT, handleEvent as EventListener);
    };
  }, []);

  // アニメーションフラグ（閉じれないことを伝えるためにぶるっとする）
  const [isPersistentAnimation, setIsPersistentAnimation] = useState(false);

  // ダイアログを閉じる時のイベント
  const handleCloseDialog = () => {
    if (options.persistent) {
      setIsPersistentAnimation(true);
      setTimeout(() => {
        setIsPersistentAnimation(false);
      }, 50);
      return;
    }
    handleClickCancel();
  };

  // 押したボタンによって、戻り値（resolveの引数も変更する）
  const [selected, setSelected] = useState<SELECTED_BUTTON>();

  const handleClickAction = () => {
    setIsOpen(false);
    setSelected('action');
  };

  const handleClickCancel = () => {
    setIsOpen(false);
    setSelected('cancel');
  };

  const handleAnimationEnd = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      if (isOpen && options.showInput) {
        refTextarea.current?.focus();
      }
    } else if (e.animationName === 'exit') {
      switch (selected) {
        case 'action':
          options.resolve?.({
            isAction: true,
            isCancel: false,
            text: refTextarea.current?.value || '',
          });
          return;
        case 'cancel':
          options.resolve?.({
            isAction: false,
            isCancel: true,
            text: '',
          });
          return;
      }
    }
  };

  return (
    <Dialog open={isOpen}>
      <DialogContent
        className={cn(
          'w-[360px] sm:w-[400px] transition-transform ease-in-out [transition-duration:25ms]',
          isPersistentAnimation && 'scale-[1.02] transform'
        )}
        onEscapeKeyDown={handleCloseDialog}
        onPointerDownOutside={handleCloseDialog}
        onAnimationEnd={handleAnimationEnd}
      >
        <DialogHeader>
          <DialogTitle className="my-2 flex items-center">
            <Icon className={cn('mr-3 min-w-fit', iconTypes[options.icon].color)} />
            <p className=" leading-6">{options.title}</p>
          </DialogTitle>
          {options.message && (
            <DialogDescription className="pt-2 text-left">
              {options.message}
            </DialogDescription>
          )}
        </DialogHeader>

        {options.showInput && (
          <div className="mb-4 grid w-full items-center gap-1.5">
            <p className="text-xs">{options.inputLabel}</p>
            <Textarea
              ref={refTextarea}
              className="min-h-[16px] resize-none"
              placeholder={options.inputPlaceholder}
              rows={options.inputRows}
            />
          </div>
        )}

        <DialogFooter className="flex justify-end">
          {!options.actionOnly && (
            <Button
              className="min-w-24 rounded-full"
              variant="ghost"
              onClick={handleClickCancel}
            >
              キャンセル
            </Button>
          )}
          <Button
            className={cn('min-w-24 rounded-full')}
            variant={iconTypes[options.icon].variant || 'default'}
            onClick={handleClickAction}
          >
            {options.actionLabel}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export { ConfirmDialog };

------------------------------------------------------------
constants.ts

import {
  BookCopyIcon,
  BookmarkIcon,
  HeartIcon,
  MessageSquareIcon,
  SettingsIcon,
} from 'lucide-react';

// ロゴ
export const LOGO_TITLE = 'My Books';

// メニュー一覧
export const MENU_LIST = [
  {
    href: '/discover?genreIds=1&condition=SINGLE',
    title: 'ジャンル',
    icon: BookCopyIcon,
  },
  { href: '/favorites', title: 'お気に入り', icon: HeartIcon },
  { href: '/bookmarks', title: 'ブックマーク', icon: BookmarkIcon },
  { href: '/my-reviews', title: 'マイレビュー', icon: MessageSquareIcon },
  { href: '/settings/profile', title: '設定', icon: SettingsIcon },
];

// API Endpoits
// export const BOOKS_API_ENDPOINT = 'https://vsv-emerald/my-books/api/v1';
export const BOOKS_API_ENDPOINT = 'https://localhost/my-books/api/v1';

// export const AVATAR_BASE_URL = 'https://vsv-emerald/images/avatars';
export const AVATAR_BASE_URL = 'https://localhost/images/avatars';
export const AVATAR_URLS = [...Array(41)].map(
  (_, index) => `${AVATAR_BASE_URL}/avatar${String(index).padStart(2, '0')}.png`
);

export const FETCH_BOOKS_MAX_RESULTS = 20;
export const FETCH_REVIEWS_MAX_RESULTS = 3;

export const FETCH_FAVORITES_MAX_RESULTS = 5;
export const FETCH_MY_REVIEWS_MAX_RESULTS = 5;
export const FETCH_BOOKMARKS_MAX_RESULTS = 5;

------------------------------------------------------------
use-api-favorite.ts

import { FETCH_FAVORITES_MAX_RESULTS } from '@/constants/constants';
import { useApi } from '@/hooks/api/use-api';
import { Favorite, FavoriteInfo, FavoritePage, FavoriteRequest } from '@/types';

export const useApiFavorite = () => {
  const { fetcher, fetcherWithAuth, mutationWithAuth } = useApi();

  const getFavoriteByBookId = async (bookId: string) => {
    try {
      const url = `/favorites/${bookId}`;
      const favorite = await fetcherWithAuth<Favorite>(url);
      return favorite;
    } catch (error) {
      throw new Error('お気に入りの読み込みが失敗しました。' + error);
    }
  };

  const getFavoritePage = async (page: number = 0) => {
    try {
      const basePage = page > 0 ? page - 1 : 0;
      const url = `/favorites?&page=${basePage}&maxResults=${FETCH_FAVORITES_MAX_RESULTS}`;
      const favoritePage = await fetcherWithAuth<FavoritePage>(url);
      return favoritePage;
    } catch (error) {
      throw new Error('お気に入り一覧の読み込みが失敗しました。' + error);
    }
  };

  const getFavoriteInfo = async (bookId: string, userId: number | undefined) => {
    try {
      const query = userId ? `?userId=${userId}` : '';
      const url = `/books/${bookId}/favorites/info${query}`;
      const favoriteInfo = await fetcher<FavoriteInfo>(url);
      return favoriteInfo;
    } catch (error) {
      throw new Error('お気に入り情報の読み込みが失敗しました。' + error);
    }
  };

  const createFavorite = async (reqestBody: FavoriteRequest) => {
    try {
      const url = `/favorites`;
      const options: RequestInit = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(reqestBody),
      };
      await mutationWithAuth(url, options);
    } catch (error) {
      throw new Error('お気に入りの作成に失敗しました。' + error);
    }
  };

  const deleteFavorite = async (bookId: string) => {
    try {
      const url = `/favorites/${bookId}`;
      const options: RequestInit = { method: 'DELETE' };
      await mutationWithAuth(url, options);
    } catch (error) {
      throw new Error('お気に入りの削除に失敗しました。' + error);
    }
  };

  return {
    getFavoriteByBookId,
    getFavoritePage,
    getFavoriteInfo,
    createFavorite,
    deleteFavorite,
  };
};

------------------------------------------------------------
use-api-review.ts

import {
  FETCH_MY_REVIEWS_MAX_RESULTS,
  FETCH_REVIEWS_MAX_RESULTS,
} from '@/constants/constants';
import { useApi } from '@/hooks/api/use-api';
import { ReviewPage, ReviewRequest, ReviewSummary, SelfReviewExists } from '@/types';

export const useApiReview = () => {
  const { fetcher, fetcherWithAuth, mutationWithAuth } = useApi();

  const getReviewPage = async (bookId: string, page: number = 0) => {
    try {
      const basePage = page > 0 ? page - 1 : 0;
      const url = `/books/${bookId}/reviews?&page=${basePage}&maxResults=${FETCH_REVIEWS_MAX_RESULTS}`;
      const reviewPage = await fetcher<ReviewPage>(url);
      return reviewPage;
    } catch (error) {
      throw new Error('レビュー一覧の読み込みが失敗しました。' + error);
    }
  };

  const getReviewSummary = async (bookId: string) => {
    try {
      const url = `/books/${bookId}/reviews/summary`;
      const reviewSummary = await fetcher<ReviewSummary>(url);
      return reviewSummary;
    } catch (error) {
      throw new Error('レビュー情報の読み込みが失敗しました。' + error);
    }
  };

  const checkSelfReviewExists = async (bookId: string) => {
    try {
      const url = `/reviews/self-review-exists/${bookId}`;
      const data = await fetcherWithAuth<SelfReviewExists>(url);
      return data.exists;
    } catch (error) {
      throw new Error('レビューの存在チェックに失敗しました。' + error);
    }
  };

  const getReviewPageByUser = async (page: number = 0) => {
    try {
      const basePage = page > 0 ? page - 1 : 0;
      const url = `/reviews?&page=${basePage}&maxResults=${FETCH_MY_REVIEWS_MAX_RESULTS}`;
      const reviewPage = await fetcherWithAuth<ReviewPage>(url);
      return reviewPage;
    } catch (error) {
      throw new Error('マイレビュー一覧の読み込みが失敗しました。' + error);
    }
  };

  const createReview = async (reqestBody: ReviewRequest) => {
    try {
      const url = `/reviews`;
      const options: RequestInit = {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(reqestBody),
      };
      await mutationWithAuth(url, options);
    } catch (error) {
      throw new Error('レビューの作成に失敗しました。' + error);
    }
  };

  const updateReview = async (id: number, reqestBody: ReviewRequest) => {
    try {
      const url = `/reviews/${id}`;
      const options: RequestInit = {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(reqestBody),
      };
      await mutationWithAuth(url, options);
    } catch (error) {
      throw new Error('レビューの更新に失敗しました。' + error);
    }
  };

  const deleteReview = async (id: number) => {
    try {
      const url = `/reviews/${id}`;
      const options: RequestInit = {
        method: 'DELETE',
      };
      await mutationWithAuth(url, options);
    } catch (error) {
      throw new Error('レビューの削除に失敗しました。' + error);
    }
  };

  return {
    getReviewPage,
    getReviewSummary,
    checkSelfReviewExists,
    getReviewPageByUser,
    createReview,
    updateReview,
    deleteReview,
  };
};

------------------------------------------------------------
use-discover-queries.ts

import { useLocation, useNavigate } from 'react-router-dom';

export const useDiscoverQueries = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const searchParams = new URLSearchParams(location.search);
  const genreIds = searchParams.get('genreIds') || '';
  const condition = searchParams.get('condition') || '';
  const page = Number(searchParams.get('page') || '1');

  const updateQueryParams = (params: {
    genreIds?: string;
    condition?: string;
    page?: number;
  }) => {
    const newParams = new URLSearchParams(location.search);

    if (params.genreIds !== undefined) {
      newParams.set('genreIds', params.genreIds);
    }
    if (params.condition !== undefined) {
      newParams.set('condition', params.condition);
    }
    if (params.page !== undefined) {
      newParams.set('page', params.page.toString());
    }

    navigate(`/discover?${newParams.toString()}`);
  };

  return { genreIds, condition, page, updateQueryParams };
};

------------------------------------------------------------
bookmarks

import Bookmarks from '@/components/bookmarks/bookmarks';
import BookmarksSkeleton from '@/components/bookmarks/bookmarks-skeleton';
import { Separator } from '@/components/ui/separator';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { useSearchParams } from 'react-router-dom';

export default function Page() {
  const [searchParams] = useSearchParams();
  const page = Number(searchParams.get('page') || '1');

  return (
    <>
      <div className="m-4 flex h-10 items-center">
        <p className="font-bold">ブックマーク</p>
      </div>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<BookmarksSkeleton />}>
          <Bookmarks page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
discover

import BooksDiscover from '@/components/books/books-discover';
import BooksSkeleton from '@/components/books/books-skeleton';
import GenresConditionSelector from '@/components/genres/genres-condition-selector';
import GenresDiscover from '@/components/genres/genres-discover';
import GenresSkeleton from '@/components/genres/genres-skeleton';
import { Separator } from '@/components/ui/separator';
import { useDiscoverQueries } from '@/hooks/use-discover-queries';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

export default function Page() {
  const { genreIds, condition, page, updateQueryParams } = useDiscoverQueries();

  const handleConditionChange = (condition: string) => {
    // SINGLE選択以外は複数ジャンル選択可能OKだが
    // SINGLE選択の場合、複数ジャンルの中の最初の値（単一の値）とする
    const ids = condition === 'SINGLE' ? genreIds.split(',')[0] : undefined;
    updateQueryParams({ genreIds: ids, condition, page: 1 });
  };

  const handleGenreIdsChange = (genreIds: string) => {
    updateQueryParams({ genreIds, page: 1 });
  };

  return (
    <>
      <div className="m-4 flex h-10 items-center justify-between">
        <p className="font-bold">ジャンル</p>
        <GenresConditionSelector
          condition={condition}
          onConditionChange={handleConditionChange}
        />
      </div>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<GenresSkeleton />}>
          <GenresDiscover
            genreIds={genreIds}
            condition={condition}
            onGenreIdsChange={handleGenreIdsChange}
          />
        </Suspense>
      </ErrorBoundary>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<BooksSkeleton />}>
          <BooksDiscover genreIds={genreIds} condition={condition} page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
favorites

import Favorites from '@/components/favorites/favorites';
import FavoritesSkeleton from '@/components/favorites/favorites-skeleton';
import { Separator } from '@/components/ui/separator';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { useSearchParams } from 'react-router-dom';

export default function Page() {
  const [searchParams] = useSearchParams();
  const page = Number(searchParams.get('page') || '1');

  return (
    <>
      <div className="m-4 flex h-10 items-center">
        <p className="font-bold">お気に入り</p>
      </div>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<FavoritesSkeleton />}>
          <Favorites page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
my-reviews

import MyReviews from '@/components/my-reviews/my-reviews';
import MyReviewsSkeleton from '@/components/my-reviews/my-reviews-skeleton';
import { Separator } from '@/components/ui/separator';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { useSearchParams } from 'react-router-dom';

export default function Page() {
  const [searchParams] = useSearchParams();
  const page = Number(searchParams.get('page') || '1');

  return (
    <>
      <div className="m-4 flex h-10 items-center">
        <p className="font-bold">マイレビュー</p>
      </div>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<MyReviewsSkeleton />}>
          <MyReviews page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
search

import BooksSearch from '@/components/books/books-search';
import BooksSkeleton from '@/components/books/books-skeleton';
import { Separator } from '@/components/ui/separator';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { useSearchParams } from 'react-router-dom';

export default function Page() {
  const [searchParams] = useSearchParams();
  const searchQuery = searchParams.get('q') || '';
  const page = Number(searchParams.get('page') || '1');

  return (
    <>
      <div className="m-4 flex h-10 items-center">
        <p>
          「 {searchQuery} 」
          <span className="text-sm text-muted-foreground">の検索結果</span>
        </p>
      </div>

      <Separator className="my-4 bg-foreground/10" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<BooksSkeleton />}>
          <BooksSearch searchQuery={searchQuery} page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
page.tsx

import BooksNewReleases from '@/components/books/books-new-releases';
import BooksSkeleton from '@/components/books/books-skeleton';
import GenresSkeleton from '@/components/genres/genres-skeleton';
import GenresTopPage from '@/components/genres/genres-top-page';
import Hero from '@/components/layout/hero';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

export default function Page() {
  return (
    <>
      <Hero />

      <div className="mb-4 flex flex-col gap-y-4">
        <p className="font-bold">ジャンル</p>

        <ErrorBoundary fallback={<ErrorElement />}>
          <Suspense fallback={<GenresSkeleton />}>
            <GenresTopPage />
          </Suspense>
        </ErrorBoundary>
      </div>

      <div className="flex flex-col">
        <p className="font-bold">ニューリリース</p>

        <ErrorBoundary fallback={<ErrorElement />}>
          <Suspense fallback={<BooksSkeleton />}>
            <BooksNewReleases />
          </Suspense>
        </ErrorBoundary>
      </div>
    </>
  );
}

------------------------------------------------------------
route.tsx

import BookDetailPage from '@/routes/book/[bookId]/page';
import BookmarksPage from '@/routes/bookmarks/page';
import DiscoverPage from '@/routes/discover/page';
import FavoritesPage from '@/routes/favorites/page';
import RootLayout from '@/routes/layout';
import LoginPage from '@/routes/login/page';
import MyReviewsPage from '@/routes/my-reviews/page';
import RootPage from '@/routes/page';
import { ProtectedRoute } from '@/routes/protected-route';
import BookReadPage from '@/routes/read/[bookId]/chapter/[chapterNumber]/page/[pageNumber]/page';
import BookReadTableOfContentsPage from '@/routes/read/[bookId]/table-of-contents/page';
import SearchPage from '@/routes/search/page';
import ChangeEmailPage from '@/routes/settings/change-email/page';
import ChangePasswordPage from '@/routes/settings/change-password/page';
import ChangeUserInfoPage from '@/routes/settings/change-user-info/page';
import ProfilePage from '@/routes/settings/profile/page';
import SignupPage from '@/routes/signup/page';
import { createBrowserRouter, createRoutesFromElements, Route } from 'react-router-dom';

export const router = createBrowserRouter(
  createRoutesFromElements(
    <Route>
      <Route path="/" element={<RootLayout />}>
        <Route index element={<RootPage />} />

        <Route path="book/:bookId" element={<BookDetailPage />} />
        <Route path="book/:bookId/reviews" element={<BookDetailPage />} />

        <Route path="read/:bookId">
          <Route path="table-of-contents" element={<BookReadTableOfContentsPage />} />
        </Route>

        <Route path="search">
          <Route index element={<SearchPage />} />
        </Route>

        <Route path="discover">
          <Route index element={<DiscoverPage />} />
        </Route>

        <Route path="login">
          <Route index element={<LoginPage />} />
        </Route>

        <Route path="signup">
          <Route index element={<SignupPage />} />
        </Route>

        {/* 以下、認証が必要な画面 */}
        <Route element={<ProtectedRoute />}>
          <Route path="favorites">
            <Route index element={<FavoritesPage />} />
          </Route>

          <Route path="my-reviews">
            <Route index element={<MyReviewsPage />} />
          </Route>

          <Route path="bookmarks">
            <Route index element={<BookmarksPage />} />
          </Route>

          <Route path="settings">
            <Route path="profile" element={<ProfilePage />} />
            <Route path="change-user-info" element={<ChangeUserInfoPage />} />
            <Route path="change-email" element={<ChangeEmailPage />} />
            <Route path="change-password" element={<ChangePasswordPage />} />
          </Route>

          <Route path="read/:bookId">
            <Route path="chapter/:chapterNumber">
              <Route path="page/:pageNumber" element={<BookReadPage />} />
            </Route>
          </Route>
        </Route>
      </Route>
    </Route>
  )
);

------------------------------------------------------------
bookmark.ts

import { Book } from '@/types/book';
import { UseMutationResult } from '@tanstack/react-query';

export interface Bookmark {
  id: number;
  userId: number;
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  note: string;
  chapterTitle: string;
  updatedAt: string;
  book: Book;
}

export interface BookmarkPage {
  page: number;
  totalPages: number;
  totalItems: number;
  bookmarks: Bookmark[];
}

export interface BookmarkRequest {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  note: string;
}

export type BookmarkCreateMutation = UseMutationResult<
  void,
  Error,
  BookmarkRequest,
  unknown
>;

export type BookmarkUpdateMutation = UseMutationResult<
  void,
  Error,
  {
    id: number;
    requestBody: BookmarkRequest;
  },
  unknown
>;

export type BookmarkDeleteMutation = UseMutationResult<void, Error, number, unknown>;

------------------------------------------------------------
review.ts

import { Book } from '@/types';
import { UseMutationResult } from '@tanstack/react-query';

export interface Review {
  id: number;
  userId: number;
  bookId: string;
  name: string;
  avatarUrl: string;
  comment: string;
  rating: number;
  createdAt: string;
  updatedAt: string;
  book: Book;
}

export interface ReviewPage {
  page: number;
  totalPages: number;
  totalItems: number;
  reviews: Review[];
}

export interface ReviewSummary {
  bookId: string;
  reviewCount: number;
  averageRating: number;
}

export interface ReviewRequest {
  bookId: string;
  comment: string;
  rating: number;
}

export interface SelfReviewExists {
  exists: boolean;
}

export type ReviewCreateMutation = UseMutationResult<void, Error, ReviewRequest, unknown>;

export type ReviewUpdateMutation = UseMutationResult<
  void,
  Error,
  {
    id: number;
    requestBody: ReviewRequest;
  },
  unknown
>;

export type ReviewDeleteMutation = UseMutationResult<void, Error, number, unknown>;

------------------------------------------------------------
package.json

{
  "name": "my-books-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview --host"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.64.2",
    "@types/react-router-dom": "^5.3.3",
    "clsx": "^2.1.1",
    "html-react-parser": "^5.1.16",
    "lucide-react": "^0.445.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-error-boundary": "^5.0.0",
    "react-router-dom": "^6.26.2",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "use-debounce": "^10.0.3"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/eslint-plugin-react-refresh": "^0.4.0",
    "@types/eslint-plugin-tailwindcss": "^3.17.0",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "eslint-plugin-tailwindcss": "^3.17.4",
    "globals": "^15.9.0",
    "postcss": "^8.4.47",
    "prettier": "^3.5.3",
    "prettier-plugin-organize-imports": "^4.0.0",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}

------------------------------------------------------------
※package-look.json

bookmark-button.tsx
book-card.tsx
books-favorites.tsx
genre-list-selector.tsx


