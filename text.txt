７ファイル
------------------------------------------------------------
book-detail.tsx

import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import ReviewCountIcon from '@/components/count-icon/review-count-icon';
import GenreList from '@/components/genres/genre-list';
import Rating from '@/components/rating';
import { buttonVariants } from '@/components/ui/button';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { usePageTitle } from '@/hooks/use-page-title';
import { getBookDetails, getBookFavoriteCounts } from '@/lib/api/books';
import { isBookFavoritedByUser } from '@/lib/api/user';
import { cn, formatDateJP, formatIsbn, formatPrice } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { useQuery, useSuspenseQueries } from '@tanstack/react-query';
import { Link } from 'react-router';

type Props = {
  bookId: string;
};

export default function BookDetail({ bookId }: Props) {
  const { isAuthenticated } = useAuth();

  const [{ data: book }, { data: favoriteCounts }] = useSuspenseQueries({
    queries: [
      {
        queryKey: queryKeys.book.details(bookId),
        queryFn: () => getBookDetails(bookId),
      },
      {
        queryKey: queryKeys.book.favoriteCounts(bookId),
        queryFn: () => getBookFavoriteCounts(bookId),
      },
    ],
  });

  const { data: isFavorite = false } = useQuery({
    queryKey: queryKeys.user.isBookFavoritedByUser(bookId),
    queryFn: () => isBookFavoritedByUser(bookId),
    enabled: isAuthenticated,
  });

  usePageTitle(book.title);

  return (
    <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
      <div className="flex flex-col items-center justify-center lg:w-1/2">
        <Link to={`/read/${bookId}/table-of-contents`} className="size-fit">
          <img
            className="h-[360px] rounded-sm object-cover sm:h-[480px]"
            src={BOOK_IMAGE_BASE_URL + book.imagePath}
            alt={book.title}
          />
        </Link>
        <div className="mt-2 flex flex-col items-center justify-around sm:w-[440px] sm:flex-row">
          <Rating rating={book.averageRating} readOnly />
          <div className="flex justify-center gap-x-2">
            <ReviewCountIcon reviewCount={book.reviewCount} />
            <FavoriteCountIcon
              bookId={bookId}
              isFavorite={isFavorite}
              count={favoriteCounts.favoriteCount}
              showCount={true}
            />
          </div>
        </div>
        <div className="my-4 flex items-center">
          <Link
            className={cn(
              buttonVariants({ variant: 'outline' }),
              'w-44 rounded-full bg-transparent'
            )}
            to={`/read/${bookId}/table-of-contents`}
          >
            目次を見る
          </Link>
        </div>
      </div>

      <div className="p-4 lg:w-1/2">
        <h1 className="text-3xl font-bold sm:text-4xl">{book.title}</h1>

        <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
          <p>著者</p>
          {book.authors.map((author) => (
            <p className="text-lg font-bold sm:text-2xl" key={author}>
              {author}
            </p>
          ))}
        </div>

        <GenreList genres={book.genres} variant="outline" />

        <div className="my-6 md:my-10">{book.description}</div>

        <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
          <div className="text-muted-foreground flex flex-col gap-y-1">
            <div className="flex">
              <p className="min-w-20">ISBN</p>
              <p>{formatIsbn(book.isbn)}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">出版社</p>
              <p>{book.publisher}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">発売日</p>
              <time
                className="tracking-wide"
                dateTime={
                  Date.parse(book.publicationDate) ? book.publicationDate : ''
                }
              >
                {formatDateJP(book.publicationDate)}
              </time>
            </div>
            <div className="flex">
              <p className="min-w-20">ページ数</p>
              <p>{`${book.pageCount}ページ`}</p>
            </div>
            <div className="flex">
              <p className="min-w-20">価格</p>
              <p>{formatPrice(book.price)}</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


------------------------------------------------------------
favorite-count-icon.tsx

import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { createFavorite, deleteFavorite } from '@/lib/api/favorite';
import { cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { HeartIcon } from 'lucide-react';
import { startTransition, useEffect, useOptimistic, useState } from 'react';

const BUTTON_SIZE = { sm: 'size-6', md: 'size-8' };
const ICON_SIZE = { sm: 'size-3', md: 'size-4' };
const TEXT_SIZE = { sm: 'text-xs', md: 'text-sm' };

type FavoriteStatus = {
  isFavorite: boolean;
  count: number;
};

type Props = {
  bookId: string;
  isFavorite: boolean;
  count: number;
  size?: 'sm' | 'md';
  showCount?: boolean;
};

export default function FavoriteCountIcon({
  bookId,
  isFavorite,
  count,
  size = 'md',
  showCount = false,
}: Props) {
  const { isAuthenticated } = useAuth();

  const [favoriteState, setFavoriteState] = useState<FavoriteStatus>({
    isFavorite,
    count,
  });

  const [optimisticState, addOptimistic] = useOptimistic(
    favoriteState,
    (_currentState, newState: FavoriteStatus) => {
      return newState;
    }
  );

  useEffect(() => {
    setFavoriteState({ isFavorite, count });
  }, [count, isFavorite]);

  const handleClick = () => {
    if (!isAuthenticated) return;

    const newFavoriteState = {
      isFavorite: !optimisticState.isFavorite,
      count: optimisticState.count + (optimisticState.isFavorite ? -1 : 1),
    };

    startTransition(async () => {
      // 楽観的更新を行う
      addOptimistic(newFavoriteState);
      // APIリクエストを送信する
      try {
        if (favoriteState.isFavorite) {
          await deleteFavorite(bookId);
        } else {
          await createFavorite({ bookId });
        }
        // APIリクエストが成功した場合のみ真の状態を更新する
        setFavoriteState(newFavoriteState);
      } catch (error) {
        console.log(error);
      }
    });
  };

  return (
    <div className="text-muted-foreground flex items-center">
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            className={cn(
              'text-muted-foreground rounded-full',
              BUTTON_SIZE[size],
              optimisticState.isFavorite && 'text-primary bg-transparent'
            )}
            variant="ghost"
            size="icon"
            aria-label={
              optimisticState.isFavorite
                ? 'お気に入りから削除'
                : 'お気に入りに追加'
            }
            onClick={handleClick}
          >
            <HeartIcon
              className={cn(
                ICON_SIZE[size],
                optimisticState.isFavorite && 'fill-primary'
              )}
            />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          {isAuthenticated
            ? optimisticState.isFavorite
              ? 'お気に入りから削除'
              : 'お気に入りに追加'
            : 'ログインしてこの本を「お気に入り」に加えましょう'}
        </TooltipContent>
      </Tooltip>

      {showCount && (
        <div className={cn('flex min-w-4 justify-center', TEXT_SIZE[size])}>
          {optimisticState.count}
        </div>
      )}
    </div>
  );
}

------------------------------------------------------------
favorite-item.tsx

import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import { Card, CardContent } from '@/components/ui/card';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { formatDateJP, formatTime } from '@/lib/utils';
import { Favorite } from '@/types';
import { Link } from 'react-router';

type Props = {
  favorite: Favorite;
};

export default function FavoriteItem({ favorite }: Props) {
  return (
    <Card className="p-0">
      <CardContent className="p-0">
        <div className="flex gap-x-3 px-3 py-4">
          <div className="flex min-w-20 justify-center sm:min-w-24">
            <Link to={`/book/${favorite.book.id}`} className="size-fit">
              <img
                className="h-24 rounded-sm object-cover sm:h-28"
                src={BOOK_IMAGE_BASE_URL + favorite.book.imagePath}
                alt={favorite.book.title}
              />
            </Link>
          </div>
          <div className="flex w-full flex-col justify-center">
            <div className="mb-2 flex flex-col items-start gap-x-4 sm:flex-row sm:items-center">
              <Link to={`/book/${favorite.book.id}`} className="size-fit">
                <h2 className="hover:text-primary text-base font-semibold sm:text-xl">
                  {favorite.book.title}
                </h2>
              </Link>
              <div className="flex items-center">
                <FavoriteCountIcon
                  bookId={favorite.bookId}
                  isFavorite={true}
                  count={1}
                />
                <time
                  className="text-muted-foreground mr-2 flex gap-x-1 text-xs leading-8 tracking-wide whitespace-nowrap sm:text-sm"
                  dateTime={
                    Date.parse(favorite.createdAt) ? favorite.createdAt : ''
                  }
                >
                  <span>{formatDateJP(favorite.createdAt)}</span>
                  <span>{formatTime(favorite.createdAt)}</span>
                </time>
              </div>
            </div>
            <div className="text-muted-foreground mb-4 flex w-full flex-wrap items-center gap-x-3">
              <p className="text-xs">著者</p>
              {favorite.book.authors.map((author) => (
                <p className="text-sm" key={author}>
                  {author}
                </p>
              ))}
            </div>
            <p className="text-muted-foreground">{favorite.book.description}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
query-keys

export const queryKeys = {
  book: {
    all: ['book'] as const,
    latestBooks: () => [...queryKeys.book.all, 'latestBooks'] as const,
    byTitleKeyword: (q: string, page: number) =>
      [...queryKeys.book.all, 'byTitleKeyword', q, page] as const,
    byGenre: (genreIds: string, condition: string, page: number) =>
      [...queryKeys.book.all, 'byGenre', genreIds, condition, page] as const,
    details: (bookId: string) =>
      [...queryKeys.book.all, 'details', bookId] as const,
    tableOfContents: (bookId: string) =>
      [...queryKeys.book.all, 'tableOfContents', bookId] as const,
    chapterPageContent: (
      bookId: string,
      chapterNumber: number,
      pageNumber: number
    ) =>
      [
        ...queryKeys.book.all,
        'chapterPageContent',
        bookId,
        chapterNumber,
        pageNumber,
      ] as const,
    reviews: (bookId: string, page: number) =>
      [...queryKeys.book.all, 'reviews', bookId, page] as const,
    reviewCounts: (bookId: string) =>
      [...queryKeys.book.all, 'reviewCounts', bookId] as const,
    favoriteCounts: (bookId: string) =>
      [...queryKeys.book.all, 'favoriteCounts', bookId] as const,
  },

  genre: {
    all: ['genre'] as const,
  },

  review: {
    all: ['review'] as const,
  },

  bookmark: {
    all: ['bookmark'] as const,
  },

  favorite: {
    all: ['favorite'] as const,
  },

  user: {
    all: ['user'] as const,
    profile: () => [...queryKeys.user.all, 'profile'] as const,
    profileCounts: () => [...queryKeys.user.all, 'profileCounts'] as const,
    reviews: (page: number) =>
      [...queryKeys.user.all, 'reviews', page] as const,
    favorites: (page: number) =>
      [...queryKeys.user.all, 'favorites', page] as const,
    bookmarks: (page: number) =>
      [...queryKeys.user.all, 'bookmarks', page] as const,
    reviewForBook: (bookId: string) =>
      [...queryKeys.user.all, 'reviewForBook', bookId] as const,
    favoriteForBook: (bookId: string) =>
      [...queryKeys.user.all, 'favoriteForBook', bookId] as const,
    bookmarksForBook: (bookId: string) =>
      [...queryKeys.user.all, 'bookmarksForBook', bookId] as const,
    isBookFavoritedByUser: (bookId: string) =>
      [...queryKeys.user.all, 'isBookFavoritedByUser', bookId] as const,
  },
};

------------------------------------------------------------
fetch-client.ts

import { BOOKS_API_BASE_URL } from '@/constants/constants';
import { AccessToken, ApiResponse } from '@/types';

let accessToken: string | null = null;

export const setAccessToken = (token: string | null) => {
  accessToken = token;
};

export const getAccessToken = () => accessToken;

export const customFetch = async <T>(
  endpoint: string,
  options: RequestInit = {}
): Promise<ApiResponse<T>> => {
  const url = `${BOOKS_API_BASE_URL}${endpoint}`;

  // アクセストークンがある場合はヘッダーに追加
  const headers = {
    ...options.headers,
    ...(accessToken ? { Authorization: `Bearer ${accessToken}` } : {}),
  };

  try {
    let response = await fetch(url, { ...options, headers });

    // 401エラーの場合、リフレッシュトークンでアクセストークンの更新を試みる
    if (response.status === 401) {
      const refreshed = await refreshAccessToken();

      // リフレッシュに成功した場合、元のリクエストを再試行
      if (refreshed) {
        const newHeaders = {
          ...options.headers,
          Authorization: `Bearer ${accessToken}`,
        };
        response = await fetch(url, { ...options, headers: newHeaders });
      } else {
        // リフレッシュトークンも期限切れの場合、認証イベントを発火
        window.dispatchEvent(new CustomEvent('auth:sessionExpired'));
        throw new Error(
          'セッションの有効期限が切れました。再ログインしてください。'
        );
      }
    }

    // レスポンスを解析
    const apiResponse = await parseApiResponse<T>(response);

    // エラーレスポンスの場合は例外をスロー
    if (!response.ok) {
      throw apiResponse;
    }

    return apiResponse;
  } catch (error) {
    console.error('API呼び出し中にエラーが発生しました:', error);
    throw error;
  }
};

const parseApiResponse = async <T>(
  response: Response
): Promise<ApiResponse<T>> => {
  const contentType = response.headers.get('content-type');
  let data: T;

  try {
    if (contentType?.includes('application/json')) {
      data = await response.json();
    } else {
      data = (await response.text()) as unknown as T;
    }
  } catch (e) {
    console.error('レスポンスの解析に失敗しました:', e);
    data = {} as T;
  }

  return {
    data,
    status: response.status,
    statusText: response.statusText,
    ok: response.ok,
  };
};

export const refreshAccessToken = async () => {
  try {
    const response = await fetch(`${BOOKS_API_BASE_URL}/refresh-token`, {
      method: 'POST',
      credentials: 'include',
    });

    // リフレッシュトークンが無効または期限切れの場合
    if (!response.ok) {
      throw new Error(`トークンリフレッシュ失敗: ${response.status}`);
    }

    const data = (await response.json()) as AccessToken;
    accessToken = data.accessToken;
    return true;
  } catch (error) {
    console.error('リフレッシュトークンエラー:', error);
    accessToken = null;
    return false;
  }
};

------------------------------------------------------------
user.ts

import {
  FETCH_BOOKMARKS_MAX_RESULTS,
  FETCH_FAVORITES_MAX_RESULTS,
  FETCH_MY_REVIEWS_MAX_RESULTS,
} from '@/constants/constants';
import { customFetch } from '@/lib/api/fetch-client';
import {
  Bookmark,
  BookmarkPage,
  Favorite,
  FavoritePage,
  Review,
  ReviewPage,
  UpdateUserEmail,
  UpdateUserPassword,
  UpdateUserProfile,
  UserProfile,
  UserProfileCounts,
} from '@/types';

// 自分のプロフィール情報
export const getUserProfile = async () => {
  try {
    const endpoint = `/me/profile`;
    const response = await customFetch<UserProfile>(endpoint);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ユーザープロフィール情報の読み込みが失敗しました。');
  }
};

// 自分のレビュー、お気に入り、ブックマークの数
export const getUserProfileCounts = async () => {
  try {
    const endpoint = `/me/profile-counts`;
    const response = await customFetch<UserProfileCounts>(endpoint);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ユーザーのプロフィール情報の読み込みが失敗しました。');
  }
};

// 自分のレビュー一覧
export const getUserReviews = async (page: number = 0) => {
  try {
    const basePage = page > 0 ? page - 1 : 0;
    const endpoint = `/me/reviews`;
    const query = `?page=${basePage}&maxResults=${FETCH_MY_REVIEWS_MAX_RESULTS}`;
    const response = await customFetch<ReviewPage>(endpoint + query);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ユーザーのレビュー一覧の読み込みが失敗しました。');
  }
};

// 自分のお気に入り一覧
export const getUserFavorites = async (page: number = 0) => {
  try {
    const basePage = page > 0 ? page - 1 : 0;
    const endpoint = `/me/favorites`;
    const query = `?page=${basePage}&maxResults=${FETCH_FAVORITES_MAX_RESULTS}`;
    const response = await customFetch<FavoritePage>(endpoint + query);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ユーザーのお気に入り一覧の読み込みが失敗しました。');
  }
};

// 自分のブックマーク一覧
export const getUserBookmarks = async (page: number = 0) => {
  try {
    const basePage = page > 0 ? page - 1 : 0;
    const endpoint = `/me/bookmarks`;
    const query = `?page=${basePage}&maxResults=${FETCH_BOOKMARKS_MAX_RESULTS}`;
    const response = await customFetch<BookmarkPage>(endpoint + query);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ユーザーのブックマーク一覧の読み込みが失敗しました。');
  }
};

// 自分が投稿した特定の書籍のレビュー
// （書籍１冊に対して、１つのレビューなので「単数形」）
export const getUserReviewForBook = async (bookId: string) => {
  try {
    const endpoint = `/me/books/${bookId}/review`;
    const response = await customFetch<Review>(endpoint);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('レビューの読み込みが失敗しました。');
  }
};

// 自分の追加した特定の書籍のお気に入り
// （書籍１冊に対して、１つのお気に入りなので「単数形」）
export const getUserFavoriteForBook = async (bookId: string) => {
  try {
    const endpoint = `/me/books/${bookId}/favorite`;
    const response = await customFetch<Favorite>(endpoint);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('お気に入りの読み込みが失敗しました。');
  }
};

// 自分の追加した特定の書籍のブックマークリスト
// （書籍１冊に対して、複数のブックマークなので「複数形」）
export const getUserBookmarksForBook = async (bookId: string) => {
  try {
    const endpoint = `/me/books/${bookId}/bookmarks`;
    const response = await customFetch<Bookmark[]>(endpoint);
    return response.data;
  } catch (error) {
    console.error(error);
    throw new Error('ブックマーク一覧の読み込みが失敗しました。');
  }
};

// 自分のプロフィール情報を更新
export const updateUserProfile = async (requestBody: UpdateUserProfile) => {
  try {
    const endpoint = `/me/profile`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('プロフィール情報の更新に失敗しました。');
  }
};

// 自分のメールアドレスを更新
export const updateUserEmail = async (requestBody: UpdateUserEmail) => {
  try {
    const endpoint = `/me/email`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('メールアドレスの更新に失敗しました。');
  }
};

// 自分のパスワードを更新
export const updateUserPassword = async (requestBody: UpdateUserPassword) => {
  try {
    const endpoint = `/me/password`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('パスワードの更新に失敗しました。');
  }
};

// この書籍をユーザーがお気に入り登録しているかどうか
// （データの取得を試みてエラーなら未登録とする）
export const isBookFavoritedByUser = async (bookId: string) => {
  try {
    await getUserFavoriteForBook(bookId);
    return true;
  } catch {
    return false;
  }
};

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
