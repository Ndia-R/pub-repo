７８ファイル
------------------------------------------------------------
theme-styles/claude-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Berkshire Swash';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.98 0.01 95.1);
  --foreground: oklch(0.34 0.03 95.72);
  --card: oklch(0.98 0.01 95.1);
  --card-foreground: oklch(0.19 0 106.59);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.27 0.02 98.94);
  --primary: oklch(0.62 0.14 39.04);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.92 0.01 92.99);
  --secondary-foreground: oklch(0.43 0.02 98.6);
  --muted: oklch(0.93 0.02 90.24);
  --muted-foreground: oklch(0.61 0.01 97.42);
  --accent: oklch(0.92 0.01 92.99);
  --accent-foreground: oklch(0.27 0.02 98.94);
  --destructive: oklch(0.19 0 106.59);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.88 0.01 97.36);
  --input: oklch(0.76 0.02 98.35);
  --ring: oklch(0.59 0.17 253.06);
  --chart-1: oklch(0.56 0.13 43);
  --chart-2: oklch(0.69 0.16 290.41);
  --chart-3: oklch(0.88 0.03 93.13);
  --chart-4: oklch(0.88 0.04 298.18);
  --chart-5: oklch(0.56 0.13 42.06);
  --sidebar: oklch(0.97 0.01 98.88);
  --sidebar-foreground: oklch(0.36 0.01 106.65);
  --sidebar-primary: oklch(0.62 0.14 39.04);
  --sidebar-primary-foreground: oklch(0.99 0 0);
  --sidebar-accent: oklch(0.92 0.01 92.99);
  --sidebar-accent-foreground: oklch(0.33 0 0);
  --sidebar-border: oklch(0.94 0 0);
  --sidebar-ring: oklch(0.77 0 0);
  --font-sans: Noto Serif JP, serif;
  --font-serif: Noto Serif JP, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.27 0 106.64);
  --foreground: oklch(0.81 0.01 93.01);
  --card: oklch(0.27 0 106.64);
  --card-foreground: oklch(0.98 0.01 95.1);
  --popover: oklch(0.31 0 106.6);
  --popover-foreground: oklch(0.92 0 106.48);
  --primary: oklch(0.67 0.13 38.76);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.98 0.01 95.1);
  --secondary-foreground: oklch(0.31 0 106.6);
  --muted: oklch(0.22 0 106.71);
  --muted-foreground: oklch(0.77 0.02 99.07);
  --accent: oklch(0.21 0.01 95.42);
  --accent-foreground: oklch(0.97 0.01 98.88);
  --destructive: oklch(0.64 0.21 25.33);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.36 0.01 106.89);
  --input: oklch(0.43 0.01 100.22);
  --ring: oklch(0.59 0.17 253.06);
  --chart-1: oklch(0.56 0.13 43);
  --chart-2: oklch(0.69 0.16 290.41);
  --chart-3: oklch(0.21 0.01 95.42);
  --chart-4: oklch(0.31 0.05 289.32);
  --chart-5: oklch(0.56 0.13 42.06);
  --sidebar: oklch(0.24 0 67.71);
  --sidebar-foreground: oklch(0.81 0.01 93.01);
  --sidebar-primary: oklch(0.33 0 0);
  --sidebar-primary-foreground: oklch(0.99 0 0);
  --sidebar-accent: oklch(0.17 0 106.62);
  --sidebar-accent-foreground: oklch(0.81 0.01 93.01);
  --sidebar-border: oklch(0.94 0 0);
  --sidebar-ring: oklch(0.77 0 0);
  --font-sans: Noto Serif JP, serif;
  --font-serif: Noto Serif JP, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
default-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.97 0.01 80.72);
  --foreground: oklch(0.3 0.04 30.2);
  --card: oklch(0.97 0.01 80.72);
  --card-foreground: oklch(0.3 0.04 30.2);
  --popover: oklch(0.97 0.01 80.72);
  --popover-foreground: oklch(0.3 0.04 30.2);
  --primary: oklch(0.52 0.13 144.17);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.96 0.02 147.64);
  --secondary-foreground: oklch(0.43 0.12 144.31);
  --muted: oklch(0.94 0.01 74.42);
  --muted-foreground: oklch(0.45 0.05 39.21);
  --accent: oklch(0.9 0.05 146.04);
  --accent-foreground: oklch(0.43 0.12 144.31);
  --destructive: oklch(0.54 0.19 26.72);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.88 0.02 74.64);
  --input: oklch(0.88 0.02 74.64);
  --ring: oklch(0.52 0.13 144.17);
  --chart-1: oklch(0.67 0.16 144.21);
  --chart-2: oklch(0.58 0.14 144.18);
  --chart-3: oklch(0.52 0.13 144.17);
  --chart-4: oklch(0.43 0.12 144.31);
  --chart-5: oklch(0.22 0.05 145.73);
  --sidebar: oklch(0.94 0.01 74.42);
  --sidebar-foreground: oklch(0.3 0.04 30.2);
  --sidebar-primary: oklch(0.52 0.13 144.17);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.9 0.05 146.04);
  --sidebar-accent-foreground: oklch(0.43 0.12 144.31);
  --sidebar-border: oklch(0.88 0.02 74.64);
  --sidebar-ring: oklch(0.52 0.13 144.17);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Noto Serif JP, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.3 0.02 232.02);
  --foreground: oklch(0.94 0.01 72.66);
  --card: oklch(0.28 0.02 229.7);
  --card-foreground: oklch(0.94 0.01 72.66);
  --popover: oklch(0.27 0.02 229.77);
  --popover-foreground: oklch(0.94 0.01 72.66);
  --primary: oklch(0.75 0.17 144.65);
  --primary-foreground: oklch(0.22 0.05 145.73);
  --secondary: oklch(0.4 0.07 145.17);
  --secondary-foreground: oklch(0.9 0.04 146.44);
  --muted: oklch(0.34 0.01 226.41);
  --muted-foreground: oklch(0.78 0.01 231.27);
  --accent: oklch(0.45 0.03 231.13);
  --accent-foreground: oklch(0.94 0.01 72.66);
  --destructive: oklch(0.64 0.22 28.58);
  --destructive-foreground: oklch(0.94 0.01 72.66);
  --border: oklch(0.35 0.01 225.37);
  --input: oklch(0.38 0.01 229.22);
  --ring: oklch(0.75 0.17 144.65);
  --chart-1: oklch(0.77 0.12 145.3);
  --chart-2: oklch(0.72 0.14 144.89);
  --chart-3: oklch(0.67 0.16 144.21);
  --chart-4: oklch(0.63 0.15 144.2);
  --chart-5: oklch(0.58 0.14 144.18);
  --sidebar: oklch(0.27 0.03 150.77);
  --sidebar-foreground: oklch(0.94 0.01 72.66);
  --sidebar-primary: oklch(0.67 0.16 144.21);
  --sidebar-primary-foreground: oklch(0.22 0.05 145.73);
  --sidebar-accent: oklch(0.58 0.14 144.18);
  --sidebar-accent-foreground: oklch(0.94 0.01 72.66);
  --sidebar-border: oklch(0.39 0.03 142.99);
  --sidebar-ring: oklch(0.67 0.16 144.21);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Zen Old Mincho, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
notebook-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Architects Daughter';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.98 0 0);
  --foreground: oklch(0.35 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.35 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.35 0 0);
  --primary: oklch(0.49 0 0);
  --primary-foreground: oklch(0.96 0 0);
  --secondary: oklch(0.9 0 0);
  --secondary-foreground: oklch(0.35 0 0);
  --muted: oklch(0.92 0 0);
  --muted-foreground: oklch(0.43 0 0);
  --accent: oklch(0.94 0.05 94.85);
  --accent-foreground: oklch(0.4 0.04 37.96);
  --destructive: oklch(0.66 0.1 20);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.55 0 17.23);
  --input: oklch(1 0 0);
  --ring: oklch(0.71 0 0);
  --chart-1: oklch(0.32 0 0);
  --chart-2: oklch(0.45 0 0);
  --chart-3: oklch(0.57 0 0);
  --chart-4: oklch(0.68 0 0);
  --chart-5: oklch(0.79 0 0);
  --sidebar: oklch(0.96 0 0);
  --sidebar-foreground: oklch(0.35 0 0);
  --sidebar-primary: oklch(0.49 0 0);
  --sidebar-primary-foreground: oklch(0.96 0 0);
  --sidebar-accent: oklch(0.94 0.05 94.85);
  --sidebar-accent-foreground: oklch(0.4 0.04 37.96);
  --sidebar-border: oklch(0.81 0 0);
  --sidebar-ring: oklch(0.71 0 0);
  --font-sans: Architects Daughter, Yusei Magic, sans-serif;
  --font-serif: 'Times New Roman', Times, serif;
  --font-mono: 'Courier New', Courier, monospace;
  --radius: 0.625rem;
  --shadow-2xs: 1px 4px 5px 0px hsl(0 0% 0% / 0.01);
  --shadow-xs: 1px 4px 5px 0px hsl(0 0% 0% / 0.01);
  --shadow-sm:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 1px 2px -1px hsl(0 0% 0% / 0.03);
  --shadow:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 1px 2px -1px hsl(0 0% 0% / 0.03);
  --shadow-md:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 2px 4px -1px hsl(0 0% 0% / 0.03);
  --shadow-lg:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 4px 6px -1px hsl(0 0% 0% / 0.03);
  --shadow-xl:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 8px 10px -1px hsl(0 0% 0% / 0.03);
  --shadow-2xl: 1px 4px 5px 0px hsl(0 0% 0% / 0.07);
  --tracking-normal: 0.5px;
}

.dark {
  --background: oklch(0.29 0 0);
  --foreground: oklch(0.89 0 0);
  --card: oklch(0.32 0 0);
  --card-foreground: oklch(0.89 0 0);
  --popover: oklch(0.32 0 0);
  --popover-foreground: oklch(0.89 0 0);
  --primary: oklch(0.76 0 0);
  --primary-foreground: oklch(0.29 0 0);
  --secondary: oklch(0.47 0 0);
  --secondary-foreground: oklch(0.81 0 0);
  --muted: oklch(0.39 0 0);
  --muted-foreground: oklch(0.71 0 0);
  --accent: oklch(0.91 0 0);
  --accent-foreground: oklch(0.32 0 0);
  --destructive: oklch(0.79 0.05 18.24);
  --destructive-foreground: oklch(0.29 0 0);
  --border: oklch(0.43 0 0);
  --input: oklch(0.32 0 0);
  --ring: oklch(0.81 0 0);
  --chart-1: oklch(0.95 0 0);
  --chart-2: oklch(0.86 0 0);
  --chart-3: oklch(0.76 0 0);
  --chart-4: oklch(0.65 0 0);
  --chart-5: oklch(0.55 0 0);
  --sidebar: oklch(0.25 0 0);
  --sidebar-foreground: oklch(0.89 0 0);
  --sidebar-primary: oklch(0.76 0 0);
  --sidebar-primary-foreground: oklch(0.25 0 0);
  --sidebar-accent: oklch(0.91 0 0);
  --sidebar-accent-foreground: oklch(0.32 0 0);
  --sidebar-border: oklch(0.43 0 0);
  --sidebar-ring: oklch(0.81 0 0);
  --font-sans: Architects Daughter, Yusei Magic, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: 'Fira Code', 'Courier New', monospace;
  --radius: 0.625rem;
  --shadow-2xs: 1px 4px 5px 0px hsl(0 0% 0% / 0.01);
  --shadow-xs: 1px 4px 5px 0px hsl(0 0% 0% / 0.01);
  --shadow-sm:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 1px 2px -1px hsl(0 0% 0% / 0.03);
  --shadow:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 1px 2px -1px hsl(0 0% 0% / 0.03);
  --shadow-md:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 2px 4px -1px hsl(0 0% 0% / 0.03);
  --shadow-lg:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 4px 6px -1px hsl(0 0% 0% / 0.03);
  --shadow-xl:
    1px 4px 5px 0px hsl(0 0% 0% / 0.03), 1px 8px 10px -1px hsl(0 0% 0% / 0.03);
  --shadow-2xl: 1px 4px 5px 0px hsl(0 0% 0% / 0.07);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);

  --tracking-tighter: calc(var(--tracking-normal) - 0.05em);
  --tracking-tight: calc(var(--tracking-normal) - 0.025em);
  --tracking-normal: var(--tracking-normal);
  --tracking-wide: calc(var(--tracking-normal) + 0.025em);
  --tracking-wider: calc(var(--tracking-normal) + 0.05em);
  --tracking-widest: calc(var(--tracking-normal) + 0.1em);
}

body {
  letter-spacing: var(--tracking-normal);
}

------------------------------------------------------------
perpetuity-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'DotGothic16';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.95 0.01 197.01);
  --foreground: oklch(0.38 0.06 212.66);
  --card: oklch(0.97 0.01 197.07);
  --card-foreground: oklch(0.38 0.06 212.66);
  --popover: oklch(0.97 0.01 197.07);
  --popover-foreground: oklch(0.38 0.06 212.66);
  --primary: oklch(0.56 0.09 203.28);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.92 0.02 196.84);
  --secondary-foreground: oklch(0.38 0.06 212.66);
  --muted: oklch(0.93 0.01 196.97);
  --muted-foreground: oklch(0.54 0.06 201.57);
  --accent: oklch(0.9 0.03 201.89);
  --accent-foreground: oklch(0.38 0.06 212.66);
  --destructive: oklch(0.57 0.19 25.54);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.89 0.02 204.41);
  --input: oklch(0.92 0.02 196.84);
  --ring: oklch(0.56 0.09 203.28);
  --chart-1: oklch(0.56 0.09 203.28);
  --chart-2: oklch(0.64 0.1 201.59);
  --chart-3: oklch(0.71 0.11 201.25);
  --chart-4: oklch(0.77 0.1 201.18);
  --chart-5: oklch(0.83 0.08 200.97);
  --sidebar: oklch(0.93 0.02 205.32);
  --sidebar-foreground: oklch(0.38 0.06 212.66);
  --sidebar-primary: oklch(0.56 0.09 203.28);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.9 0.03 201.89);
  --sidebar-accent-foreground: oklch(0.38 0.06 212.66);
  --sidebar-border: oklch(0.89 0.02 204.41);
  --sidebar-ring: oklch(0.56 0.09 203.28);
  --font-sans: DotGothic16, Courier New, monospace;
  --font-serif: Courier New, monospace;
  --font-mono: Courier New, monospace;
  --radius: 0.125rem;
  --shadow-2xs: 1px 1px 2px 0px hsl(185 70% 30% / 0.07);
  --shadow-xs: 1px 1px 2px 0px hsl(185 70% 30% / 0.07);
  --shadow-sm:
    1px 1px 2px 0px hsl(185 70% 30% / 0.15),
    1px 1px 2px -1px hsl(185 70% 30% / 0.15);
  --shadow:
    1px 1px 2px 0px hsl(185 70% 30% / 0.15),
    1px 1px 2px -1px hsl(185 70% 30% / 0.15);
  --shadow-md:
    1px 1px 2px 0px hsl(185 70% 30% / 0.15),
    1px 2px 4px -1px hsl(185 70% 30% / 0.15);
  --shadow-lg:
    1px 1px 2px 0px hsl(185 70% 30% / 0.15),
    1px 4px 6px -1px hsl(185 70% 30% / 0.15);
  --shadow-xl:
    1px 1px 2px 0px hsl(185 70% 30% / 0.15),
    1px 8px 10px -1px hsl(185 70% 30% / 0.15);
  --shadow-2xl: 1px 1px 2px 0px hsl(185 70% 30% / 0.38);
  --tracking-normal: 0.125em;
}

.dark {
  --background: oklch(0.21 0.02 224.45);
  --foreground: oklch(0.85 0.13 195.04);
  --card: oklch(0.23 0.03 216.07);
  --card-foreground: oklch(0.85 0.13 195.04);
  --popover: oklch(0.23 0.03 216.07);
  --popover-foreground: oklch(0.85 0.13 195.04);
  --primary: oklch(0.85 0.13 195.04);
  --primary-foreground: oklch(0.21 0.02 224.45);
  --secondary: oklch(0.38 0.06 216.5);
  --secondary-foreground: oklch(0.85 0.13 195.04);
  --muted: oklch(0.29 0.04 218.82);
  --muted-foreground: oklch(0.66 0.1 195.05);
  --accent: oklch(0.38 0.06 216.5);
  --accent-foreground: oklch(0.85 0.13 195.04);
  --destructive: oklch(0.62 0.21 25.81);
  --destructive-foreground: oklch(0.96 0 0);
  --border: oklch(0.38 0.06 216.5);
  --input: oklch(0.38 0.06 216.5);
  --ring: oklch(0.85 0.13 195.04);
  --chart-1: oklch(0.85 0.13 195.04);
  --chart-2: oklch(0.66 0.1 195.05);
  --chart-3: oklch(0.58 0.08 195.07);
  --chart-4: oklch(0.43 0.06 202.62);
  --chart-5: oklch(0.31 0.05 204.16);
  --sidebar: oklch(0.21 0.02 224.45);
  --sidebar-foreground: oklch(0.85 0.13 195.04);
  --sidebar-primary: oklch(0.85 0.13 195.04);
  --sidebar-primary-foreground: oklch(0.21 0.02 224.45);
  --sidebar-accent: oklch(0.38 0.06 216.5);
  --sidebar-accent-foreground: oklch(0.85 0.13 195.04);
  --sidebar-border: oklch(0.38 0.06 216.5);
  --sidebar-ring: oklch(0.85 0.13 195.04);
  --font-sans: DotGothic16, Source Code Pro, monospace;
  --font-serif: Source Code Pro, monospace;
  --font-mono: Source Code Pro, monospace;
  --radius: 0.125rem;
  --shadow-2xs: 1px 1px 2px 0px hsl(180 70% 60% / 0.1);
  --shadow-xs: 1px 1px 2px 0px hsl(180 70% 60% / 0.1);
  --shadow-sm:
    1px 1px 2px 0px hsl(180 70% 60% / 0.2),
    1px 1px 2px -1px hsl(180 70% 60% / 0.2);
  --shadow:
    1px 1px 2px 0px hsl(180 70% 60% / 0.2),
    1px 1px 2px -1px hsl(180 70% 60% / 0.2);
  --shadow-md:
    1px 1px 2px 0px hsl(180 70% 60% / 0.2),
    1px 2px 4px -1px hsl(180 70% 60% / 0.2);
  --shadow-lg:
    1px 1px 2px 0px hsl(180 70% 60% / 0.2),
    1px 4px 6px -1px hsl(180 70% 60% / 0.2);
  --shadow-xl:
    1px 1px 2px 0px hsl(180 70% 60% / 0.2),
    1px 8px 10px -1px hsl(180 70% 60% / 0.2);
  --shadow-2xl: 1px 1px 2px 0px hsl(180 70% 60% / 0.5);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);

  --tracking-tighter: calc(var(--tracking-normal) - 0.05em);
  --tracking-tight: calc(var(--tracking-normal) - 0.025em);
  --tracking-normal: var(--tracking-normal);
  --tracking-wide: calc(var(--tracking-normal) + 0.025em);
  --tracking-wider: calc(var(--tracking-normal) + 0.05em);
  --tracking-widest: calc(var(--tracking-normal) + 0.1em);
}

body {
  letter-spacing: var(--tracking-normal);
}

------------------------------------------------------------
supabase-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.99 0 0);
  --foreground: oklch(0.2 0 0);
  --card: oklch(0.99 0 0);
  --card-foreground: oklch(0.2 0 0);
  --popover: oklch(0.99 0 0);
  --popover-foreground: oklch(0.44 0 0);
  --primary: oklch(0.83 0.13 160.91);
  --primary-foreground: oklch(0.26 0.01 166.46);
  --secondary: oklch(0.99 0 0);
  --secondary-foreground: oklch(0.2 0 0);
  --muted: oklch(0.95 0 0);
  --muted-foreground: oklch(0.24 0 0);
  --accent: oklch(0.95 0 0);
  --accent-foreground: oklch(0.24 0 0);
  --destructive: oklch(0.55 0.19 32.73);
  --destructive-foreground: oklch(0.99 0 17.21);
  --border: oklch(0.9 0 0);
  --input: oklch(0.97 0 0);
  --ring: oklch(0.83 0.13 160.91);
  --chart-1: oklch(0.83 0.13 160.91);
  --chart-2: oklch(0.62 0.19 259.81);
  --chart-3: oklch(0.61 0.22 292.72);
  --chart-4: oklch(0.77 0.16 70.08);
  --chart-5: oklch(0.7 0.15 162.48);
  --sidebar: oklch(0.99 0 0);
  --sidebar-foreground: oklch(0.55 0 0);
  --sidebar-primary: oklch(0.83 0.13 160.91);
  --sidebar-primary-foreground: oklch(0.26 0.01 166.46);
  --sidebar-accent: oklch(0.95 0 0);
  --sidebar-accent-foreground: oklch(0.24 0 0);
  --sidebar-border: oklch(0.9 0 0);
  --sidebar-ring: oklch(0.83 0.13 160.91);
  --font-sans: Outfit, Noto Sans JP, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.09);
  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.09);
  --shadow-sm:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17);
  --shadow:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17);
  --shadow-md:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17);
  --shadow-lg:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17);
  --shadow-xl:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17);
  --shadow-2xl: 0px 1px 3px 0px hsl(0 0% 0% / 0.43);
  --tracking-normal: 0.025em;
}

.dark {
  --background: oklch(0.18 0 0);
  --foreground: oklch(0.93 0.01 255.51);
  --card: oklch(0.2 0 0);
  --card-foreground: oklch(0.93 0.01 255.51);
  --popover: oklch(0.26 0 0);
  --popover-foreground: oklch(0.73 0 0);
  --primary: oklch(0.44 0.1 156.76);
  --primary-foreground: oklch(0.92 0.01 167.16);
  --secondary: oklch(0.26 0 0);
  --secondary-foreground: oklch(0.99 0 0);
  --muted: oklch(0.24 0 0);
  --muted-foreground: oklch(0.71 0 0);
  --accent: oklch(0.31 0 0);
  --accent-foreground: oklch(0.99 0 0);
  --destructive: oklch(0.31 0.09 29.79);
  --destructive-foreground: oklch(0.94 0 34.31);
  --border: oklch(0.28 0 0);
  --input: oklch(0.26 0 0);
  --ring: oklch(0.8 0.18 151.71);
  --chart-1: oklch(0.8 0.18 151.71);
  --chart-2: oklch(0.71 0.14 254.62);
  --chart-3: oklch(0.71 0.16 293.54);
  --chart-4: oklch(0.84 0.16 84.43);
  --chart-5: oklch(0.78 0.13 181.91);
  --sidebar: oklch(0.18 0 0);
  --sidebar-foreground: oklch(0.63 0 0);
  --sidebar-primary: oklch(0.44 0.1 156.76);
  --sidebar-primary-foreground: oklch(0.92 0.01 167.16);
  --sidebar-accent: oklch(0.31 0 0);
  --sidebar-accent-foreground: oklch(0.99 0 0);
  --sidebar-border: oklch(0.28 0 0);
  --sidebar-ring: oklch(0.8 0.18 151.71);
  --font-sans: Outfit, Noto Sans JP, sans-serif;
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono: monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.09);
  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.09);
  --shadow-sm:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17);
  --shadow:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 1px 2px -1px hsl(0 0% 0% / 0.17);
  --shadow-md:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 2px 4px -1px hsl(0 0% 0% / 0.17);
  --shadow-lg:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 4px 6px -1px hsl(0 0% 0% / 0.17);
  --shadow-xl:
    0px 1px 3px 0px hsl(0 0% 0% / 0.17), 0px 8px 10px -1px hsl(0 0% 0% / 0.17);
  --shadow-2xl: 0px 1px 3px 0px hsl(0 0% 0% / 0.43);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);

  --tracking-tighter: calc(var(--tracking-normal) - 0.05em);
  --tracking-tight: calc(var(--tracking-normal) - 0.025em);
  --tracking-normal: var(--tracking-normal);
  --tracking-wide: calc(var(--tracking-normal) + 0.025em);
  --tracking-wider: calc(var(--tracking-normal) + 0.05em);
  --tracking-widest: calc(var(--tracking-normal) + 0.1em);
}

body {
  letter-spacing: var(--tracking-normal);
}

------------------------------------------------------------
t3-chat-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.98 0.01 325.64);
  --foreground: oklch(0.33 0.12 325.04);
  --card: oklch(0.98 0.01 325.64);
  --card-foreground: oklch(0.33 0.12 325.04);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.33 0.12 325.04);
  --primary: oklch(0.53 0.14 355.2);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.87 0.07 334.9);
  --secondary-foreground: oklch(0.44 0.13 324.8);
  --muted: oklch(0.94 0.03 331.55);
  --muted-foreground: oklch(0.49 0.12 324.45);
  --accent: oklch(0.87 0.07 334.9);
  --accent-foreground: oklch(0.44 0.13 324.8);
  --destructive: oklch(0.52 0.14 20.83);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.86 0.08 328.91);
  --input: oklch(0.85 0.06 336.6);
  --ring: oklch(0.59 0.22 0.58);
  --chart-1: oklch(0.6 0.24 344.47);
  --chart-2: oklch(0.44 0.23 300.62);
  --chart-3: oklch(0.38 0.04 226.15);
  --chart-4: oklch(0.83 0.12 88.35);
  --chart-5: oklch(0.78 0.13 59);
  --sidebar: oklch(0.94 0.03 320.58);
  --sidebar-foreground: oklch(0.49 0.19 354.54);
  --sidebar-primary: oklch(0.4 0.03 285.2);
  --sidebar-primary-foreground: oklch(0.97 0.01 337.52);
  --sidebar-accent: oklch(0.98 0 106.42);
  --sidebar-accent-foreground: oklch(0.4 0.03 285.2);
  --sidebar-border: oklch(0.94 0 48.72);
  --sidebar-ring: oklch(0.59 0.22 0.58);
  --font-sans:
    Inter, Noto Sans JP, ui-sans-serif, system-ui, -apple-system,
    BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
    'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
    'Segoe UI Symbol', 'Noto Color Emoji';
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.24 0.02 307.53);
  --foreground: oklch(0.84 0.04 309.54);
  --card: oklch(0.28 0.02 307.54);
  --card-foreground: oklch(0.85 0.03 341.46);
  --popover: oklch(0.15 0.01 338.9);
  --popover-foreground: oklch(0.96 0.01 341.8);
  --primary: oklch(0.46 0.19 4.1);
  --primary-foreground: oklch(0.86 0.06 346.37);
  --secondary: oklch(0.31 0.03 310.06);
  --secondary-foreground: oklch(0.85 0.04 307.96);
  --muted: oklch(0.26 0.02 309.47);
  --muted-foreground: oklch(0.79 0.04 307.1);
  --accent: oklch(0.36 0.05 308.49);
  --accent-foreground: oklch(0.96 0.01 341.8);
  --destructive: oklch(0.23 0.05 12.61);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.33 0.02 343.45);
  --input: oklch(0.34 0.02 332.83);
  --ring: oklch(0.59 0.22 0.58);
  --chart-1: oklch(0.53 0.14 355.2);
  --chart-2: oklch(0.56 0.19 306.86);
  --chart-3: oklch(0.72 0.15 60.58);
  --chart-4: oklch(0.62 0.2 312.74);
  --chart-5: oklch(0.61 0.21 6.14);
  --sidebar: oklch(0.19 0.02 331.05);
  --sidebar-foreground: oklch(0.86 0.03 343.66);
  --sidebar-primary: oklch(0.49 0.22 264.38);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.23 0.03 338.2);
  --sidebar-accent-foreground: oklch(0.97 0 286.38);
  --sidebar-border: oklch(0 0 0);
  --sidebar-ring: oklch(0.59 0.22 0.58);
  --font-sans:
    Inter, Noto Sans JP, ui-sans-serif, system-ui, -apple-system,
    BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,
    'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
    'Segoe UI Symbol', 'Noto Color Emoji';
  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
twitter-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.19 0.01 248.51);
  --card: oklch(0.98 0 197.14);
  --card-foreground: oklch(0.19 0.01 248.51);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.19 0.01 248.51);
  --primary: oklch(0.67 0.16 245);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.19 0.01 248.51);
  --secondary-foreground: oklch(1 0 0);
  --muted: oklch(0.92 0 286.37);
  --muted-foreground: oklch(0.19 0.01 248.51);
  --accent: oklch(0.94 0.02 250.85);
  --accent-foreground: oklch(0.67 0.16 245);
  --destructive: oklch(0.62 0.24 25.77);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.93 0.01 231.66);
  --input: oklch(0.98 0 228.78);
  --ring: oklch(0.68 0.16 243.35);
  --chart-1: oklch(0.67 0.16 245);
  --chart-2: oklch(0.69 0.16 160.35);
  --chart-3: oklch(0.82 0.16 82.53);
  --chart-4: oklch(0.71 0.18 151.71);
  --chart-5: oklch(0.59 0.22 10.58);
  --sidebar: oklch(0.98 0 197.14);
  --sidebar-foreground: oklch(0.19 0.01 248.51);
  --sidebar-primary: oklch(0.67 0.16 245);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.94 0.02 250.85);
  --sidebar-accent-foreground: oklch(0.67 0.16 245);
  --sidebar-border: oklch(0.93 0.01 238.52);
  --sidebar-ring: oklch(0.68 0.16 243.35);
  --font-sans: Open Sans, Noto Sans JP, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Menlo, monospace;
  --radius: 1.3rem;
  --shadow-2xs: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
  --shadow-xs: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
  --shadow-sm:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-md:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-lg:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-xl:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-2xl: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
}

.dark {
  --background: oklch(0 0 0);
  --foreground: oklch(0.93 0 228.79);
  --card: oklch(0.21 0.01 274.53);
  --card-foreground: oklch(0.89 0 0);
  --popover: oklch(0 0 0);
  --popover-foreground: oklch(0.93 0 228.79);
  --primary: oklch(0.67 0.16 245.01);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.96 0 219.53);
  --secondary-foreground: oklch(0.19 0.01 248.51);
  --muted: oklch(0.21 0 0);
  --muted-foreground: oklch(0.56 0.01 247.97);
  --accent: oklch(0.19 0.03 242.55);
  --accent-foreground: oklch(0.67 0.16 245.01);
  --destructive: oklch(0.62 0.24 25.77);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.27 0 248);
  --input: oklch(0.3 0.03 244.82);
  --ring: oklch(0.68 0.16 243.35);
  --chart-1: oklch(0.67 0.16 245);
  --chart-2: oklch(0.69 0.16 160.35);
  --chart-3: oklch(0.82 0.16 82.53);
  --chart-4: oklch(0.71 0.18 151.71);
  --chart-5: oklch(0.59 0.22 10.58);
  --sidebar: oklch(0.21 0.01 274.53);
  --sidebar-foreground: oklch(0.89 0 0);
  --sidebar-primary: oklch(0.68 0.16 243.35);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.19 0.03 242.55);
  --sidebar-accent-foreground: oklch(0.67 0.16 245.01);
  --sidebar-border: oklch(0.38 0.02 240.59);
  --sidebar-ring: oklch(0.68 0.16 243.35);
  --font-sans: Open Sans, Noto Sans JP, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Menlo, monospace;
  --radius: 1.3rem;
  --shadow-2xs: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
  --shadow-xs: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
  --shadow-sm:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 1px 2px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-md:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 2px 4px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-lg:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 4px 6px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-xl:
    0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0),
    0px 8px 10px -1px hsl(202.82 89.12% 53.14% / 0);
  --shadow-2xl: 0px 2px 0px 0px hsl(202.82 89.12% 53.14% / 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
vercel-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.99 0 0);
  --foreground: oklch(0 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0 0 0);
  --popover: oklch(0.99 0 0);
  --popover-foreground: oklch(0 0 0);
  --primary: oklch(0 0 0);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.94 0 0);
  --secondary-foreground: oklch(0 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.44 0 0);
  --accent: oklch(0.94 0 0);
  --accent-foreground: oklch(0 0 0);
  --destructive: oklch(0.63 0.19 23.03);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.92 0 0);
  --input: oklch(0.94 0 0);
  --ring: oklch(0 0 0);
  --chart-1: oklch(0.81 0.17 75.35);
  --chart-2: oklch(0.55 0.22 264.53);
  --chart-3: oklch(0.72 0 0);
  --chart-4: oklch(0.92 0 0);
  --chart-5: oklch(0.56 0 0);
  --sidebar: oklch(0.99 0 0);
  --sidebar-foreground: oklch(0 0 0);
  --sidebar-primary: oklch(0 0 0);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.94 0 0);
  --sidebar-accent-foreground: oklch(0 0 0);
  --sidebar-border: oklch(0.94 0 0);
  --sidebar-ring: oklch(0 0 0);
  --font-sans: Geist, Noto Sans JP, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.09);
  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.09);
  --shadow-sm:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);
  --shadow:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);
  --shadow-md:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18);
  --shadow-lg:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18);
  --shadow-xl:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18);
  --shadow-2xl: 0px 1px 2px 0px hsl(0 0% 0% / 0.45);
}

.dark {
  --background: oklch(0 0 0);
  --foreground: oklch(1 0 0);
  --card: oklch(0.14 0 0);
  --card-foreground: oklch(1 0 0);
  --popover: oklch(0.18 0 0);
  --popover-foreground: oklch(1 0 0);
  --primary: oklch(1 0 0);
  --primary-foreground: oklch(0 0 0);
  --secondary: oklch(0.25 0 0);
  --secondary-foreground: oklch(1 0 0);
  --muted: oklch(0.23 0 0);
  --muted-foreground: oklch(0.72 0 0);
  --accent: oklch(0.32 0 0);
  --accent-foreground: oklch(1 0 0);
  --destructive: oklch(0.69 0.2 23.91);
  --destructive-foreground: oklch(0 0 0);
  --border: oklch(0.26 0 0);
  --input: oklch(0.32 0 0);
  --ring: oklch(0.72 0 0);
  --chart-1: oklch(0.81 0.17 75.35);
  --chart-2: oklch(0.58 0.21 260.84);
  --chart-3: oklch(0.56 0 0);
  --chart-4: oklch(0.44 0 0);
  --chart-5: oklch(0.92 0 0);
  --sidebar: oklch(0.18 0 0);
  --sidebar-foreground: oklch(1 0 0);
  --sidebar-primary: oklch(1 0 0);
  --sidebar-primary-foreground: oklch(0 0 0);
  --sidebar-accent: oklch(0.32 0 0);
  --sidebar-accent-foreground: oklch(1 0 0);
  --sidebar-border: oklch(0.32 0 0);
  --sidebar-ring: oklch(0.72 0 0);
  --font-sans: Geist, Noto Sans JP, sans-serif;
  --font-serif: Georgia, serif;
  --font-mono: Geist Mono, monospace;
  --radius: 0.5rem;
  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.09);
  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.09);
  --shadow-sm:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);
  --shadow:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);
  --shadow-md:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 2px 4px -1px hsl(0 0% 0% / 0.18);
  --shadow-lg:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 4px 6px -1px hsl(0 0% 0% / 0.18);
  --shadow-xl:
    0px 1px 2px 0px hsl(0 0% 0% / 0.18), 0px 8px 10px -1px hsl(0 0% 0% / 0.18);
  --shadow-2xl: 0px 1px 2px 0px hsl(0 0% 0% / 0.45);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
vintage-paper-theme.css

/* ロゴのフォント */
:root {
  --font-logo: 'Berkshire Swash';
}

/* 以下は https://tweakcn.com/ で作成 */
:root {
  --background: oklch(0.96 0.02 90.24);
  --foreground: oklch(0.38 0.02 64.34);
  --card: oklch(0.99 0.01 87.47);
  --card-foreground: oklch(0.38 0.02 64.34);
  --popover: oklch(0.99 0.01 87.47);
  --popover-foreground: oklch(0.38 0.02 64.34);
  --primary: oklch(0.62 0.08 65.54);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.88 0.03 85.57);
  --secondary-foreground: oklch(0.43 0.03 64.93);
  --muted: oklch(0.92 0.02 83.06);
  --muted-foreground: oklch(0.54 0.04 71.17);
  --accent: oklch(0.83 0.04 88.81);
  --accent-foreground: oklch(0.38 0.02 64.34);
  --destructive: oklch(0.55 0.14 32.91);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.86 0.03 84.59);
  --input: oklch(0.86 0.03 84.59);
  --ring: oklch(0.62 0.08 65.54);
  --chart-1: oklch(0.62 0.08 65.54);
  --chart-2: oklch(0.56 0.06 68.58);
  --chart-3: oklch(0.49 0.06 72.68);
  --chart-4: oklch(0.68 0.06 64.78);
  --chart-5: oklch(0.73 0.06 66.7);
  --sidebar: oklch(0.92 0.02 83.06);
  --sidebar-foreground: oklch(0.38 0.02 64.34);
  --sidebar-primary: oklch(0.62 0.08 65.54);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.83 0.04 88.81);
  --sidebar-accent-foreground: oklch(0.38 0.02 64.34);
  --sidebar-border: oklch(0.86 0.03 84.59);
  --sidebar-ring: oklch(0.62 0.08 65.54);
  --font-sans: Libre Baskerville, Noto Serif JP, serif;
  --font-serif: Lora, serif;
  --font-mono: IBM Plex Mono, monospace;
  --radius: 0.25rem;
  --shadow-2xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);
  --shadow-xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);
  --shadow-sm:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 1px 2px -1px hsl(28 13% 20% / 0.12);
  --shadow:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 1px 2px -1px hsl(28 13% 20% / 0.12);
  --shadow-md:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 2px 4px -1px hsl(28 13% 20% / 0.12);
  --shadow-lg:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 4px 6px -1px hsl(28 13% 20% / 0.12);
  --shadow-xl:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 8px 10px -1px hsl(28 13% 20% / 0.12);
  --shadow-2xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.3);
}

.dark {
  --background: oklch(0.27 0.01 57.65);
  --foreground: oklch(0.92 0.02 83.06);
  --card: oklch(0.32 0.02 59.06);
  --card-foreground: oklch(0.92 0.02 83.06);
  --popover: oklch(0.32 0.02 59.06);
  --popover-foreground: oklch(0.92 0.02 83.06);
  --primary: oklch(0.73 0.06 66.7);
  --primary-foreground: oklch(0.27 0.01 57.65);
  --secondary: oklch(0.38 0.02 57.13);
  --secondary-foreground: oklch(0.92 0.02 83.06);
  --muted: oklch(0.32 0.02 59.06);
  --muted-foreground: oklch(0.8 0.02 82.11);
  --accent: oklch(0.42 0.03 56.34);
  --accent-foreground: oklch(0.92 0.02 83.06);
  --destructive: oklch(0.55 0.14 32.91);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.38 0.02 57.13);
  --input: oklch(0.38 0.02 57.13);
  --ring: oklch(0.73 0.06 66.7);
  --chart-1: oklch(0.73 0.06 66.7);
  --chart-2: oklch(0.68 0.06 64.78);
  --chart-3: oklch(0.62 0.08 65.54);
  --chart-4: oklch(0.56 0.06 68.58);
  --chart-5: oklch(0.49 0.06 72.68);
  --sidebar: oklch(0.27 0.01 57.65);
  --sidebar-foreground: oklch(0.92 0.02 83.06);
  --sidebar-primary: oklch(0.73 0.06 66.7);
  --sidebar-primary-foreground: oklch(0.27 0.01 57.65);
  --sidebar-accent: oklch(0.42 0.03 56.34);
  --sidebar-accent-foreground: oklch(0.92 0.02 83.06);
  --sidebar-border: oklch(0.38 0.02 57.13);
  --sidebar-ring: oklch(0.73 0.06 66.7);
  --font-sans: Libre Baskerville, Noto Serif JP, serif;
  --font-serif: Lora, serif;
  --font-mono: IBM Plex Mono, monospace;
  --radius: 0.25rem;
  --shadow-2xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);
  --shadow-xs: 2px 3px 5px 0px hsl(28 13% 20% / 0.06);
  --shadow-sm:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 1px 2px -1px hsl(28 13% 20% / 0.12);
  --shadow:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 1px 2px -1px hsl(28 13% 20% / 0.12);
  --shadow-md:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 2px 4px -1px hsl(28 13% 20% / 0.12);
  --shadow-lg:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 4px 6px -1px hsl(28 13% 20% / 0.12);
  --shadow-xl:
    2px 3px 5px 0px hsl(28 13% 20% / 0.12),
    2px 8px 10px -1px hsl(28 13% 20% / 0.12);
  --shadow-2xl: 2px 3px 5px 0px hsl(28 13% 20% / 0.3);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

------------------------------------------------------------
book-detail-skeleton.tsx

import { Skeleton } from '@/components/ui/skeleton';

export default function BookDetailSkeleton() {
  return (
    <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
      <div className="flex flex-col items-center justify-center lg:w-1/2">
        <Skeleton className="bg-muted-foreground/5 h-[360px] w-[280px] rounded-xs object-cover sm:h-[480px] sm:w-[360px]" />
        <div className="mt-2 flex flex-col items-center justify-around sm:w-[440px] sm:flex-row">
          <Skeleton className="bg-muted-foreground/5 mt-2 h-6 w-48" />
          <div className="flex justify-center gap-x-2">
            <Skeleton className="bg-muted-foreground/5 size-8" />
            <Skeleton className="bg-muted-foreground/5 size-8" />
          </div>
        </div>
        <div className="my-4 flex items-center">
          <Skeleton className="bg-muted-foreground/5 h-11 w-48" />
        </div>
      </div>

      <div className="p-4 lg:w-1/2">
        <div className="text-3xl font-bold sm:text-4xl">
          <Skeleton className="bg-muted-foreground/5 h-9 w-64 sm:h-10" />
        </div>
        <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
          <Skeleton className="bg-muted-foreground/5 h-7 w-24 sm:h-8" />
        </div>

        <div className="flex gap-x-2">
          <Skeleton className="bg-muted-foreground/5 h-9 w-24" />
          <Skeleton className="bg-muted-foreground/5 h-9 w-24" />
        </div>

        <div className="my-6 md:my-10">
          <Skeleton className="bg-muted-foreground/5 my-2 h-6 w-full" />
          <Skeleton className="bg-muted-foreground/5 my-2 h-6 w-full" />
          <Skeleton className="bg-muted-foreground/5 my-2 h-6 w-full" />
        </div>

        <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
          <div className="text-muted-foreground flex flex-col gap-y-1">
            <div className="flex">
              <Skeleton className="bg-muted-foreground/5 mb-1 h-5 w-48" />
            </div>
            <div className="flex">
              <Skeleton className="bg-muted-foreground/5 mb-1 h-5 w-36" />
            </div>
            <div className="flex">
              <Skeleton className="bg-muted-foreground/5 mb-1 h-5 w-44" />
            </div>
            <div className="flex">
              <Skeleton className="bg-muted-foreground/5 mb-1 h-5 w-36" />
            </div>
            <div className="flex">
              <Skeleton className="bg-muted-foreground/5 mb-1 h-5 w-32" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

------------------------------------------------------------
book-detail.tsx

import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import ReviewCountIcon from '@/components/count-icon/review-count-icon';
import GenreList from '@/components/genres/genre-list';
import Rating from '@/components/rating';
import { buttonVariants } from '@/components/ui/button';
import { APP_TITLE, BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { getBookDetails, getBookFavoriteCounts } from '@/lib/api/books';
import { isBookFavoritedByUser } from '@/lib/api/user';
import { cn, formatDateJP, formatIsbn, formatPrice } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { useQuery, useSuspenseQueries } from '@tanstack/react-query';
import { Link } from 'react-router';

type Props = {
  bookId: string;
};

export default function BookDetail({ bookId }: Props) {
  const { isAuthenticated } = useAuth();

  const [{ data: book }, { data: favoriteCounts }] = useSuspenseQueries({
    queries: [
      {
        queryKey: queryKeys.book.details(bookId),
        queryFn: () => getBookDetails(bookId),
      },
      {
        queryKey: queryKeys.book.favoriteCounts(bookId),
        queryFn: () => getBookFavoriteCounts(bookId),
      },
    ],
  });

  // 認証済みの場合のみデータを取得する
  const { data: isFavorite = false } = useQuery({
    queryKey: queryKeys.user.isBookFavoritedByUser(bookId),
    queryFn: () => isBookFavoritedByUser(bookId),
    enabled: isAuthenticated,
  });

  return (
    <>
      <title>{`${book.title} - ${APP_TITLE}`}</title>

      <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
        <div className="flex flex-col items-center justify-center lg:w-1/2">
          <Link to={`/read/${bookId}/table-of-contents`} className="size-fit">
            <img
              className="h-[360px] rounded-xs object-cover sm:h-[480px]"
              src={BOOK_IMAGE_BASE_URL + book.imagePath}
              alt={book.title}
            />
          </Link>
          <div className="mt-2 flex flex-col items-center justify-around sm:w-[440px] sm:flex-row">
            <Rating rating={book.averageRating} readOnly />
            <div className="flex justify-center gap-x-2">
              <ReviewCountIcon reviewCount={book.reviewCount} />
              <FavoriteCountIcon
                bookId={bookId}
                isFavorite={isFavorite}
                count={favoriteCounts.favoriteCount}
                showCount={true}
              />
            </div>
          </div>
          <div className="my-4 flex items-center">
            <Link
              className={cn(buttonVariants({ variant: 'outline' }), 'w-44')}
              to={`/read/${bookId}/table-of-contents`}
            >
              目次を見る
            </Link>
          </div>
        </div>

        <div className="p-4 lg:w-1/2">
          <h1 className="text-3xl font-bold sm:text-4xl">{book.title}</h1>

          <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
            <p>著者</p>
            {book.authors.map((author) => (
              <p className="text-lg font-bold sm:text-2xl" key={author}>
                {author}
              </p>
            ))}
          </div>

          <GenreList
            genres={book.genres}
            activeIds={book.genres.map((genre) => genre.id)}
          />

          <div className="my-6 md:my-10">{book.description}</div>

          <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
            <div className="text-muted-foreground flex flex-col gap-y-1">
              <div className="flex">
                <p className="min-w-20">ISBN</p>
                <p>{formatIsbn(book.isbn)}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">出版社</p>
                <p>{book.publisher}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">発売日</p>
                <time
                  className="tracking-wide"
                  dateTime={
                    Date.parse(book.publicationDate) ? book.publicationDate : ''
                  }
                >
                  {formatDateJP(book.publicationDate)}
                </time>
              </div>
              <div className="flex">
                <p className="min-w-20">ページ数</p>
                <p>{`${book.pageCount}ページ`}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">価格</p>
                <p>{formatPrice(book.price)}</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

------------------------------------------------------------
book-read-content.tsx

import BookmarkCreateDialog from '@/components/bookmarks/bookmark-create-dialog';
import BookmarkUpdateDialog from '@/components/bookmarks/bookmark-update-dialog';
import { Button, buttonVariants } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { APP_TITLE } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import {
  createBookmark,
  deleteBookmark,
  updateBookmark,
} from '@/lib/api/bookmarks';
import {
  getBookChapterPageContent,
  getBookTableOfContents,
} from '@/lib/api/books';
import { getUserBookmarksForBook } from '@/lib/api/user';
import { chapterNumberString, cn } from '@/lib/utils';
import { Bookmark, BookmarkRequest, BookTableOfContents } from '@/types';
import {
  useMutation,
  useQueryClient,
  useSuspenseQueries,
} from '@tanstack/react-query';
import {
  BookmarkIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  TableOfContentsIcon,
} from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router';

// 「現在のページ/総ページ数」を表す文字列を返す
const getCurrentPageText = (
  bookTableOfContents: BookTableOfContents,
  chapterNumber: number,
  pageNumber: number
) => {
  // 章番号が見つからなかった場合でも chapterIndex は少なくとも1にする
  const chapterIndex = Math.max(
    1,
    bookTableOfContents.chapters.findIndex(
      (chapter) => chapter.chapterNumber === chapterNumber
    )
  );

  const totalPage =
    bookTableOfContents.chapters[chapterIndex]?.pageNumbers.length ?? 1;
  return `${pageNumber}/${totalPage}`;
};

// 現在のページが最初か最後かを判定する
const getPagePosition = (
  bookTableOfContents: BookTableOfContents,
  chapterNumber: number,
  pageNumber: number
) => {
  const isFirstPage = chapterNumber === 1 && pageNumber === 1;
  const isLastPage =
    chapterNumber === bookTableOfContents.chapters.length &&
    pageNumber ===
      bookTableOfContents.chapters.find(
        (chapter) => chapter.chapterNumber === chapterNumber
      )?.pageNumbers.length;

  return { isFirstPage, isLastPage };
};

// 指定方向（次 or 前）のページのリンク先を返す
const getPageLink = (
  bookTableOfContents: BookTableOfContents,
  chapterNumber: number,
  pageNumber: number,
  direction: 'next' | 'prev'
) => {
  const chapterIndex = bookTableOfContents.chapters.findIndex(
    (chapter) => chapter.chapterNumber === chapterNumber
  );

  if (chapterIndex === -1) {
    return `/read/${bookTableOfContents.bookId}/chapter/${chapterNumber}/page/${pageNumber}`;
  }

  const totalPages =
    bookTableOfContents.chapters[chapterIndex]?.pageNumbers.length ?? 1;
  const isMovingForward = direction === 'next';

  const isLastPage = pageNumber >= totalPages;
  const isFirstPage = pageNumber <= 1;
  const isLastChapter = chapterIndex >= bookTableOfContents.chapters.length - 1;
  const isFirstChapter = chapterIndex <= 0;

  let newChapterNumber = chapterNumber;
  let newPageNumber = pageNumber;

  if (isMovingForward) {
    if (isLastPage) {
      // 最終章の最後のページなら、それ以上進めない
      if (isLastChapter) {
        newPageNumber = totalPages; // 現在の最後のページのまま
      } else {
        // 次のチャプターの最初のページへ
        newChapterNumber = chapterNumber + 1;
        newPageNumber = 1;
      }
    } else {
      newPageNumber = pageNumber + 1;
    }
  } else {
    if (isFirstPage) {
      // 最初の章の最初のページなら、それ以上戻れない
      if (isFirstChapter) {
        newPageNumber = 1; // 現在の最初のページのまま
      } else {
        // 前のチャプターの最後のページへ
        newChapterNumber = chapterNumber - 1;
        newPageNumber =
          bookTableOfContents.chapters[chapterIndex - 1].pageNumbers.length;
      }
    } else {
      newPageNumber = pageNumber - 1;
    }
  }

  return `/read/${bookTableOfContents.bookId}/chapter/${newChapterNumber}/page/${newPageNumber}`;
};

type Props = {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
};

export default function BookReadContent({
  bookId,
  chapterNumber,
  pageNumber,
}: Props) {
  const [isOpenCreateDialog, setIsOpenCreateDialog] = useState(false);
  const [isOpenUpdateDialog, setIsOpenUpdateDialog] = useState(false);

  const [
    { data: bookTableOfContents },
    { data: bookChapterPageContent },
    { data: bookmark },
  ] = useSuspenseQueries({
    queries: [
      {
        queryKey: queryKeys.book.tableOfContents(bookId),
        queryFn: () => getBookTableOfContents(bookId),
      },
      {
        queryKey: queryKeys.book.chapterPageContent(
          bookId,
          chapterNumber,
          pageNumber
        ),
        queryFn: () =>
          getBookChapterPageContent(bookId, chapterNumber, pageNumber),
      },
      {
        queryKey: queryKeys.user.bookmarksForBook(bookId),
        queryFn: () => getUserBookmarksForBook(bookId),
        select: (bookmarks: Bookmark[]) =>
          bookmarks.find(
            (bookmark) =>
              bookmark.bookId === bookId &&
              bookmark.chapterNumber === chapterNumber &&
              bookmark.pageNumber === pageNumber
          ),
      },
    ],
  });

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({
      queryKey: queryKeys.user.bookmarksForBook(bookId),
    });
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const createMutation = useMutation({
    mutationFn: (requestBody: BookmarkRequest) => createBookmark(requestBody),
    onSuccess,
    onError,
  });

  const updateMutation = useMutation({
    mutationFn: ({
      bookmarkId,
      requestBody,
    }: {
      bookmarkId: number;
      requestBody: BookmarkRequest;
    }) => updateBookmark(bookmarkId, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (bookmarkId: number) => deleteBookmark(bookmarkId),
    onSuccess,
    onError,
  });

  const currentPageText = getCurrentPageText(
    bookTableOfContents,
    chapterNumber,
    pageNumber
  );

  const { isFirstPage, isLastPage } = getPagePosition(
    bookTableOfContents,
    chapterNumber,
    pageNumber
  );

  const nextPageLink = getPageLink(
    bookTableOfContents,
    chapterNumber,
    pageNumber,
    'next'
  );

  const prevPageLink = getPageLink(
    bookTableOfContents,
    chapterNumber,
    pageNumber,
    'prev'
  );

  return (
    <>
      <title>{`${bookChapterPageContent.chapterTitle} (${currentPageText}) - ${APP_TITLE}`}</title>

      <div className="animate-in fade-in-0 delay-0 duration-200">
        <div className="flex flex-col gap-y-12 px-4 pt-12 pb-6 sm:px-20">
          <div>
            <p className="text-muted-foreground mb-2 text-xs sm:text-sm">
              {chapterNumberString(bookChapterPageContent.chapterNumber)}
            </p>
            <div className="flex flex-wrap items-center">
              <h1 className="text-xl font-bold text-wrap sm:text-2xl">
                {bookChapterPageContent.chapterTitle}
              </h1>
              <p className="text-muted-foreground mr-2 ml-4 text-xs sm:text-sm">
                {currentPageText}
              </p>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Link
                    className={buttonVariants({
                      variant: 'ghost',
                      size: 'icon',
                    })}
                    to={`/read/${bookId}/table-of-contents`}
                    aria-label="目次に戻る"
                  >
                    <TableOfContentsIcon className="size-4" />
                  </Link>
                </TooltipTrigger>
                <TooltipContent>目次に戻る</TooltipContent>
              </Tooltip>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    className={cn(
                      'text-muted-foreground size-8',
                      bookmark && 'text-primary bg-transparent'
                    )}
                    variant="ghost"
                    size="icon"
                    aria-label="ブックマーク"
                    onClick={
                      bookmark
                        ? () => setIsOpenUpdateDialog(true)
                        : () => setIsOpenCreateDialog(true)
                    }
                  >
                    <BookmarkIcon
                      className={cn('size-4', bookmark && 'fill-primary')}
                    />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  {bookmark
                    ? bookmark.note
                      ? `メモ「${bookmark.note}」`
                      : 'ブックマークからから削除'
                    : 'ブックマークに追加'}
                </TooltipContent>
              </Tooltip>
            </div>
          </div>
          <p className="whitespace-pre-wrap">
            {bookChapterPageContent.content}
          </p>
        </div>
        <div className="flex justify-between px-0 py-6 sm:px-12">
          <Button
            className={cn(
              'flex items-center gap-x-2 hover:bg-transparent',
              isFirstPage && 'text-muted-foreground pointer-events-none'
            )}
            variant="ghost"
            asChild
          >
            <Link to={prevPageLink}>
              <ChevronLeftIcon />
              <span>前のページへ</span>
            </Link>
          </Button>
          <Button
            className={cn(
              'flex items-center gap-x-2 hover:bg-transparent',
              isLastPage && 'text-muted-foreground pointer-events-none'
            )}
            variant="ghost"
            asChild
          >
            <Link to={nextPageLink}>
              <span>次のページへ</span>
              <ChevronRightIcon />
            </Link>
          </Button>
        </div>
      </div>

      {bookmark && (
        <BookmarkUpdateDialog
          bookmark={bookmark}
          isOpen={isOpenUpdateDialog}
          setIsOpen={setIsOpenUpdateDialog}
          updateMutation={updateMutation}
          deleteMutation={deleteMutation}
        />
      )}

      <BookmarkCreateDialog
        bookId={bookId}
        chapterNumber={chapterNumber}
        pageNumber={pageNumber}
        isOpen={isOpenCreateDialog}
        setIsOpen={setIsOpenCreateDialog}
        createMutation={createMutation}
      />
    </>
  );
}

------------------------------------------------------------
book-table-of-contents.tsx

import { Button, buttonVariants } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { APP_TITLE } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { getBookTableOfContents } from '@/lib/api/books';
import { chapterNumberString, cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { useSuspenseQuery } from '@tanstack/react-query';
import { Link } from 'react-router';

type Props = {
  bookId: string;
};

export default function BookTableOfContents({ bookId }: Props) {
  const { isAuthenticated } = useAuth();

  const { data: bookTableOfContents } = useSuspenseQuery({
    queryKey: queryKeys.book.tableOfContents(bookId),
    queryFn: () => getBookTableOfContents(bookId),
  });

  return (
    <>
      <title>{`${bookTableOfContents.title} - ${APP_TITLE}`}</title>

      <div className="animate-in fade-in-0 delay-0 duration-200">
        <div className="flex flex-col gap-y-12 px-4 py-12 sm:px-20">
          <div className="flex w-full flex-col items-center gap-y-6 sm:items-start">
            <h1 className="text-3xl font-bold sm:text-5xl">
              {bookTableOfContents.title}
            </h1>

            {isAuthenticated && bookTableOfContents.chapters.length ? (
              <Link
                className={cn(
                  buttonVariants({ variant: 'outline' }),
                  'w-44 bg-transparent'
                )}
                to={`/read/${bookId}/chapter/1/page/1`}
              >
                最初から読む
              </Link>
            ) : (
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    className="hover:border-primary/50 w-44 cursor-default bg-transparent opacity-50 hover:bg-transparent"
                    variant="outline"
                  >
                    最初から読む
                  </Button>
                </TooltipTrigger>
                {bookTableOfContents.chapters.length ? (
                  <TooltipContent>
                    ログインしてこの本を読みましょう
                  </TooltipContent>
                ) : null}
              </Tooltip>
            )}
          </div>

          {bookTableOfContents.chapters.length ? (
            <ul className="flex w-full flex-col gap-y-8">
              {bookTableOfContents.chapters.map((chapter) => (
                <li
                  className="w-full text-center sm:text-left"
                  key={chapter.chapterNumber}
                >
                  <p className="text-muted-foreground text-xs sm:text-sm">
                    {chapterNumberString(chapter.chapterNumber)}
                  </p>
                  <Link
                    to={`/read/${bookId}/chapter/${chapter.chapterNumber}/page/1`}
                    className={cn(
                      'hover:text-primary text-base font-semibold sm:text-xl',
                      !isAuthenticated && 'pointer-events-none'
                    )}
                  >
                    {chapter.chapterTitle}
                  </Link>
                </li>
              ))}
            </ul>
          ) : (
            <p className="text-center sm:text-start">目次がありません</p>
          )}
        </div>
      </div>
    </>
  );
}

------------------------------------------------------------
bookmark-create-dialog.tsx

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { BookmarkCreateMutation, BookmarkRequest } from '@/types';
import { Loader2Icon } from 'lucide-react';
import { useEffect, useState } from 'react';
import { toast } from 'sonner';

type Props = {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  createMutation: BookmarkCreateMutation;
};

export default function BookmarkCreateDialog({
  bookId,
  chapterNumber,
  pageNumber,
  isOpen,
  setIsOpen,
  createMutation,
}: Props) {
  const [note, setNote] = useState('');

  useEffect(() => {
    if (isOpen) {
      setNote('');
    }
  }, [isOpen]);

  const handleClickCancel = () => {
    setIsOpen(false);
  };

  const handleClickCreate = () => {
    const requestBody: BookmarkRequest = {
      bookId,
      chapterNumber,
      pageNumber,
      note,
    };
    createMutation.mutate(requestBody, {
      onSuccess: () => {
        toast.success('ブックマークを作成しました');
      },
      onError: () => {
        toast.error('ブックマークの作成に失敗しました', { duration: 5000 });
      },
      onSettled: () => {
        setIsOpen(false);
      },
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 max-w-[600px] min-w-[360px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
      >
        <div>
          <DialogTitle className="leading-10 font-semibold">
            ブックマーク
          </DialogTitle>
          <DialogDescription className="text-muted-foreground text-xs sm:text-sm">
            このブックマークにメモを残せます。メモが未入力でもブックマーク登録できます。
          </DialogDescription>
        </div>

        <Textarea
          spellCheck={false}
          value={note}
          onChange={(e) => setNote(e.currentTarget.value)}
        />

        <DialogFooter className="gap-y-4 sm:gap-y-0">
          <Button
            className="min-w-24"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24"
            disabled={createMutation.isPending}
            onClick={handleClickCreate}
          >
            {createMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '作成'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
bookmark-item.tsx

import BookmarkUpdateDialog from '@/components/bookmarks/bookmark-update-dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { useSearchFilters } from '@/hooks/use-search-filters';
import { deleteBookmark, updateBookmark } from '@/lib/api/bookmarks';
import { getUserBookmarks } from '@/lib/api/user';
import { chapterNumberString, formatDateJP, formatTime } from '@/lib/utils';
import { Bookmark, BookmarkRequest } from '@/types';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { BookmarkIcon, SquarePenIcon } from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router';

type Props = {
  bookmark: Bookmark;
};

export default function BookmarkItem({ bookmark }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const { page, updateQueryParams } = useSearchFilters();
  const queryClient = useQueryClient();

  const updateMutation = useMutation({
    mutationFn: ({
      bookmarkId,
      requestBody,
    }: {
      bookmarkId: number;
      requestBody: BookmarkRequest;
    }) => updateBookmark(bookmarkId, requestBody),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: queryKeys.user.bookmarks(page),
      });
    },
    onError: (error: Error) => {
      console.error(error);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (bookmarkId: number) => deleteBookmark(bookmarkId),
    onSuccess: async () => {
      // ２ページ以降で、そのページの最後の１つを削除した場合は、１ページ戻る
      const bookmarkPage = await getUserBookmarks(page);
      if (page >= 2 && bookmarkPage.bookmarks.length === 0) {
        queryClient.invalidateQueries({
          queryKey: queryKeys.user.bookmarks(page - 1),
        });
        updateQueryParams({ page: page - 1 });
        return;
      }

      queryClient.invalidateQueries({
        queryKey: queryKeys.user.bookmarks(page),
      });
    },
    onError: (error: Error) => {
      console.error(error);
    },
  });

  return (
    <>
      <Card className="p-0">
        <CardContent className="p-0">
          <div className="flex gap-x-3 px-3 py-4 pr-0">
            <div className="flex min-w-20 justify-center sm:min-w-24">
              <Link
                to={`/read/${bookmark.bookId}/chapter/${bookmark.chapterNumber}/page/${bookmark.pageNumber}`}
                className="size-fit"
              >
                <img
                  className="h-24 rounded-xs object-cover sm:h-28"
                  src={BOOK_IMAGE_BASE_URL + bookmark.book.imagePath}
                  alt={bookmark.book.title}
                />
              </Link>
            </div>
            <div className="flex w-full flex-col justify-center">
              <div className="mb-2 flex flex-col items-start gap-x-4 sm:flex-row sm:items-center">
                <Link
                  to={`/read/${bookmark.bookId}/chapter/${bookmark.chapterNumber}/page/${bookmark.pageNumber}`}
                  className="size-fit"
                >
                  <h2 className="hover:text-primary text-base font-semibold sm:text-xl">
                    {bookmark.book.title}
                  </h2>
                </Link>
                <div className="flex flex-wrap items-center">
                  <div className="flex size-8 items-center justify-center">
                    <BookmarkIcon className="text-primary fill-primary size-4" />
                  </div>
                  <time
                    className="text-muted-foreground mr-2 flex gap-x-1 text-xs leading-8 tracking-wide whitespace-nowrap sm:text-sm"
                    dateTime={
                      Date.parse(bookmark.createdAt) ? bookmark.createdAt : ''
                    }
                  >
                    <span>{formatDateJP(bookmark.createdAt)}</span>
                    <span>{formatTime(bookmark.createdAt)}</span>
                  </time>
                  <Button
                    className="text-muted-foreground size-8"
                    variant="ghost"
                    size="icon"
                    aria-label="ブックマークを編集"
                    onClick={() => setIsOpen(true)}
                  >
                    <SquarePenIcon className="size-4" />
                  </Button>
                </div>
              </div>
              <p className="text-muted-foreground mb-4 text-xs sm:text-sm">
                {`${chapterNumberString(bookmark.chapterNumber)} : ${bookmark.chapterTitle}（
                ${bookmark.pageNumber}ページ目）`}
              </p>
              <p className="text-muted-foreground">
                {bookmark.note && <span>{bookmark.note}</span>}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      <BookmarkUpdateDialog
        bookmark={bookmark}
        isOpen={isOpen}
        setIsOpen={setIsOpen}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />
    </>
  );
}

------------------------------------------------------------
bookmark-list.tsx

import BookmarkItem from '@/components/bookmarks/bookmark-item';
import { Bookmark } from '@/types';

type Props = {
  bookmarks: Bookmark[];
};

export default function BookmarkList({ bookmarks }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {bookmarks.map((bookmark) => (
        <li key={bookmark.id}>
          <article>
            <BookmarkItem bookmark={bookmark} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
bookmark-update-dialog.tsx

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import {
  Bookmark,
  BookmarkDeleteMutation,
  BookmarkRequest,
  BookmarkUpdateMutation,
} from '@/types';
import { Loader2Icon } from 'lucide-react';
import { useEffect, useState } from 'react';
import { toast } from 'sonner';

type Props = {
  bookmark: Bookmark;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  updateMutation: BookmarkUpdateMutation;
  deleteMutation: BookmarkDeleteMutation;
};

export default function BookmarkUpdateDialog({
  bookmark,
  isOpen,
  setIsOpen,
  updateMutation,
  deleteMutation,
}: Props) {
  const [note, setNote] = useState('');
  const { confirmDialog } = useConfirmDialog();

  useEffect(() => {
    if (isOpen) {
      setNote(bookmark.note);
    }
  }, [isOpen, bookmark.note]);

  const handleClickCancel = () => {
    setIsOpen(false);
  };

  const handleClickDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: 'warning',
      title: 'このブックマークを削除しますか？',
      message: 'ブックマークのメモも削除されます。',
    });
    if (isCancel) return;

    deleteMutation.mutate(bookmark.id, {
      onSuccess: () => {
        toast.success('ブックマークを削除しました');
      },
      onError: () => {
        toast.error('ブックマークの削除に失敗しました', { duration: 5000 });
      },
      onSettled: () => {
        setIsOpen(false);
      },
    });
  };

  const handleClickUpdate = () => {
    const requestBody: BookmarkRequest = {
      bookId: bookmark.bookId,
      chapterNumber: bookmark.chapterNumber,
      pageNumber: bookmark.pageNumber,
      note,
    };
    updateMutation.mutate(
      { bookmarkId: bookmark.id, requestBody },
      {
        onSuccess: () => {
          toast.success('ブックマークのメモを更新しました');
        },
        onError: () => {
          toast.error('ブックマークのメモを更新に失敗しました', {
            duration: 5000,
          });
        },
        onSettled: () => {
          setIsOpen(false);
        },
      }
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 max-w-[600px] min-w-[360px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
      >
        <div>
          <DialogTitle className="leading-10 font-semibold">
            ブックマーク
          </DialogTitle>
          <DialogDescription className="text-muted-foreground text-xs sm:text-sm">
            メモを編集できます。メモが未入力でもブックマーク登録は消えません。
          </DialogDescription>
        </div>

        <Textarea
          spellCheck={false}
          value={note}
          onChange={(e) => setNote(e.currentTarget.value)}
        />

        <DialogFooter className="gap-y-4 sm:gap-y-0">
          <Button
            className="min-w-24"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24"
            variant="outline"
            disabled={deleteMutation.isPending}
            onClick={handleClickDelete}
          >
            {deleteMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '削除'
            )}
          </Button>
          <Button
            className="min-w-24"
            disabled={updateMutation.isPending}
            onClick={handleClickUpdate}
          >
            {updateMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '更新'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
bookmarks-skeleton.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';

export default function BookmarksSkeleton() {
  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        <span className="text-muted-foreground mr-4 ml-1 text-sm">件</span>
      </p>
      <ul className="flex flex-col gap-y-2">
        {[...Array<number>(5)].map((_, index) => (
          <li key={index}>
            <Card className="p-0">
              <CardContent className="p-4">
                <div className="flex gap-x-4">
                  <div className="flex min-w-20 justify-center sm:min-w-24">
                    <Skeleton className="bg-muted-foreground/5 h-24 w-20 rounded-xs object-cover sm:h-28" />
                  </div>
                  <div className="flex flex-col gap-y-2">
                    <Skeleton className="bg-muted-foreground/5 h-6 w-64 sm:h-7" />
                    <div className="flex flex-col gap-y-1">
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-96" />
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-80" />
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-64" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </li>
        ))}
      </ul>
    </div>
  );
}

------------------------------------------------------------
bookmarks.tsx

import BookmarkList from '@/components/bookmarks/bookmark-list';
import SearchPagination from '@/components/search-pagination';
import { queryKeys } from '@/constants/query-keys';
import { getUserBookmarks } from '@/lib/api/user';
import { useSuspenseQuery } from '@tanstack/react-query';

type Props = {
  page: number;
};

export default function Bookmarks({ page }: Props) {
  const { data: bookmarkPage } = useSuspenseQuery({
    queryKey: queryKeys.user.bookmarks(page),
    queryFn: () => getUserBookmarks(page),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {bookmarkPage.totalItems}
        <span className="text-muted-foreground mr-4 ml-1 text-sm">件</span>
      </p>
      <BookmarkList bookmarks={bookmarkPage.bookmarks} />
      <SearchPagination totalPages={bookmarkPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
book-item.tsx

import AverageRatingIcon from '@/components/count-icon/average-rating-icon';
import ReviewCountIcon from '@/components/count-icon/review-count-icon';
import { Card, CardContent } from '@/components/ui/card';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { formatDateJP } from '@/lib/utils';
import { Book } from '@/types';
import { Link } from 'react-router';

type Props = {
  book: Book;
};

export default function BookItem({ book }: Props) {
  return (
    <Card className="border-card-foreground/5 bg-card/70 px-2 py-3 sm:px-3 sm:py-4">
      <CardContent className="flex w-38 flex-col items-center gap-y-0 p-0 sm:w-44 sm:gap-y-1">
        <Link to={`/book/${book.id}`} className="size-fit">
          <img
            className="mb-1 h-44 rounded-xs object-cover sm:mb-0 sm:h-52"
            src={BOOK_IMAGE_BASE_URL + book.imagePath}
            alt={book.title}
          />
        </Link>
        <Link
          to={`/book/${book.id}`}
          className="hover:text-primary flex h-8 items-center justify-center text-xs sm:h-10 sm:text-sm"
        >
          <h2 className="line-clamp-2 text-center">{book.title}</h2>
        </Link>
        <time
          className="text-muted-foreground text-xs tracking-wide"
          dateTime={
            Date.parse(book.publicationDate) ? book.publicationDate : ''
          }
        >
          {formatDateJP(book.publicationDate)}
        </time>
        <div className="flex gap-x-3">
          <AverageRatingIcon size="sm" averageRating={book.averageRating} />
          <ReviewCountIcon size="sm" reviewCount={book.reviewCount} />
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
books-skeleton.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { FETCH_BOOKS_MAX_RESULTS } from '@/constants/constants';

export default function BooksSkeleton() {
  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <div className="h-6" />
      <div className="grid grid-cols-2 justify-items-center gap-2 sm:grid-cols-3 sm:gap-3 md:grid-cols-4 lg:grid-cols-5">
        {[...Array<number>(FETCH_BOOKS_MAX_RESULTS)].map((_, index) => (
          <article key={index}>
            <Card className="border-card-foreground/5 bg-card/70 px-2 py-3 sm:px-3 sm:py-4">
              <CardContent className="flex w-38 flex-col items-center gap-y-0 p-0 sm:w-44 sm:gap-y-1">
                <Skeleton className="bg-muted-foreground/5 mb-1 h-44 w-32 rounded-xs object-cover sm:mb-0 sm:h-52 sm:w-36" />
                <div className="flex h-8 w-full items-center justify-center sm:h-10">
                  <Skeleton className="bg-muted-foreground/5 h-4 w-4/5 sm:h-5" />
                </div>
                <div className="flex h-11 w-full flex-col items-center">
                  <Skeleton className="bg-muted-foreground/5 h-3 w-24" />
                  <Skeleton className="bg-muted-foreground/5 mt-3 h-3 w-24" />
                </div>
              </CardContent>
            </Card>
          </article>
        ))}
      </div>
    </div>
  );
}

------------------------------------------------------------
favorite-count-icon.tsx

import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { createFavorite, deleteFavorite } from '@/lib/api/favorite';
import { cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { HeartIcon } from 'lucide-react';
import { startTransition, useEffect, useOptimistic, useState } from 'react';

const BUTTON_SIZE = { sm: 'size-6', md: 'size-8' };
const ICON_SIZE = { sm: 'size-3', md: 'size-4' };
const TEXT_SIZE = { sm: 'text-xs', md: 'text-sm' };

type FavoriteStatus = {
  isFavorite: boolean;
  count: number;
};

type Props = {
  bookId: string;
  isFavorite: boolean;
  count: number;
  size?: 'sm' | 'md';
  showCount?: boolean;
};

export default function FavoriteCountIcon({
  bookId,
  isFavorite,
  count,
  size = 'md',
  showCount = false,
}: Props) {
  const { isAuthenticated } = useAuth();

  const [favoriteState, setFavoriteState] = useState<FavoriteStatus>({
    isFavorite,
    count,
  });

  const [optimisticState, addOptimistic] = useOptimistic(
    favoriteState,
    (_currentState, newState: FavoriteStatus) => {
      return newState;
    }
  );

  useEffect(() => {
    setFavoriteState({ isFavorite, count });
  }, [count, isFavorite]);

  const handleClick = () => {
    if (!isAuthenticated) return;

    const newFavoriteState = {
      isFavorite: !optimisticState.isFavorite,
      count: optimisticState.count + (optimisticState.isFavorite ? -1 : 1),
    };

    startTransition(async () => {
      // 楽観的更新を行う
      addOptimistic(newFavoriteState);
      // APIリクエストを送信する
      try {
        if (favoriteState.isFavorite) {
          await deleteFavorite(bookId);
        } else {
          await createFavorite({ bookId });
        }
        // APIリクエストが成功した場合のみ真の状態を更新する
        setFavoriteState(newFavoriteState);
      } catch (error) {
        console.log(error);
      }
    });
  };

  return (
    <div className="text-muted-foreground flex items-center">
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            className={cn(
              'text-muted-foreground',
              BUTTON_SIZE[size],
              optimisticState.isFavorite && 'text-primary bg-transparent'
            )}
            variant="ghost"
            size="icon"
            aria-label={
              optimisticState.isFavorite
                ? 'お気に入りから削除'
                : 'お気に入りに追加'
            }
            onClick={handleClick}
          >
            <HeartIcon
              className={cn(
                ICON_SIZE[size],
                optimisticState.isFavorite && 'fill-primary'
              )}
            />
          </Button>
        </TooltipTrigger>
        <TooltipContent>
          {isAuthenticated
            ? optimisticState.isFavorite
              ? 'お気に入りから削除'
              : 'お気に入りに追加'
            : 'ログインしてこの本を「お気に入り」に加えましょう'}
        </TooltipContent>
      </Tooltip>

      {showCount && (
        <div className={cn('flex min-w-4 justify-center', TEXT_SIZE[size])}>
          {optimisticState.count}
        </div>
      )}
    </div>
  );
}

------------------------------------------------------------
favorite-item.tsx

import FavoriteCountIcon from '@/components/count-icon/favorite-count-icon';
import { Card, CardContent } from '@/components/ui/card';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { formatDateJP, formatTime } from '@/lib/utils';
import { Favorite } from '@/types';
import { Link } from 'react-router';

type Props = {
  favorite: Favorite;
};

export default function FavoriteItem({ favorite }: Props) {
  return (
    <Card className="p-0">
      <CardContent className="p-0">
        <div className="flex gap-x-3 px-3 py-4">
          <div className="flex min-w-20 justify-center sm:min-w-24">
            <Link to={`/book/${favorite.book.id}`} className="size-fit">
              <img
                className="h-24 rounded-xs object-cover sm:h-28"
                src={BOOK_IMAGE_BASE_URL + favorite.book.imagePath}
                alt={favorite.book.title}
              />
            </Link>
          </div>
          <div className="flex w-full flex-col justify-center">
            <div className="mb-2 flex flex-col items-start gap-x-4 sm:flex-row sm:items-center">
              <Link to={`/book/${favorite.book.id}`} className="size-fit">
                <h2 className="hover:text-primary text-base font-semibold sm:text-xl">
                  {favorite.book.title}
                </h2>
              </Link>
              <div className="flex items-center">
                <FavoriteCountIcon
                  bookId={favorite.bookId}
                  isFavorite={true}
                  count={1}
                />
                <time
                  className="text-muted-foreground mr-2 flex gap-x-1 text-xs leading-8 tracking-wide whitespace-nowrap sm:text-sm"
                  dateTime={
                    Date.parse(favorite.createdAt) ? favorite.createdAt : ''
                  }
                >
                  <span>{formatDateJP(favorite.createdAt)}</span>
                  <span>{formatTime(favorite.createdAt)}</span>
                </time>
              </div>
            </div>
            <div className="text-muted-foreground mb-4 flex w-full flex-wrap items-center gap-x-3">
              <p className="text-xs">著者</p>
              {favorite.book.authors.map((author) => (
                <p className="text-sm" key={author}>
                  {author}
                </p>
              ))}
            </div>
            <p className="text-muted-foreground">{favorite.book.description}</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
favorites-skeleton.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';

export default function FavoritesSkeleton() {
  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        <span className="text-muted-foreground mr-4 ml-1 text-sm">件</span>
      </p>
      <ul className="flex flex-col gap-y-2">
        {[...Array<number>(5)].map((_, index) => (
          <li key={index}>
            <Card className="p-0">
              <CardContent className="p-4">
                <div className="flex gap-x-4">
                  <div className="flex min-w-20 justify-center sm:min-w-24">
                    <Skeleton className="bg-muted-foreground/5 h-24 w-20 rounded-xs object-cover sm:h-28" />
                  </div>
                  <div className="flex flex-col gap-y-2">
                    <Skeleton className="bg-muted-foreground/5 h-6 w-64 sm:h-7" />
                    <div className="flex flex-col gap-y-1">
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-96" />
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-80" />
                      <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-64" />
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </li>
        ))}
      </ul>
    </div>
  );
}

------------------------------------------------------------
genre-item.tsx

import { Button } from '@/components/ui/button';
import { Genre } from '@/types';
import { useNavigate } from 'react-router';

type Props = {
  genre: Genre;
  isActive?: boolean;
  onClick?: (genreId: number) => void;
};

export default function GenreItem({ genre, isActive = false, onClick }: Props) {
  const navigate = useNavigate();

  const handleClick = (genreId: number) => {
    if (onClick) {
      onClick(genreId);
    } else {
      navigate(`/discover?genreIds=${genreId}&condition=SINGLE`);
    }
  };

  return (
    <Button
      className="m-1 text-xs sm:text-sm"
      variant={isActive ? 'outline' : 'ghost'}
      size="sm"
      onClick={() => handleClick(genre.id)}
    >
      {genre.name}
    </Button>
  );
}

------------------------------------------------------------
genre-list.tsx

import GenreItem from '@/components/genres/genre-item';
import { Genre } from '@/types';

type Props = {
  genres: Genre[];
  activeIds?: number[];
  onClick?: (genreId: number) => void;
};

export default function GenreList({ genres, activeIds, onClick }: Props) {
  return (
    <ul className="flex flex-wrap">
      {genres.map((genre) => (
        <li key={genre.id}>
          <GenreItem
            genre={genre}
            isActive={activeIds?.includes(genre.id)}
            onClick={onClick}
          />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
genres-skeleton.tsx

import { Skeleton } from '@/components/ui/skeleton';

export default function GenresSkeleton() {
  return (
    <ul className="flex flex-wrap">
      {[...Array<number>(12)].map((_, index) => (
        <li key={index}>
          <Skeleton className="bg-muted-foreground/5 m-1 h-9 w-24" />
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
footer.tsx

import Logo from '@/components/layout/logo';
import { buttonVariants } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import {
  FacebookIcon,
  InstagramIcon,
  TwitterIcon,
  YoutubeIcon,
} from 'lucide-react';
import { Link } from 'react-router';

const SNS_LIST = [
  { label: 'Youtube', icon: YoutubeIcon, url: 'https://www.youtube.com' },
  { label: 'Twitter', icon: TwitterIcon, url: 'https://x.com' },
  { label: 'Instagram', icon: InstagramIcon, url: 'https://www.instagram.com' },
  { label: 'Facebook', icon: FacebookIcon, url: 'https://www.facebook.com' },
];

type Props = {
  className?: string;
};

export default function Footer({ className }: Props) {
  return (
    <footer className={cn('bg-card', className)}>
      <div className="mx-auto max-w-7xl px-3 sm:px-6">
        <div className="flex flex-col items-center justify-between py-4 sm:flex-row">
          <ul className="flex">
            {SNS_LIST.map((item) => (
              <li key={item.label}>
                <Link
                  className={buttonVariants({ variant: 'ghost', size: 'icon' })}
                  to={item.url}
                  aria-label={item.label}
                  target="_blank"
                  rel="noopener noreferrer"
                >
                  <item.icon className="size-4" />
                </Link>
              </li>
            ))}
          </ul>
          <p className="flex h-7 items-center text-sm">© 2025 Xxxxx, Inc.</p>
          <Logo size="sm" />
        </div>
      </div>
    </footer>
  );
}

------------------------------------------------------------
header.tsx

import Menu from '@/components/layout/menu';
import ThemeToggleButton from '@/components/layout/theme-toggle-button';
import UserIconButton from '@/components/layout/user-icon-button';
import SearchInput from '@/components/search-input';
import { buttonVariants } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { Link, useLocation } from 'react-router';

type Props = {
  className?: string;
};

export default function Header({ className }: Props) {
  const { isAuthenticated } = useAuth();
  const location = useLocation();

  return (
    <header className={cn('backdrop-blur-sm', className)}>
      <div className="mx-auto max-w-7xl px-3 sm:px-6">
        <div className="animate-in fade-in-0 slide-in-from-top-10 fill-mode-both delay-0 duration-500">
          <div className="flex h-16 w-full items-center justify-between sm:gap-x-2">
            <Menu />
            <div className="flex sm:gap-x-2">
              <SearchInput />
              <ThemeToggleButton />

              {isAuthenticated ? (
                <UserIconButton />
              ) : (
                <Link
                  className={buttonVariants({ variant: 'ghost' })}
                  to="/login"
                  state={{ from: location }}
                >
                  ログイン
                </Link>
              )}
            </div>
          </div>
        </div>
      </div>
    </header>
  );
}

------------------------------------------------------------
logo.tsx

import { buttonVariants } from '@/components/ui/button';
import { TITLE_LOGO } from '@/constants/constants';
import { cn } from '@/lib/utils';
import { Link } from 'react-router';

type Props = {
  className?: string;
  size?: 'sm' | 'md' | 'lg';
  disableLink?: boolean;
  onClick?: () => void;
};

export default function Logo({
  className,
  size = 'md',
  disableLink = false,
  onClick,
}: Props) {
  const SIZE = {
    sm: 'text-xl',
    md: 'text-3xl',
    lg: 'text-5xl',
  };

  return (
    <Link
      className={cn(
        buttonVariants({ variant: 'ghost' }),
        'text-primary font-logo bg-transparent tracking-tighter whitespace-nowrap select-none hover:bg-transparent',
        disableLink && 'pointer-events-none cursor-default',
        SIZE[size],
        className
      )}
      to="/"
      aria-label="タイトルロゴ"
      aria-disabled={disableLink}
      onClick={onClick}
    >
      {TITLE_LOGO}
    </Link>
  );
}

------------------------------------------------------------
menu.tsx

import Logo from '@/components/layout/logo';
import NavList from '@/components/layout/nav-list';
import { Button } from '@/components/ui/button';
import { DialogDescription, DialogTitle } from '@/components/ui/dialog';
import { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';
import { useWindowSize } from '@/hooks/use-window-size';
import { VisuallyHidden } from '@radix-ui/react-visually-hidden';
import { MenuIcon } from 'lucide-react';
import { useState } from 'react';

export default function Menu() {
  const [isOpen, setIsOpen] = useState(false);

  const DEBOUNCED_DELAY = 100;
  const { width } = useWindowSize(DEBOUNCED_DELAY);

  const TABLET_WIDTH = 1024;
  if (isOpen && width >= TABLET_WIDTH) {
    setIsOpen(false);
  }

  return (
    <>
      <div className="hidden lg:flex lg:items-center lg:gap-x-8">
        <Logo />
        <NavList />
      </div>

      <div className="lg:hidden">
        <Sheet open={isOpen} onOpenChange={setIsOpen}>
          <SheetTrigger asChild>
            <Button variant="ghost" size="icon" aria-label="メニュー">
              <MenuIcon className="size-4" />
            </Button>
          </SheetTrigger>
          <SheetContent className="w-fit p-8" side="left">
            <VisuallyHidden>
              <DialogTitle>ナビメニュー</DialogTitle>
              <DialogDescription>ナビメニュー</DialogDescription>
            </VisuallyHidden>

            <Logo onClick={() => setIsOpen(false)} />
            <NavList onClick={() => setIsOpen(false)} />
          </SheetContent>
        </Sheet>
      </div>
    </>
  );
}

------------------------------------------------------------
nav-list.tsx

import { buttonVariants } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { Link, useLocation } from 'react-router';

const NAV_LIST = [
  {
    href: '/discover?genreIds=1&condition=SINGLE',
    title: 'ジャンル',
  },
  { href: '/ranking', title: 'ランキング' },
  { href: '/special-features', title: '特集' },
  { href: '/settings', title: '設定' },
];

type Props = {
  onClick?: () => void;
};

export default function NavList({ onClick }: Props) {
  const location = useLocation();

  return (
    <nav>
      <ul className="flex flex-col gap-y-2 lg:flex-row">
        {NAV_LIST.map((item) => (
          <li className="w-full" key={item.href}>
            <Link
              className={cn(
                buttonVariants({ variant: 'ghost' }),
                'w-full',
                location.pathname !== '/' &&
                  item.href.includes(location.pathname) &&
                  'text-primary'
              )}
              to={item.href}
              onClick={onClick}
            >
              {item.title}
            </Link>
          </li>
        ))}
      </ul>
    </nav>
  );
}

------------------------------------------------------------
theme-toggle-button.tsx

import { Button } from '@/components/ui/button';
import { useTheme } from '@/providers/theme-provider';
import { MoonIcon, SunIcon } from 'lucide-react';

export default function ThemeToggleButton() {
  const { theme, setTheme } = useTheme();

  const handleClick = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  return (
    <Button
      variant="ghost"
      size="icon"
      aria-label={
        theme === 'light' ? 'ダークモードに切り替え' : 'ライトモードに切り替え'
      }
      onClick={handleClick}
    >
      {theme === 'light' ? (
        <MoonIcon className="size-4" />
      ) : (
        <SunIcon className="size-4" />
      )}
    </Button>
  );
}

------------------------------------------------------------
user-icon-button.tsx

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { AVATAR_IMAGE_BASE_URL } from '@/constants/constants';
import { cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { useUser } from '@/providers/user-provider';
import { useMutation } from '@tanstack/react-query';
import {
  BookmarkIcon,
  HeartIcon,
  LogOutIcon,
  MessageSquareIcon,
  UserRoundIcon,
} from 'lucide-react';
import { useState } from 'react';
import { useNavigate } from 'react-router';
import { toast } from 'sonner';

const MENU_LIST = [
  { href: '/favorites', title: 'お気に入り', icon: HeartIcon },
  { href: '/bookmarks', title: 'ブックマーク', icon: BookmarkIcon },
  { href: '/my-reviews', title: 'マイレビュー', icon: MessageSquareIcon },
  { href: '/profile', title: 'プロフィール', icon: UserRoundIcon },
];

export default function UserIconButton() {
  const [isOpen, setIsOpen] = useState(false);

  const navigate = useNavigate();

  const { logout } = useAuth();
  const { user } = useUser();

  const logoutMutation = useMutation({
    mutationFn: () => logout(),
    onSuccess: () => {},
    onError: (error) => {
      console.error(error);
    },
  });

  const handleClickLogout = () => {
    logoutMutation.mutate(undefined, {
      onSuccess: () => {
        toast.success('ログアウトしました');
      },
      onError: () => {
        toast.error('ログアウトに失敗しました', { duration: 5000 });
      },
      onSettled: () => {
        setIsOpen(false);
      },
    });
  };

  const handleClickMenuItem = (href: string) => {
    setIsOpen(false);
    navigate(href);
  };

  return (
    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>
      <DropdownMenuTrigger className="flex items-center justify-center" asChild>
        <Button
          className="rounded-full"
          variant="ghost"
          size="icon"
          aria-label="アバター画像"
        >
          <Avatar>
            <AvatarImage
              className="bg-foreground/30"
              src={AVATAR_IMAGE_BASE_URL + user?.avatarPath}
              alt="avatar-image"
            />
            <AvatarFallback className="text-lg font-semibold">
              {user?.name.slice(0, 1)}
            </AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-48 p-2" side="bottom" align="end">
        <DropdownMenuLabel>
          <div className="flex items-center gap-x-2">
            <Avatar className="size-8">
              <AvatarImage
                className="bg-foreground/30"
                src={AVATAR_IMAGE_BASE_URL + user?.avatarPath}
                alt="avatar-image"
              />
              <AvatarFallback className="font-semibold">
                {user?.name.slice(0, 1)}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1 overflow-hidden">
              <p className="truncate">{user?.name}</p>
              <p className="text-muted-foreground truncate text-xs font-normal">
                {user?.email}
              </p>
            </div>
          </div>
        </DropdownMenuLabel>
        <DropdownMenuSeparator />
        {MENU_LIST.map((item) => (
          <DropdownMenuItem
            className={cn(
              location.pathname !== '/' &&
                item.href.includes(location.pathname) &&
                'text-primary'
            )}
            key={item.href}
            onClick={() => handleClickMenuItem(item.href)}
          >
            <item.icon className="mr-1" />
            {item.title}
          </DropdownMenuItem>
        ))}
        <DropdownMenuSeparator />
        <DropdownMenuItem onClick={handleClickLogout}>
          <LogOutIcon className="mr-1" />
          ログアウト
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

------------------------------------------------------------
avatar-carousel.tsx

import SwipeArea from '@/components/profile/swipe-area';
import { Avatar, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { AVATAR_IMAGE_BASE_URL } from '@/constants/constants';
import { cn } from '@/lib/utils';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useEffect, useRef, useState } from 'react';

const AVATAR_PATHS = [...Array(41)].map(
  (_, index) => `/avatar${String(index).padStart(2, '0')}.png`
);

type Props = {
  value: string;
  onChange: (avatarPath: string) => void;
};

export default function AvatarCarousel({ value, onChange }: Props) {
  // 座標など調整用の値
  const itemWidth = 70;
  const frameWidth = 192;
  const paddingItem = 2;
  const marginLeft = Math.floor(frameWidth / 2) - Math.floor(itemWidth / 2);

  // 配列の最初と最後の切れ目部分にアイテムを追加しておく
  // 循環参照するときの見た目の調整のため
  const extendedAvatarPaths = [
    ...AVATAR_PATHS.slice(-paddingItem),
    ...AVATAR_PATHS,
    ...AVATAR_PATHS.slice(0, paddingItem),
  ];

  // 引数のvalueが見つからなかった場合、findIndex()は-1を返すので、
  // Math.max()で最小でも0になるようにする
  const defaultIndex = Math.max(
    0,
    AVATAR_PATHS.findIndex((avatarPath) => avatarPath === value)
  );

  // インデックス番号でカルーセルを制御
  // innerIndexは内部的なインデックスとして使用（スクロールアニメーション用）
  const [currentIndex, setCurrentIndex] = useState(defaultIndex);
  const [innerIndex, setInnerIndex] = useState(defaultIndex);

  const [isScrolling, setIsScrolling] = useState(false);
  const carouselRef = useRef<HTMLUListElement>(null);

  // デフォルトのアバターをセット
  useEffect(() => {
    onChange(AVATAR_PATHS[currentIndex]);
  }, [currentIndex, onChange]);

  const handlePrev = () => {
    if (isScrolling) return;
    setIsScrolling(true);
    setInnerIndex(innerIndex - 1);

    const prevIndex =
      (currentIndex - 1 + AVATAR_PATHS.length) % AVATAR_PATHS.length;
    setCurrentIndex(prevIndex);
    onChange(AVATAR_PATHS[prevIndex]);
  };

  const handleNext = () => {
    if (isScrolling) return;
    setIsScrolling(true);
    setInnerIndex(innerIndex + 1);

    const nextIndex = (currentIndex + 1) % AVATAR_PATHS.length;
    setCurrentIndex(nextIndex);
    onChange(AVATAR_PATHS[nextIndex]);
  };

  const handleTransitonEnd = () => {
    setIsScrolling(false);
    setInnerIndex(currentIndex);

    // 循環スクロールのために、先頭から終端などに座標を変化させるとスクロールの
    // ちらつきが発生してしまうので、切れ目の変化ではアニメーションをいったんOffにする
    if (currentIndex === 0 || currentIndex === AVATAR_PATHS.length - 1) {
      setIsScrolling(true);
      carouselRef.current!.style.transitionProperty = 'none';
      setTimeout(() => {
        carouselRef.current!.style.transitionProperty = 'transform';
        setIsScrolling(false);
      }, 75);
    }
  };

  return (
    <div className="flex items-center justify-center">
      <Button
        type="button"
        variant="ghost"
        size="icon"
        aria-label="前へ"
        onClick={handlePrev}
      >
        <ChevronLeft className="size-4" />
      </Button>

      <div
        className="relative w-full overflow-hidden select-none"
        style={{ width: `${frameWidth}px` }}
      >
        <ul
          ref={carouselRef}
          className="flex transition-transform duration-200"
          style={{
            transform: `translateX(-${(innerIndex + paddingItem) * itemWidth}px)`,
            marginLeft: `${marginLeft}px`,
          }}
          onTransitionEnd={handleTransitonEnd}
        >
          {extendedAvatarPaths.map((avatarPath, index) => (
            <li
              key={index}
              className={`flex shrink-0 items-center justify-center`}
              style={{ width: `${itemWidth}px` }}
            >
              <div className="relative flex h-24 items-center">
                <Avatar
                  className={cn(
                    'transition-all duration-200',
                    'size-12 scale-100 opacity-25',
                    avatarPath === AVATAR_PATHS[currentIndex] &&
                      'outline-primary scale-150 opacity-100 outline outline-offset-1'
                  )}
                >
                  <AvatarImage
                    className="bg-foreground/30"
                    src={AVATAR_IMAGE_BASE_URL + avatarPath}
                    alt="avatar-image"
                    draggable={false}
                  />
                </Avatar>
              </div>
            </li>
          ))}
        </ul>
        <SwipeArea
          className="absolute top-0 left-0 h-24 w-full"
          onSwipeLeft={handleNext}
          onSwipeRight={handlePrev}
        />
      </div>

      <Button
        className=""
        type="button"
        variant="ghost"
        size="icon"
        aria-label="次へ"
        onClick={handleNext}
      >
        <ChevronRight className="size-4" />
      </Button>
    </div>
  );
}

------------------------------------------------------------
book-review-item.tsx

import Rating from '@/components/rating';
import ReviewUpdateDialog from '@/components/reviews/review-update-dialog';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { AVATAR_IMAGE_BASE_URL } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { deleteReview, updateReview } from '@/lib/api/review';
import { formatDateJP, formatTime } from '@/lib/utils';
import { useUser } from '@/providers/user-provider';
import { Review, ReviewRequest } from '@/types';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { SquarePenIcon } from 'lucide-react';
import { useState } from 'react';
import { useParams } from 'react-router';

type Props = {
  review: Review;
};

export default function BookReviewItem({ review }: Props) {
  const [isOpen, setIsOpen] = useState(false);
  const { user } = useUser();
  const params = useParams();
  const bookId = params.bookId || '';

  const queryClient = useQueryClient();

  const onSuccess = () => {
    queryClient.invalidateQueries({
      queryKey: queryKeys.book.reviews(bookId, 1),
    });
    queryClient.invalidateQueries({
      queryKey: queryKeys.user.reviewForBook(bookId),
    });
    queryClient.invalidateQueries({
      queryKey: queryKeys.book.details(bookId),
    });
  };

  const onError = (error: Error) => {
    console.error(error);
  };

  const updateMutation = useMutation({
    mutationFn: ({
      reviewId,
      requestBody,
    }: {
      reviewId: number;
      requestBody: ReviewRequest;
    }) => updateReview(reviewId, requestBody),
    onSuccess,
    onError,
  });

  const deleteMutation = useMutation({
    mutationFn: (reviewId: number) => deleteReview(reviewId),
    onSuccess,
    onError,
  });

  return (
    <>
      <div className="p-4">
        <div className="flex flex-col items-center justify-between sm:flex-row">
          <div className="flex w-full items-center gap-x-4">
            <Avatar className="size-16">
              <AvatarImage
                className="bg-foreground/30"
                src={AVATAR_IMAGE_BASE_URL + review.avatarPath}
                alt="avatar-image"
              />
              <AvatarFallback className="font-semibold">
                {review.name.slice(0, 1)}
              </AvatarFallback>
            </Avatar>
            <div>
              <p className="-mb-1 text-lg font-semibold">{review.name}</p>
              <div className="flex items-center">
                <time
                  className="text-muted-foreground mr-2 flex gap-x-1 text-sm leading-8 tracking-wide whitespace-nowrap"
                  dateTime={
                    Date.parse(review.createdAt) ? review.createdAt : ''
                  }
                >
                  <span>{formatDateJP(review.createdAt)}</span>
                  <span>{formatTime(review.createdAt)}</span>
                </time>
                {user?.id === review.userId && (
                  <Button
                    className="text-muted-foreground size-8"
                    variant="ghost"
                    size="icon"
                    aria-label="レビューを編集"
                    onClick={() => setIsOpen(true)}
                  >
                    <SquarePenIcon className="size-4" />
                  </Button>
                )}
              </div>
            </div>
          </div>
          <Rating rating={review.rating} readOnly />
        </div>
        <p className="text-muted-foreground mt-2 sm:pl-20">{review.comment}</p>
      </div>

      <ReviewUpdateDialog
        review={review}
        isOpen={isOpen}
        setIsOpen={setIsOpen}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />
    </>
  );
}

------------------------------------------------------------
book-review-list.tsx

import BookReviewItem from '@/components/reviews/book-review-item';
import { Separator } from '@/components/ui/separator';
import { Review } from '@/types';

type Props = {
  reviews: Review[];
};

export default function BookReviewList({ reviews }: Props) {
  return (
    <ul className="flex flex-col p-3 sm:p-6">
      {reviews.map((review) => (
        <li key={review.id}>
          <Separator className="bg-foreground/10" />
          <article className="animate-in fade-in-0 slide-in-from-top-2 fill-mode-both delay-0 duration-500">
            <BookReviewItem review={review} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
book-reviews-skeleton.tsx

import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { FETCH_REVIEWS_MAX_RESULTS } from '@/constants/constants';

const ReviewItemSkeleton = () => {
  return (
    <div className="p-4">
      <div className="flex flex-col items-center justify-between sm:flex-row">
        <div className="flex w-full items-center gap-x-4">
          <Skeleton className="bg-muted-foreground/5 size-16" />
          <div>
            <div className="-mb-1">
              <Skeleton className="bg-muted-foreground/5 my-2 h-5 w-20" />
            </div>
            <div className="flex items-center">
              <Skeleton className="bg-muted-foreground/5 my-1.5 h-5 w-32" />
              <div className="ml-2 flex w-14"></div>
            </div>
          </div>
        </div>
        <Skeleton className="bg-muted-foreground/5 my-1 h-8 w-40" />
      </div>
      <div className="text-muted-foreground mt-2 sm:pl-20">
        <Skeleton className="bg-muted-foreground/5 h-6 w-full" />
      </div>
    </div>
  );
};

export default function BookReviewsSkeleton() {
  return (
    <div className="mx-auto w-full lg:w-3/4">
      <div className="flex flex-col-reverse items-center justify-end gap-y-4 sm:flex-row sm:gap-x-4 sm:px-6">
        <Skeleton className="bg-muted-foreground/5 h-10 w-44" />
      </div>
      <ul className="flex flex-col p-3 sm:p-6">
        {[...Array<number>(FETCH_REVIEWS_MAX_RESULTS)].map((_, index) => (
          <li key={index}>
            <Separator className="bg-foreground/10" />
            <ReviewItemSkeleton />
          </li>
        ))}
      </ul>
    </div>
  );
}

------------------------------------------------------------
book-reviews.tsx

import ReviewList from '@/components/reviews/book-review-list';
import ReviewCreateDialog from '@/components/reviews/review-create-dialog';
import { Button } from '@/components/ui/button';
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from '@/components/ui/tooltip';
import { queryKeys } from '@/constants/query-keys';
import { getBookReviews } from '@/lib/api/books';
import { createReview } from '@/lib/api/review';
import { getUserReviewForBook } from '@/lib/api/user';
import { useAuth } from '@/providers/auth-provider';
import { Review, ReviewRequest } from '@/types';
import {
  useMutation,
  useQuery,
  useQueryClient,
  useSuspenseQuery,
} from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { useEffect, useState } from 'react';

type Props = {
  bookId: string;
};

export default function BookReviews({ bookId }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const [currentPage, setCurrentPage] = useState(1);
  const [reviews, setReviews] = useState<Review[]>([]);
  const [totalPages, setTotalPages] = useState(0);
  const [isLoading, setIsLoading] = useState(false);

  const { isAuthenticated } = useAuth();

  const { data: initialReviewPage } = useSuspenseQuery({
    queryKey: queryKeys.book.reviews(bookId, 1),
    queryFn: () => getBookReviews(bookId, 1),
  });

  // ログインしていない場合は、enabledオプションを指定して
  // queryFnを呼び出さないようにする（この指定はuseSuspenseQueryでは出来ない模様）
  const { data: review } = useQuery({
    queryKey: queryKeys.user.reviewForBook(bookId),
    queryFn: () => getUserReviewForBook(bookId),
    enabled: isAuthenticated,
    retry: false,
  });

  const queryClient = useQueryClient();

  const createMutation = useMutation({
    mutationFn: (requestBody: ReviewRequest) => createReview(requestBody),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: queryKeys.book.reviews(bookId, 1),
      });
      queryClient.invalidateQueries({
        queryKey: queryKeys.user.reviewForBook(bookId),
      });
      queryClient.invalidateQueries({
        queryKey: queryKeys.book.details(bookId),
      });
    },
    onError: (error: Error) => {
      console.error(error);
    },
  });

  useEffect(() => {
    if (initialReviewPage) {
      setCurrentPage(1);
      setReviews(initialReviewPage.reviews);
      setTotalPages(initialReviewPage.totalPages);
    }
  }, [initialReviewPage]);

  const loadMoreReviews = async () => {
    setIsLoading(true);
    const nextPage = currentPage + 1;
    const nextReviewPage = await getBookReviews(bookId, nextPage);
    setReviews((prevReviews) => [...prevReviews, ...nextReviewPage.reviews]);
    setCurrentPage(nextPage);
    setIsLoading(false);
  };

  return (
    <>
      <div className="mx-auto w-full pb-4 lg:w-3/4">
        <div className="flex flex-col-reverse items-center justify-end gap-y-4 sm:flex-row sm:gap-x-4 sm:px-6">
          <p>レビュー {initialReviewPage.totalItems} 件</p>
          {isAuthenticated ? (
            <Button
              className="w-44 bg-transparent"
              variant="outline"
              disabled={!!review}
              onClick={() => setIsOpen(true)}
            >
              {review ? 'レビュー済み' : 'レビューする'}
            </Button>
          ) : (
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  className="hover:border-primary/50 w-44 cursor-default bg-transparent opacity-50 hover:bg-transparent"
                  variant="outline"
                >
                  レビューする
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                ログインしてこの本の「レビュー」を書きましょう
              </TooltipContent>
            </Tooltip>
          )}
        </div>

        <ReviewList reviews={reviews} />

        {currentPage < totalPages && (
          <div className="flex justify-center">
            <Button
              className="text-muted-foreground w-44"
              variant="ghost"
              disabled={isLoading}
              onClick={loadMoreReviews}
            >
              {isLoading ? (
                <Loader2Icon className="animate-spin" />
              ) : (
                'もっと見る'
              )}
            </Button>
          </div>
        )}
      </div>

      <ReviewCreateDialog
        bookId={bookId}
        page={currentPage}
        isOpen={isOpen}
        setIsOpen={setIsOpen}
        createMutation={createMutation}
      />
    </>
  );
}

------------------------------------------------------------
my-review-item.tsx

import Rating from '@/components/rating';
import ReviewUpdateDialog from '@/components/reviews/review-update-dialog';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { BOOK_IMAGE_BASE_URL } from '@/constants/constants';
import { queryKeys } from '@/constants/query-keys';
import { useSearchFilters } from '@/hooks/use-search-filters';
import { deleteReview, updateReview } from '@/lib/api/review';
import { getUserReviews } from '@/lib/api/user';
import { formatDateJP, formatTime } from '@/lib/utils';
import { Review, ReviewRequest } from '@/types';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { SquarePenIcon } from 'lucide-react';
import { useState } from 'react';
import { Link } from 'react-router';

type Props = {
  review: Review;
};

export default function MyReviewItem({ review }: Props) {
  const [isOpen, setIsOpen] = useState(false);

  const { page, updateQueryParams } = useSearchFilters();
  const queryClient = useQueryClient();

  const updateMutation = useMutation({
    mutationFn: ({
      reviewId,
      requestBody,
    }: {
      reviewId: number;
      requestBody: ReviewRequest;
    }) => updateReview(reviewId, requestBody),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: queryKeys.user.reviews(page),
      });
    },
    onError: (error: Error) => {
      console.error(error);
    },
  });

  const deleteMutation = useMutation({
    mutationFn: (reviewId: number) => deleteReview(reviewId),
    onSuccess: async () => {
      // ２ページ以降で、そのページの最後の１つを削除した場合は、１ページ戻る
      const reviewPage = await getUserReviews(page);
      if (page >= 2 && reviewPage.reviews.length === 0) {
        queryClient.invalidateQueries({
          queryKey: queryKeys.user.reviews(page - 1),
        });
        updateQueryParams({ page: page - 1 });
        return;
      }

      queryClient.invalidateQueries({
        queryKey: queryKeys.user.reviews(page),
      });
    },
    onError: (error: Error) => {
      console.error(error);
    },
  });

  return (
    <>
      <Card className="p-0">
        <CardContent className="p-0">
          <div className="flex gap-x-3 px-3 py-4">
            <div className="flex min-w-20 justify-center sm:min-w-24">
              <Link to={`/book/${review.book.id}`} className="size-fit">
                <img
                  className="h-24 rounded-xs object-cover sm:h-28"
                  src={BOOK_IMAGE_BASE_URL + review.book.imagePath}
                  alt={review.book.title}
                />
              </Link>
            </div>
            <div className="flex w-full flex-col justify-center">
              <Link to={`/book/${review.book.id}`} className="size-fit">
                <h2 className="hover:text-primary text-base font-semibold sm:text-xl">
                  {review.book.title}
                </h2>
              </Link>
              <div className="mb-2 flex flex-col items-start sm:flex-row sm:items-center">
                <div className="mr-2">
                  <Rating rating={review.rating} readOnly />
                </div>
                <div className="flex flex-wrap items-center">
                  <time
                    className="text-muted-foreground mr-2 flex gap-x-1 text-xs leading-8 tracking-wide whitespace-nowrap sm:text-sm"
                    dateTime={
                      Date.parse(review.createdAt) ? review.createdAt : ''
                    }
                  >
                    <span>{formatDateJP(review.createdAt)}</span>
                    <span>{formatTime(review.createdAt)}</span>
                  </time>
                  <Button
                    className="text-muted-foreground size-8"
                    variant="ghost"
                    size="icon"
                    aria-label="レビューを編集"
                    onClick={() => setIsOpen(true)}
                  >
                    <SquarePenIcon className="size-4" />
                  </Button>
                </div>
              </div>
              <p className="text-muted-foreground">{review.comment}</p>
            </div>
          </div>
        </CardContent>
      </Card>

      <ReviewUpdateDialog
        review={review}
        isOpen={isOpen}
        setIsOpen={setIsOpen}
        updateMutation={updateMutation}
        deleteMutation={deleteMutation}
      />
    </>
  );
}

------------------------------------------------------------
my-review-list.tsx

import MyReviewItem from '@/components/reviews/my-review-item';
import { Review } from '@/types';

type Props = {
  reviews: Review[];
};

export default function MyReviewList({ reviews }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {reviews.map((review) => (
        <li key={review.id}>
          <article>
            <MyReviewItem review={review} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
my-reviews-skeleton.tsx

import { Card, CardContent } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';

export default function MyReviewsSkeleton() {
  return (
    <>
      <div className="flex flex-col gap-y-4 pb-4">
        <p className="text-right">
          <span className="text-muted-foreground mr-4 ml-1 text-sm">件</span>
        </p>
        <ul className="flex flex-col gap-y-2">
          {[...Array<number>(5)].map((_, index) => (
            <li key={index}>
              <Card className="p-0">
                <CardContent className="p-4">
                  <div className="flex gap-x-4">
                    <div className="flex min-w-20 justify-center sm:min-w-24">
                      <Skeleton className="bg-muted-foreground/5 h-24 w-20 rounded-xs object-cover sm:h-28" />
                    </div>
                    <div className="flex flex-col gap-y-2">
                      <Skeleton className="bg-muted-foreground/5 h-6 w-64 sm:h-7" />
                      <div className="flex flex-col gap-y-1">
                        <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-96" />
                        <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-80" />
                        <Skeleton className="bg-muted-foreground/5 my-1 h-4 w-64" />
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
}

------------------------------------------------------------
my-reviews.tsx

import MyReviewList from '@/components/reviews/my-review-list';
import SearchPagination from '@/components/search-pagination';
import { queryKeys } from '@/constants/query-keys';
import { getUserReviews } from '@/lib/api/user';
import { useSuspenseQuery } from '@tanstack/react-query';

type Props = {
  page: number;
};

export default function MyReviews({ page }: Props) {
  const { data: reviewPage } = useSuspenseQuery({
    queryKey: queryKeys.user.reviews(page),
    queryFn: () => getUserReviews(page),
  });

  return (
    <div className="flex flex-col gap-y-4 pb-4">
      <p className="text-right">
        {reviewPage.totalItems}
        <span className="text-muted-foreground mr-4 ml-1 text-sm">件</span>
      </p>
      <MyReviewList reviews={reviewPage.reviews} />
      <SearchPagination totalPages={reviewPage.totalPages} />
    </div>
  );
}

------------------------------------------------------------
review-create-dialog.tsx

import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { ReviewCreateMutation, ReviewRequest } from '@/types';
import { Loader2Icon } from 'lucide-react';
import { useEffect, useState } from 'react';
import { toast } from 'sonner';

type Props = {
  bookId: string;
  page: number;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  createMutation: ReviewCreateMutation;
};

export default function ReviewCreateDialog({
  bookId,
  isOpen,
  setIsOpen,
  createMutation,
}: Props) {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');

  const { confirmDialog } = useConfirmDialog();

  useEffect(() => {
    if (isOpen) {
      setRating(0);
      setComment('');
    }
  }, [isOpen]);

  const handleClickCancel = async () => {
    if (comment) {
      const { isCancel } = await confirmDialog({
        icon: 'question',
        title: 'キャンセルして閉じますか？',
        message: 'コメントはまだ投稿していません。',
        persistent: true,
      });
      if (isCancel) return;
    }
    setIsOpen(false);
  };

  const handleClickPost = async () => {
    if (rating === 0) {
      const { isCancel } = await confirmDialog({
        icon: 'question',
        title: 'このまま投稿しますか？',
        message: '星の数が「0」のままです。',
        actionLabel: '投稿',
      });
      if (isCancel) return;
    }

    const requestBody: ReviewRequest = { bookId, comment, rating };
    createMutation.mutate(requestBody, {
      onSuccess: () => {
        toast.success('レビューを投稿しました');
      },
      onError: () => {
        toast.error('レビュー投稿に失敗しました', { duration: 5000 });
      },
      onSettled: () => {
        setIsOpen(false);
      },
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 max-w-[600px] min-w-[360px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
      >
        <div className="flex items-start justify-between">
          <div>
            <DialogTitle className="leading-10 font-semibold">
              レビュー
            </DialogTitle>
            <DialogDescription className="text-muted-foreground text-xs sm:text-sm">
              素敵な感想を伝えましょう！
            </DialogDescription>
          </div>
          <div>
            <Rating rating={rating} onChange={setRating} />
            <p className="text-muted-foreground text-center text-xs sm:text-sm">
              星をクリックして決定
            </p>
          </div>
        </div>

        <Textarea
          spellCheck={false}
          value={comment}
          onChange={(e) => setComment(e.currentTarget.value)}
        />

        <DialogFooter className="gap-y-4 sm:gap-y-0">
          <Button
            className="min-w-24"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24"
            disabled={comment === '' || createMutation.isPending}
            onClick={handleClickPost}
          >
            {createMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '投稿'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
review-update-dialog.tsx

import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import {
  Review,
  ReviewDeleteMutation,
  ReviewRequest,
  ReviewUpdateMutation,
} from '@/types';
import { Loader2Icon } from 'lucide-react';
import { useEffect, useState } from 'react';
import { toast } from 'sonner';

type Props = {
  review: Review;
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  updateMutation: ReviewUpdateMutation;
  deleteMutation: ReviewDeleteMutation;
};

export default function ReviewUpdateDialog({
  review,
  isOpen,
  setIsOpen,
  updateMutation,
  deleteMutation,
}: Props) {
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const { confirmDialog } = useConfirmDialog();

  useEffect(() => {
    if (isOpen) {
      setRating(review.rating);
      setComment(review.comment);
    }
  }, [isOpen, review.comment, review.rating]);

  const handleClickCancel = async () => {
    setIsOpen(false);
  };

  const handleClickDelete = async () => {
    const { isCancel } = await confirmDialog({
      icon: 'warning',
      title: '削除しますか？',
      message: '削除すると元に戻りません。',
      actionLabel: '削除',
    });
    if (isCancel) return;

    deleteMutation.mutate(review.id, {
      onSuccess: () => {
        toast.success('レビューを削除しました');
      },
      onError: () => {
        toast.error('レビューの削除に失敗しました', { duration: 5000 });
      },
      onSettled: () => {
        setIsOpen(false);
      },
    });
  };

  const handleClickUpdate = () => {
    const requestBody: ReviewRequest = {
      bookId: review.bookId,
      comment,
      rating,
    };

    updateMutation.mutate(
      { reviewId: review.id, requestBody },
      {
        onSuccess: () => {
          toast.success('レビューを更新しました');
        },
        onError: () => {
          toast.error('レビューの更新に失敗しました', { duration: 5000 });
        },
        onSettled: () => {
          setIsOpen(false);
        },
      }
    );
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent
        className="w-3/4 max-w-[600px] min-w-[360px] p-4 sm:p-6"
        onEscapeKeyDown={handleClickCancel}
        onPointerDownOutside={handleClickCancel}
      >
        <div className="flex items-start justify-between">
          <div>
            <DialogTitle className="leading-10 font-semibold">
              レビュー
            </DialogTitle>
            <DialogDescription className="text-muted-foreground text-xs sm:text-sm">
              レビュー内容を編集できます。
            </DialogDescription>
          </div>
          <div>
            <Rating rating={rating} onChange={setRating} />
            <p className="text-muted-foreground text-center text-xs sm:text-sm">
              星をクリックして決定
            </p>
          </div>
        </div>

        <Textarea
          spellCheck={false}
          value={comment}
          onChange={(e) => setComment(e.currentTarget.value)}
        />

        <DialogFooter className="gap-y-4 sm:gap-y-0">
          <Button
            className="min-w-24"
            variant="ghost"
            onClick={handleClickCancel}
          >
            キャンセル
          </Button>
          <Button
            className="min-w-24"
            variant="outline"
            disabled={deleteMutation.isPending}
            onClick={handleClickDelete}
          >
            {deleteMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '削除'
            )}
          </Button>
          <Button
            className="min-w-24"
            disabled={comment === '' || updateMutation.isPending}
            onClick={handleClickUpdate}
          >
            {updateMutation.isPending ? (
              <Loader2Icon className="animate-spin" />
            ) : (
              '更新'
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
button.tsx

import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import * as React from 'react';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        destructive:
          //★ 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          //★ 'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
          'border border-primary/50 text-primary bg-transparent hover:bg-primary/20 hover:border-primary',
        secondary:
          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
        ghost:
          //★ 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
          'bg-transparent text-foreground hover:bg-primary/20 hover:text-primary',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : 'button';

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };

------------------------------------------------------------
confirm-dialog.tsx

import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import {
  CONFIRM_DIALOG_EVENT,
  ConfirmDialogOptions,
} from '@/hooks/use-confirm-dialog';
import { cn } from '@/lib/utils';
import {
  AlertTriangleIcon,
  CheckCircle2Icon,
  HelpCircleIcon,
  InfoIcon,
} from 'lucide-react';
import { useEffect, useRef, useState } from 'react';

const ICON_COMPONENTS = {
  info: InfoIcon,
  question: HelpCircleIcon,
  warning: AlertTriangleIcon,
  check: CheckCircle2Icon,
};

const DEFAULT_OPTION_VALUE: ConfirmDialogOptions = {
  icon: 'info',
  title: '',
  message: '',
  actionLabel: 'OK',
  actionOnly: false,
  persistent: false,
  showInput: false,
  inputLabel: '',
  inputPlaceholder: '',
  inputRows: 1,
};

export default function ConfirmDialog() {
  const [isOpen, setIsOpen] = useState(false);
  const [options, setOptions] =
    useState<ConfirmDialogOptions>(DEFAULT_OPTION_VALUE);
  const [isPersistentAnimation, setIsPersistentAnimation] = useState(false);

  const refTextarea = useRef<HTMLTextAreaElement>(null);

  const IconComponent = ICON_COMPONENTS[options.icon];

  // hooksから呼ぶためにイベントリスナー登録
  useEffect(() => {
    const handleEvent = (event: CustomEvent<ConfirmDialogOptions>) => {
      setIsOpen(true);
      setOptions({ ...DEFAULT_OPTION_VALUE, ...event.detail });
    };
    document.addEventListener(
      CONFIRM_DIALOG_EVENT,
      handleEvent as EventListener
    );
    return () => {
      document.removeEventListener(
        CONFIRM_DIALOG_EVENT,
        handleEvent as EventListener
      );
    };
  }, []);

  const handleCloseDialog = () => {
    // アニメーションフラグ（閉じれないことを伝えるためにぶるっとする）
    if (options.persistent) {
      setIsPersistentAnimation(true);
      setTimeout(() => {
        setIsPersistentAnimation(false);
      }, 50);
      return;
    }
    handleClickCancel();
  };

  const handleClickAction = () => {
    setIsOpen(false);
    options.resolve?.({
      isAction: true,
      isCancel: false,
      text: refTextarea.current?.value || '',
    });
  };

  const handleClickCancel = () => {
    setIsOpen(false);
    options.resolve?.({
      isAction: false,
      isCancel: true,
      text: '',
    });
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleCloseDialog}>
      <DialogContent
        className={cn(
          'w-[360px] transition-transform [transition-duration:25ms] ease-in-out sm:w-[400px]',
          isPersistentAnimation && 'scale-[1.02] transform'
        )}
        onEscapeKeyDown={handleCloseDialog}
        onPointerDownOutside={handleCloseDialog}
      >
        <DialogHeader>
          <DialogTitle className="my-2 flex items-center">
            <IconComponent
              className={cn(
                'mr-3 min-w-fit',
                options.icon === 'warning' && 'text-destructive/60'
              )}
            />
            <p className="leading-6">{options.title}</p>
          </DialogTitle>
          {options.message && (
            <DialogDescription className="pt-2 text-left">
              {options.message}
            </DialogDescription>
          )}
        </DialogHeader>

        {options.showInput && (
          <div className="mb-4 grid w-full items-center gap-1.5">
            <p className="text-xs">{options.inputLabel}</p>
            <Textarea
              ref={refTextarea}
              className="min-h-4 resize-none"
              placeholder={options.inputPlaceholder}
              rows={options.inputRows}
            />
          </div>
        )}

        <DialogFooter className="flex justify-end gap-y-4 sm:gap-y-0">
          {!options.actionOnly && (
            <Button
              className="min-w-24"
              variant="ghost"
              onClick={handleClickCancel}
            >
              キャンセル
            </Button>
          )}
          <Button
            className="min-w-24"
            variant={options.icon === 'warning' ? 'destructive' : 'default'}
            onClick={handleClickAction}
          >
            {options.actionLabel}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

------------------------------------------------------------
form-input.tsx

import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { cn } from '@/lib/utils';
import { Label } from '@radix-ui/react-label';
import { EyeIcon, EyeOffIcon } from 'lucide-react';
import React, { useId, useState } from 'react';

type Props = React.ComponentPropsWithRef<typeof Input> & {
  label: string;
  errorMessage?: string;
};

export default function FormInput({
  label,
  errorMessage,
  className,
  id,
  name,
  type,
  ref,
  ...props
}: Props) {
  const [isShownPassword, setIsShownPassword] = useState(false);
  const generatedId = useId();
  const inputId = id ?? generatedId;
  const inputName = name ?? inputId;
  const inputType = type ?? 'text';

  const actualType =
    type === 'password' && isShownPassword ? 'text' : inputType;

  return (
    <div>
      <Label className="text-xs" htmlFor={inputId}>
        {label}
      </Label>
      <div className="relative">
        <Input
          ref={ref}
          className={cn(
            className,
            'border-foreground/20 my-2',
            errorMessage && 'border-destructive'
          )}
          type={actualType}
          id={inputId}
          name={inputName}
          {...props}
        />
        {inputType === 'password' && (
          <Button
            className="hover:text-foreground absolute top-0 right-0 hover:bg-transparent"
            variant="ghost"
            size="icon"
            aria-label={
              isShownPassword ? 'パスワードを非表示' : 'パスワードを表示'
            }
            type="button"
            onClick={() => setIsShownPassword(!isShownPassword)}
          >
            {isShownPassword ? (
              <EyeIcon className="size-4" />
            ) : (
              <EyeOffIcon className="size-4" />
            )}
          </Button>
        )}
      </div>

      {errorMessage && (
        <p className="text-destructive text-xs">{errorMessage}</p>
      )}
    </div>
  );
}

------------------------------------------------------------
pagination.tsx

import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { HTMLAttributes } from 'react';

/**
 * ページネーションのためのページ番号リストを作成する
 * createPageNumbers(1, 1);  // [1]
 * createPageNumbers(2, 3);  // [1, 2, 3]
 * createPageNumbers(3, 5);  // [1, 2, 3, 4, 5]
 * createPageNumbers(1, 7);  // [1, 2, 3, 4, 5, 6, 7]
 * createPageNumbers(1, 10); // [1, 2, 3, 4, 5, 0, 10]
 * createPageNumbers(3, 10); // [1, 2, 3, 4, 5, 0, 10]
 * createPageNumbers(5, 10); // [1, 0, 4, 5, 6, 0, 10]
 * createPageNumbers(6, 10); // [1, 0, 5, 6, 7, 0, 10]
 * createPageNumbers(9, 10); // [1, 0, 6, 7, 8, 9, 10]
 * createPageNumbers(7, 15); // [1, 0, 6, 7, 8, 0, 15]
 */
const createPageNumbers = (page: number, total: number) => {
  // ページ数が7以下なら全て表示
  if (total <= 7) {
    return Array.from({ length: total }, (_, i) => i + 1);
  }

  const pages: number[] = [];

  pages.push(1); // 最初のページは常に表示

  if (page <= 4) {
    // 現在ページが前方（1〜4）の場合
    pages.push(2, 3, 4, 5);
    pages.push(0); // 省略
  } else if (page >= total - 3) {
    // 現在ページが後方（total-3〜total）の場合
    pages.push(0); // 省略
    pages.push(total - 4, total - 3, total - 2, total - 1);
  } else {
    // 現在ページが中間の場合
    pages.push(0); // 前省略
    pages.push(page - 1, page, page + 1);
    pages.push(0); // 後省略
  }

  pages.push(total); // 最後のページは常に表示

  return pages;
};

type Props = HTMLAttributes<HTMLDivElement> & {
  total: number;
  page: number;
  onChangePage: (page: number) => void;
};

export default function Pagination({
  total,
  page,
  onChangePage,
  className,
  ...props
}: Props) {
  const pageNumbers = createPageNumbers(page, total);

  return (
    <div className={cn('flex', className)} {...props}>
      <Button
        className="size-8"
        variant="ghost"
        size="icon"
        aria-label="前のページへ"
        disabled={page <= 1}
        onClick={() => onChangePage(page - 1)}
      >
        <ChevronLeft className="size-5" />
      </Button>

      <ul className="flex">
        {pageNumbers.map((pageNumber, index) => (
          <li key={`${pageNumber}-${index}`}>
            {pageNumber === 0 ? (
              <div className="size-8 text-center">...</div>
            ) : (
              <Button
                className="size-8"
                variant={page === pageNumber ? 'outline' : 'ghost'}
                size="icon"
                aria-label="ページ番号"
                onClick={() => {
                  if (page !== pageNumber) {
                    onChangePage(pageNumber);
                  }
                }}
              >
                {pageNumber}
              </Button>
            )}
          </li>
        ))}
      </ul>

      <Button
        className="size-8"
        variant="ghost"
        size="icon"
        aria-label="次のページへ"
        disabled={page >= total}
        onClick={() => onChangePage(page + 1)}
      >
        <ChevronRight className="size-5" />
      </Button>
    </div>
  );
}

------------------------------------------------------------
search-input.tsx

import { Input } from '@/components/ui/input';
import { useSearchFilters } from '@/hooks/use-search-filters';
import { Search } from 'lucide-react';
import { FormEvent, useEffect, useState } from 'react';
import { useNavigate } from 'react-router';

export default function SearchInput() {
  const { q, updateQueryParams } = useSearchFilters();
  const navigate = useNavigate();
  const [query, setQuery] = useState(q);

  useEffect(() => {
    setQuery(q);
  }, [q]);

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const newQuery = query.trim();
    if (!newQuery) return;

    // `/search` 以外のページなら遷移する。それ以外はクエリパラメータだけ更新
    if (location.pathname !== '/search') {
      navigate(`/search?q=${encodeURIComponent(newQuery)}`);
    } else {
      updateQueryParams({ q: newQuery, page: 1 });
    }
  };

  return (
    <div className="w-44 sm:w-64">
      <form className="relative w-full" onSubmit={handleSubmit}>
        <Input
          className="border-foreground/20 bg-background/20 pr-4 pl-8"
          type="search"
          placeholder="タイトルで検索"
          name="query"
          autoComplete="off"
          spellCheck="false"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        <Search className="absolute top-2.5 left-2.5 size-4" />
      </form>
    </div>
  );
}

------------------------------------------------------------
bookmarks.ts

import { customFetch } from '@/lib/api/fetch-client';
import { BookmarkRequest } from '@/types';

// ブックマーク追加
export const createBookmark = async (requestBody: BookmarkRequest) => {
  try {
    const endpoint = `/bookmarks`;
    const options: RequestInit = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('ブックマークの作成に失敗しました。');
  }
};

// ブックマーク更新
export const updateBookmark = async (
  bookmarkId: number,
  requestBody: BookmarkRequest
) => {
  try {
    const endpoint = `/bookmarks/${bookmarkId}`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('ブックマークの更新に失敗しました。');
  }
};

// ブックマーク削除
export const deleteBookmark = async (bookmarkId: number) => {
  try {
    const endpoint = `/bookmarks/${bookmarkId}`;
    const options: RequestInit = { method: 'DELETE' };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('ブックマークの削除に失敗しました。');
  }
};

------------------------------------------------------------
review.ts

import { customFetch } from '@/lib/api/fetch-client';
import { ReviewRequest } from '@/types';

// レビュー作成
export const createReview = async (requestBody: ReviewRequest) => {
  try {
    const endpoint = `/reviews`;
    const options: RequestInit = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('レビューの作成に失敗しました。');
  }
};

// レビュー更新
export const updateReview = async (
  reviewId: number,
  requestBody: ReviewRequest
) => {
  try {
    const endpoint = `/reviews/${reviewId}`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('レビューの更新に失敗しました。');
  }
};

// レビュー削除
export const deleteReview = async (reviewId: number) => {
  try {
    const endpoint = `/reviews/${reviewId}`;
    const options: RequestInit = { method: 'DELETE' };
    await customFetch(endpoint, options);
  } catch (error) {
    console.error(error);
    throw new Error('レビューの削除に失敗しました。');
  }
};

------------------------------------------------------------
theme-style-provider.tsx

import {
  createContext,
  ReactNode,
  useContext,
  useEffect,
  useState,
} from 'react';

export type ThemeStyle =
  | 'default'
  | 'claude'
  | 't3-chat'
  | 'supabase'
  | 'twitter'
  | 'vercel'
  | 'notebook'
  | 'perpetuity'
  | 'vintage-paper';

type ThemeStyleProviderProps = {
  children: ReactNode;
  defaultTheme?: ThemeStyle;
  storageKey?: string;
};

type ThemeStyleContextState = {
  themeStyle: ThemeStyle;
  setThemeStyle: (theme: ThemeStyle) => void;
};

const initialState: ThemeStyleContextState = {
  themeStyle: 'default',
  setThemeStyle: () => null,
};

const ThemeStyleContext = createContext<ThemeStyleContextState>(initialState);

export function ThemeStyleProvider({
  children,
  defaultTheme = 'default',
  storageKey = 'vite-ui-theme-style',
  ...props
}: ThemeStyleProviderProps) {
  const [themeStyle, setThemeStyle] = useState<ThemeStyle>(() => {
    return (localStorage.getItem(storageKey) as ThemeStyle) || defaultTheme;
  });

  useEffect(() => {
    const existingLink = document.getElementById('theme-stylesheet');
    if (existingLink) {
      document.head.removeChild(existingLink);
    }

    const link = document.createElement('link');
    link.id = 'theme-stylesheet';
    link.rel = 'stylesheet';
    link.href = `/theme-styles/${themeStyle}-theme.css`;

    document.head.appendChild(link);
  }, [themeStyle]);

  const value = {
    themeStyle,
    setThemeStyle: (themeStyle: ThemeStyle) => {
      localStorage.setItem(storageKey, themeStyle);
      setThemeStyle(themeStyle);
    },
  };

  return (
    <ThemeStyleContext.Provider {...props} value={value}>
      {children}
    </ThemeStyleContext.Provider>
  );
}

export const useThemeStyle = () => {
  const context = useContext(ThemeStyleContext);

  if (context === undefined)
    throw new Error('useThemeStyle must be used within a ThemeStyleProvider');

  return context;
};

------------------------------------------------------------
book/[bookId]/page.tsx

import BookDetail from '@/components/book-detail/book-detail';
import BookDetailSkeleton from '@/components/book-detail/book-detail-skeleton';
import BookReviews from '@/components/reviews/book-reviews';
import BookReviewsSkeleton from '@/components/reviews/book-reviews-skeleton';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { useParams } from 'react-router';

export default function Page() {
  const params = useParams();
  const bookId = params.bookId || '';

  return (
    <>
      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<BookDetailSkeleton />}>
          <BookDetail bookId={bookId} />
        </Suspense>
      </ErrorBoundary>

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<BookReviewsSkeleton />}>
          <BookReviews bookId={bookId} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
login

import FormInput from '@/components/form-input';
import Logo from '@/components/layout/logo';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { APP_TITLE } from '@/constants/constants';
import { useFieldValidation } from '@/hooks/use-field-validation';
import { useAuth } from '@/providers/auth-provider';
import { LoginRequest } from '@/types';
import { useMutation } from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { FormEvent } from 'react';
import { Link, useLocation, useNavigate } from 'react-router';
import { toast } from 'sonner';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const email = useFieldValidation<HTMLInputElement>();
  const password = useFieldValidation<HTMLInputElement>();

  const location = useLocation();
  const navigate = useNavigate();
  const { login } = useAuth();

  const loginMutation = useMutation({
    mutationFn: (requestBody: LoginRequest) => login(requestBody),
    onSuccess: () => {},
    onError: (error) => {
      console.error(error);
    },
  });

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const isEmailValid = email.validate.email();
    const isPasswordValid = password.validate.password();

    if (!isEmailValid || !isPasswordValid) {
      return;
    }

    const requestBody: LoginRequest = {
      email: email.getValue(),
      password: password.getValue(),
    };

    loginMutation.mutate(requestBody, {
      onSuccess: () => {
        const pathname = location.state?.from?.pathname || '/';
        const query = location.state?.from?.search || '';
        navigate(pathname + query, { replace: true });
      },
      onError: () => {
        toast.error('ログインできませんでした', {
          description: 'メールアドレスまたはパスワードが違います。',
          duration: 5000,
        });
      },
    });
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-6 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">ログイン</h1>
        <Card className="w-80 p-6 sm:w-96 sm:p-10">
          <CardContent className="p-0">
            <form
              className="flex w-full flex-col gap-y-4"
              onSubmit={handleSubmit}
            >
              <FormInput
                label="メールアドレス"
                ref={email.ref}
                errorMessage={email.errorMessage}
                autoComplete="off"
                spellCheck="false"
              />

              <FormInput
                label="パスワード"
                ref={password.ref}
                errorMessage={password.errorMessage}
                type="password"
              />

              <Button
                className="mt-6 w-full"
                type="submit"
                disabled={loginMutation.isPending}
              >
                {loginMutation.isPending ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  'ログイン'
                )}
              </Button>
            </form>

            <div className="mt-6 flex justify-center gap-x-1 text-xs">
              <p className="text-muted-foreground">
                アカウントをお持ちでない方はこちら
              </p>
              <Link to="/signup" className="text-primary hover:underline">
                新規登録
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
my-reviews

import MyReviews from '@/components/reviews/my-reviews';
import MyReviewsSkeleton from '@/components/reviews/my-reviews-skeleton';
import { Separator } from '@/components/ui/separator';
import { APP_TITLE } from '@/constants/constants';
import { useSearchFilters } from '@/hooks/use-search-filters';
import ErrorElement from '@/routes/error-element';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const { page } = useSearchFilters();

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="m-4 flex h-10 items-center">
        <h1 className="font-bold">マイレビュー</h1>
      </div>

      <Separator className="bg-foreground/10 my-4" />

      <ErrorBoundary fallback={<ErrorElement />}>
        <Suspense fallback={<MyReviewsSkeleton />}>
          <MyReviews page={page} />
        </Suspense>
      </ErrorBoundary>
    </>
  );
}

------------------------------------------------------------
change-email

import FormInput from '@/components/form-input';
import Logo from '@/components/layout/logo';
import { Button, buttonVariants } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { APP_TITLE } from '@/constants/constants';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useFieldValidation } from '@/hooks/use-field-validation';
import { updateUserEmail } from '@/lib/api/user';
import { cn } from '@/lib/utils';
import { useAuth } from '@/providers/auth-provider';
import { useUser } from '@/providers/user-provider';
import { UpdateUserEmail } from '@/types';
import { useMutation } from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { FormEvent } from 'react';
import { Link, useNavigate } from 'react-router';
import { toast } from 'sonner';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const email = useFieldValidation<HTMLInputElement>();
  const password = useFieldValidation<HTMLInputElement>();

  const navigate = useNavigate();

  const { logout } = useAuth();
  const { user } = useUser();

  const { confirmDialog } = useConfirmDialog();

  const updateMutation = useMutation({
    mutationFn: (requestBody: UpdateUserEmail) => updateUserEmail(requestBody),
    onSuccess: async () => {
      await logout();
      navigate('/login');
    },
    onError: (error) => {
      console.error(error);
    },
  });

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const isEmailValid = email.validate.email();
    const isPasswordValid = password.validate.password();

    if (!isEmailValid || !isPasswordValid) {
      return;
    }

    const { isCancel } = await confirmDialog({
      icon: 'question',
      title: '本当に変更しますか？',
      message: 'メールアドレス変更後、一度ログアウトします。',
    });
    if (isCancel) return;

    const requestBody: UpdateUserEmail = {
      email: email.getValue(),
      password: password.getValue(),
    };

    updateMutation.mutate(requestBody, {
      onSuccess: async () => {
        toast.success('メールアドレスを変更し、ログアウトしました', {
          duration: 5000,
        });
      },
      onError: () => {
        toast.error('メールアドレスを変更できませんでした', {
          description: '入力内容を確認してください。',
          duration: 5000,
        });
      },
    });
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-6 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">メールアドレス変更</h1>
        <Card className="w-80 sm:w-96">
          <CardContent className="p-6 sm:px-10">
            <form
              className="flex w-full flex-col gap-y-4"
              onSubmit={handleSubmit}
            >
              <FormInput
                label="現在のメールアドレス"
                value={user?.email}
                readOnly
              />

              <FormInput
                label="新しいメールアドレス"
                ref={email.ref}
                errorMessage={email.errorMessage}
                autoComplete="off"
                spellCheck="false"
              />

              <FormInput
                label="現在のパスワード"
                ref={password.ref}
                errorMessage={password.errorMessage}
                type="password"
              />

              <Button
                className="mt-6 w-full"
                type="submit"
                disabled={updateMutation.isPending}
              >
                {updateMutation.isPending ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  '変更'
                )}
              </Button>

              <Link
                className={cn(
                  buttonVariants({ variant: 'outline' }),
                  'w-full bg-transparent'
                )}
                to="/profile"
              >
                キャンセル
              </Link>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
change-password

import FormInput from '@/components/form-input';
import Logo from '@/components/layout/logo';
import { Button, buttonVariants } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { APP_TITLE } from '@/constants/constants';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useFieldValidation } from '@/hooks/use-field-validation';
import { updateUserPassword } from '@/lib/api/user';
import { cn } from '@/lib/utils';
import { UpdateUserPassword } from '@/types';
import { useMutation } from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { FormEvent } from 'react';
import { Link, useNavigate } from 'react-router';
import { toast } from 'sonner';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const currentPassword = useFieldValidation<HTMLInputElement>();
  const newPassword = useFieldValidation<HTMLInputElement>();
  const confirmPassword = useFieldValidation<HTMLInputElement>();

  const navigate = useNavigate();

  const { confirmDialog } = useConfirmDialog();

  const updateMutation = useMutation({
    mutationFn: (requestBody: UpdateUserPassword) =>
      updateUserPassword(requestBody),
    onSuccess: () => {
      navigate('/profile');
    },
    onError: (error) => {
      console.error(error);
    },
  });

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const isCurrentPasswordValid = currentPassword.validate.password();
    const isNewPasswordValid = newPassword.validate.password();
    const isConfirmPasswordValid = confirmPassword.validate.confirmPassword(
      newPassword.getValue()
    );

    if (
      !isCurrentPasswordValid ||
      !isNewPasswordValid ||
      !isConfirmPasswordValid
    ) {
      return;
    }

    const { isCancel } = await confirmDialog({
      icon: 'question',
      title: '本当に変更しますか？',
      message: 'パスワードを変更します。',
    });
    if (isCancel) return;

    const requestBody: UpdateUserPassword = {
      currentPassword: currentPassword.getValue(),
      newPassword: newPassword.getValue(),
      confirmPassword: confirmPassword.getValue(),
    };

    updateMutation.mutate(requestBody, {
      onSuccess: () => {
        toast.success('パスワードを変更しました');
      },
      onError: () => {
        toast.error('パスワードを変更できませんでした', {
          description: '入力内容を確認してください。',
          duration: 5000,
        });
      },
    });
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-6 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">パスワード変更</h1>
        <Card className="w-80 sm:w-96">
          <CardContent className="p-6 sm:px-10">
            <form
              className="flex w-full flex-col gap-y-4"
              onSubmit={handleSubmit}
            >
              <FormInput
                label="現在のパスワード"
                ref={currentPassword.ref}
                errorMessage={currentPassword.errorMessage}
                type="password"
              />

              <FormInput
                label="新しいパスワード"
                ref={newPassword.ref}
                errorMessage={newPassword.errorMessage}
                type="password"
              />

              <FormInput
                label="新しいパスワード（確認用）"
                ref={confirmPassword.ref}
                errorMessage={confirmPassword.errorMessage}
                type="password"
              />

              <Button
                className="mt-6 w-full"
                type="submit"
                disabled={updateMutation.isPending}
              >
                {updateMutation.isPending ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  '変更'
                )}
              </Button>

              <Link
                className={cn(
                  buttonVariants({ variant: 'outline' }),
                  'w-full bg-transparent'
                )}
                to="/profile"
              >
                キャンセル
              </Link>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
change-user-info

import FormInput from '@/components/form-input';
import Logo from '@/components/layout/logo';
import AvatarCarousel from '@/components/profile/avatar-carousel';
import { Button, buttonVariants } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { APP_TITLE } from '@/constants/constants';
import { useFieldValidation } from '@/hooks/use-field-validation';
import { updateUserProfile } from '@/lib/api/user';
import { cn } from '@/lib/utils';
import { useUser } from '@/providers/user-provider';
import { UpdateUserProfile } from '@/types';
import { useMutation } from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { FormEvent, useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router';
import { toast } from 'sonner';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const name = useFieldValidation<HTMLInputElement>();

  const navigate = useNavigate();

  const { user, setCurrentUser } = useUser();

  const [avatarPath, setAvatarPath] = useState(user?.avatarPath || '');

  const updateMutation = useMutation({
    mutationFn: (requestBody: UpdateUserProfile) =>
      updateUserProfile(requestBody),
    onSuccess: () => {
      navigate('/profile');
    },
    onError: (error) => {
      console.error(error);
    },
  });

  useEffect(() => {
    if (name.ref.current && user) {
      name.ref.current.value = user.name || '';
    }
  }, [name.ref, user]);

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const isNameValid = name.validate.name();
    if (!isNameValid) {
      return;
    }

    const requestBody: UpdateUserProfile = {
      name: name.getValue(),
      avatarPath,
    };

    updateMutation.mutate(requestBody, {
      onSuccess: async () => {
        await setCurrentUser();
        toast.success('ユーザー情報を変更しました');
      },
      onError: () => {
        toast.error('ユーザー情報を変更できませんでした', {
          description: '入力内容を確認してください。',
          duration: 5000,
        });
      },
    });
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-6 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">ユーザー情報変更</h1>
        <Card className="w-80 sm:w-96">
          <CardContent className="p-6 sm:px-10">
            <form
              className="flex w-full flex-col gap-y-4"
              onSubmit={handleSubmit}
            >
              <FormInput
                label="ユーザー名"
                ref={name.ref}
                errorMessage={name.errorMessage}
                autoComplete="off"
                spellCheck="false"
              />

              <div>
                <Label className="text-xs" htmlFor="name">
                  アバター画像
                </Label>
                <AvatarCarousel value={avatarPath} onChange={setAvatarPath} />
              </div>

              <Button
                className="w-full"
                type="submit"
                disabled={updateMutation.isPending}
              >
                {updateMutation.isPending ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  '変更'
                )}
              </Button>

              <Link
                className={cn(
                  buttonVariants({ variant: 'outline' }),
                  'w-full bg-transparent'
                )}
                to="/profile"
              >
                キャンセル
              </Link>
            </form>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
page.tsx

import Logo from '@/components/layout/logo';
import UserProfileCounts from '@/components/profile/user-profile-counts';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { buttonVariants } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { APP_TITLE, AVATAR_IMAGE_BASE_URL } from '@/constants/constants';
import { cn } from '@/lib/utils';
import { useUser } from '@/providers/user-provider';
import ErrorElement from '@/routes/error-element';
import { KeyRoundIcon, MailIcon, UserRoundPenIcon } from 'lucide-react';
import { Suspense } from 'react';
import { ErrorBoundary } from 'react-error-boundary';
import { Link } from 'react-router';

const CHANGE_LIST = [
  {
    id: 1,
    icon: UserRoundPenIcon,
    title: 'ユーザー情報',
    linkTo: '/profile/change-user-info',
    linkLabel: '変更',
  },
  {
    id: 2,
    icon: MailIcon,
    title: 'メールアドレス',
    linkTo: '/profile/change-email',
    linkLabel: '変更',
  },
  {
    id: 3,
    icon: KeyRoundIcon,
    title: 'パスワード',
    linkTo: '/profile/change-password',
    linkLabel: '変更',
  },
];

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const { user } = useUser();

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-6 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">プロフィール</h1>

        <Card className="w-80 overflow-hidden p-0 sm:w-96">
          <CardHeader className="from-secondary/50 to-primary w-full bg-linear-to-tr p-0">
            <div className="flex flex-col items-center pt-12">
              <Avatar className="size-24">
                <AvatarImage
                  className="bg-foreground/30"
                  src={AVATAR_IMAGE_BASE_URL + user?.avatarPath}
                  alt="avatar-image"
                />
                <AvatarFallback className="bg-primary text-5xl font-semibold">
                  {user?.name.slice(0, 1)}
                </AvatarFallback>
              </Avatar>
              <div className="w-full p-4 text-center">
                <p className="text-xl font-semibold">{user?.name}</p>
                <p className="text-sm">{user?.email}</p>
              </div>

              <div className="h-20 w-full p-4">
                <ErrorBoundary fallback={<ErrorElement />}>
                  <Suspense fallback={null}>
                    <UserProfileCounts />
                  </Suspense>
                </ErrorBoundary>
              </div>
            </div>
          </CardHeader>

          <CardContent className="relative p-6 pt-0">
            <ul className="flex flex-col gap-y-4">
              {CHANGE_LIST.map((item) => (
                <li className="flex items-center justify-between" key={item.id}>
                  <div className="flex gap-x-4">
                    <item.icon />
                    <p>{item.title}</p>
                  </div>
                  <Link
                    className={cn(
                      buttonVariants({ variant: 'outline' }),
                      'bg-transparent'
                    )}
                    to={item.linkTo}
                  >
                    {item.linkLabel}
                  </Link>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
settings

import { Card, CardContent } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { APP_TITLE } from '@/constants/constants';
import { cn } from '@/lib/utils';
import { ThemeStyle, useThemeStyle } from '@/providers/theme-style-provider';

type ThemeCard = {
  themeStyle: ThemeStyle;
  title: string;
  bg: string;
  border: string;
  primary: string;
  secondary: string;
  accent: string;
  background: string;
};

const cards: ThemeCard[] = [
  {
    themeStyle: 'default',
    title: 'Default',
    bg: 'bg-[rgba(48,123,52,0.2)] dark:bg-[rgba(95,201,101,0.2)]',
    border: 'border-[rgb(48,123,52)] dark:border-[rgb(95,201,101)]',
    primary: 'bg-[rgb(48,123,52)] dark:bg-[rgb(95,201,101)]',
    secondary: 'bg-[rgb(233,246,234)] dark:bg-[rgb(46,82,47)]',
    accent: 'bg-[rgb(202,232,203)] dark:bg-[rgb(69,89,99)]',
    background: 'bg-[rgb(249,245,238)] dark:bg-[rgb(36,48,54)]',
  },
  {
    themeStyle: 'claude',
    title: 'Claude',
    bg: 'bg-[rgba(203,100,65,0.2)] dark:bg-[rgba(216,119,87,0.2)]',
    border: 'border-[rgb(203,100,65)] dark:border-[rgb(216,119,87)]',
    primary: 'bg-[rgb(203,100,65)] dark:bg-[rgb(216,119,87)]',
    secondary: 'bg-[rgb(231,228,221)] dark:bg-[rgb(250,248,241)]',
    accent: 'bg-[rgb(231,228,221)] dark:bg-[rgb(26,24,19)]',
    background: 'bg-[rgb(250,248,241)] dark:bg-[rgb(38,38,38)]',
  },
  {
    themeStyle: 't3-chat',
    title: 'T3 Chat',
    bg: 'bg-[rgba(167,67,112,0.2)] dark:bg-[rgba(164,0,76,0.2)]',
    border: 'border-[rgb(167,67,112)] dark:border-[rgb(164,0,76)]',
    primary: 'bg-[rgb(167,67,112)] dark:bg-[rgb(164,0,76)]',
    secondary: 'bg-[rgb(242,196,231)] dark:bg-[rgb(53,44,60)]',
    accent: 'bg-[rgb(242,196,231)] dark:bg-[rgb(69,54,81)]',
    background: 'bg-[rgb(252,246,252)] dark:bg-[rgb(34,29,39)]',
  },
  {
    themeStyle: 'supabase',
    title: 'supabase',
    bg: 'bg-[rgba(113,225,172,0.2)] dark:bg-[rgba(13,98,59,0.2)]',
    border: 'border-[rgb(113,225,172)] dark:border-[rgb(13,98,59)]',
    primary: 'bg-[rgb(113,225,172)] dark:bg-[rgb(13,98,59)]',
    secondary: 'bg-[rgb(252,252,252)] dark:bg-[rgb(36,36,36)]',
    accent: 'bg-[rgb(238,238,238)] dark:bg-[rgb(48,48,48)]',
    background: 'bg-[rgb(252,252,252)] dark:bg-[rgb(18,18,18)]',
  },
  {
    themeStyle: 'twitter',
    title: 'Twitter',
    bg: 'bg-[rgba(30,156,240,0.2)] dark:bg-[rgba(30,156,240,0.2)]',
    border: 'border-[rgb(30,156,240)] dark:border-[rgb(30,156,240)]',
    primary: 'bg-[rgb(30,156,240)] dark:bg-[rgb(30,156,240)]',
    secondary: 'bg-[rgb(16,20,24)] dark:bg-[rgb(242,242,242)]',
    accent: 'bg-[rgb(226,236,249)] dark:bg-[rgb(7,21,32)]',
    background: 'bg-[rgb(255,255,255)] dark:bg-[rgb(0,0,0)]',
  },
  {
    themeStyle: 'vercel',
    title: 'Vercel',
    bg: 'bg-[rgba(0,0,0,0.2)] dark:bg-[rgba(255,255,255,0.2)]',
    border: 'border-[rgb(0,0,0)] dark:border-[rgb(255,255,255)]',
    primary: 'bg-[rgb(0,0,0)] dark:bg-[rgb(255,255,255)]',
    secondary: 'bg-[rgb(235,235,235)] dark:bg-[rgb(34,34,34)]',
    accent: 'bg-[rgb(235,235,235)] dark:bg-[rgb(51,51,51)]',
    background: 'bg-[rgb(252,252,252)] dark:bg-[rgb(0,0,0)]',
  },
  {
    themeStyle: 'notebook',
    title: 'Notebook',
    bg: 'bg-[rgba(96,96,96,0.2)] dark:bg-[rgba(177,177,177,0.2)]',
    border: 'border-[rgb(96,96,96)] dark:border-[rgb(177,177,177)]',
    primary: 'bg-[rgb(96,96,96)] dark:bg-[rgb(177,177,177)]',
    secondary: 'bg-[rgb(222,222,222)] dark:bg-[rgb(91,91,91)]',
    accent: 'bg-[rgb(245,236,198)] dark:bg-[rgb(225,225,225)]',
    background: 'bg-[rgb(248,248,248)] dark:bg-[rgb(43,43,43)]',
  },
  {
    themeStyle: 'perpetuity',
    title: 'perpetuity',
    bg: 'bg-[rgba(24,132,140,0.2)] dark:bg-[rgba(69,232,232,0.2)]',
    border: 'border-[rgb(24,132,140)] dark:border-[rgb(69,232,232)]',
    primary: 'bg-[rgb(24,132,140)] dark:bg-[rgb(69,232,232)]',
    secondary: 'bg-[rgb(214,233,233)] dark:bg-[rgb(17,74,87)]',
    accent: 'bg-[rgb(200,228,230)] dark:bg-[rgb(17,74,87)]',
    background: 'bg-[rgb(231,241,241)] dark:bg-[rgb(14,26,31)]',
  },
  {
    themeStyle: 'vintage-paper',
    title: 'Vintage Paper',
    bg: 'bg-[rgba(168,124,81,0.2)] dark:bg-[rgba(194,161,128,0.2)]',
    border: 'border-[rgb(168,124,81)] dark:border-[rgb(194,161,128)]',
    primary: 'bg-[rgb(168,124,81)] dark:bg-[rgb(194,161,128)]',
    secondary: 'bg-[rgb(224,214,194)] dark:bg-[rgb(75,64,56)]',
    accent: 'bg-[rgb(210,199,170)] dark:bg-[rgb(90,73,61)]',
    background: 'bg-[rgb(247,242,227)] dark:bg-[rgb(42,37,34)]',
  },
];

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const { themeStyle, setThemeStyle } = useThemeStyle();

  const handleClick = (selectedStyle: ThemeStyle) => {
    setThemeStyle(selectedStyle);
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="m-4 flex h-10 items-center">
        <h1>テーマ設定</h1>
      </div>

      <Separator className="bg-foreground/10 my-4" />

      <div className="grid grid-cols-2 gap-2 sm:grid-cols-3">
        {cards.map((card) => (
          <Card
            key={card.themeStyle}
            className={cn(
              'border-transparent hover:cursor-pointer',
              themeStyle === card.themeStyle && card.border,
              card.bg
            )}
            onClick={() => handleClick(card.themeStyle)}
          >
            <CardContent>
              <div className="flex flex-col items-center gap-2 md:flex-row">
                <div className="flex gap-x-1">
                  <div className={cn('size-3 rounded', card.primary)}></div>
                  <div className={cn('size-3 rounded', card.secondary)}></div>
                  <div className={cn('size-3 rounded', card.accent)}></div>
                  <div className={cn('size-3 rounded', card.background)}></div>
                </div>
                <p>{card.title}</p>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    </>
  );
}

------------------------------------------------------------
signup

import FormInput from '@/components/form-input';
import Logo from '@/components/layout/logo';
import AvatarCarousel from '@/components/profile/avatar-carousel';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { APP_TITLE } from '@/constants/constants';
import { useFieldValidation } from '@/hooks/use-field-validation';
import { useAuth } from '@/providers/auth-provider';
import { SignupRequest } from '@/types';
import { useMutation } from '@tanstack/react-query';
import { Loader2Icon } from 'lucide-react';
import { FormEvent, useState } from 'react';
import { Link, useNavigate } from 'react-router';
import { toast } from 'sonner';

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  const email = useFieldValidation<HTMLInputElement>();
  const password = useFieldValidation<HTMLInputElement>();
  const name = useFieldValidation<HTMLInputElement>();

  const [avatarPath, setAvatarPath] = useState('');

  const navigate = useNavigate();
  const { signup } = useAuth();

  const signupMutation = useMutation({
    mutationFn: (requestBody: SignupRequest) => signup(requestBody),
    onSuccess: () => {},
    onError: (error) => {
      console.error(error);
    },
  });

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const isEmailValid = email.validate.email();
    const isPasswordValid = password.validate.password();
    const isNameValid = name.validate.name();

    if (!isEmailValid || !isPasswordValid || !isNameValid) {
      return;
    }

    const requestBody: SignupRequest = {
      email: email.getValue(),
      password: password.getValue(),
      name: name.getValue(),
      avatarPath,
    };

    signupMutation.mutate(requestBody, {
      onSuccess: () => {
        toast.success('ユーザーを新規登録しました');
        navigate('/');
      },
      onError: () => {
        toast.error('新規登録できませんでした', {
          description: '入力内容を確認してください。',
          duration: 5000,
        });
      },
    });
  };

  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="my-3 flex flex-col place-items-center gap-y-3 sm:my-16">
        <Logo size="lg" disableLink />
        <h1 className="font-semibold">アカウントの作成</h1>
        <Card className="w-80 p-6 sm:w-96 sm:p-10">
          <CardContent className="p-0">
            <form
              className="flex w-full flex-col gap-y-4"
              onSubmit={handleSubmit}
            >
              <FormInput
                label="メールアドレス"
                ref={email.ref}
                errorMessage={email.errorMessage}
                autoComplete="off"
                spellCheck="false"
              />

              <FormInput
                label="パスワード"
                ref={password.ref}
                errorMessage={password.errorMessage}
                type="password"
              />

              <Separator className="bg-foreground/10 mt-6 mb-2" />

              <FormInput
                label="ユーザー名"
                ref={name.ref}
                errorMessage={name.errorMessage}
                autoComplete="off"
                spellCheck="false"
              />

              <div>
                <Label className="text-xs" htmlFor="name">
                  アバター画像
                </Label>
                <AvatarCarousel value={avatarPath} onChange={setAvatarPath} />
              </div>

              <Button
                className="mt-2 w-full"
                type="submit"
                disabled={signupMutation.isPending}
              >
                {signupMutation.isPending ? (
                  <Loader2Icon className="animate-spin" />
                ) : (
                  '新規登録'
                )}
              </Button>
            </form>

            <div className="mt-6 flex justify-center gap-x-1 text-xs">
              <p className="text-muted-foreground">
                アカウントをお持ちですか？
              </p>
              <Link to="/login">
                <p className="text-primary hover:underline">ログイン</p>
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </>
  );
}

------------------------------------------------------------
page.tsx

import BooksNewReleases from '@/components/books/books-new-releases';
import BooksSkeleton from '@/components/books/books-skeleton';
import GenresSkeleton from '@/components/genres/genres-skeleton';
import GenresTopPage from '@/components/genres/genres-top-page';
import Hero from '@/components/layout/hero';
import { Button } from '@/components/ui/button';
import { ThemeStyle, useThemeStyle } from '@/providers/theme-style-provider';
import ErrorElement from '@/routes/error-element';
import { Suspense, useState } from 'react';
import { ErrorBoundary } from 'react-error-boundary';

export default function Page() {
  const { themeStyle, setThemeStyle } = useThemeStyle();

  const themeStyles: ThemeStyle[] = [
    'default',
    'claude',
    't3-chat',
    'supabase',
    'twitter',
    'vercel',
    'notebook',
    'perpetuity',
    'vintage-paper',
  ];
  const [index, setIndex] = useState(0);

  const handleClick = () => {
    setThemeStyle(themeStyles[index]);
    setIndex((prev) => (prev + 1) % themeStyles.length);
  };

  return (
    <>
      <section className="mb-4 sm:mb-0">
        <Hero />
      </section>

      <section className="mb-4 flex flex-col gap-y-4">
        <Button onClick={handleClick}>{themeStyle}</Button>
        <h2 className="font-bold">ジャンル</h2>

        <ErrorBoundary fallback={<ErrorElement />}>
          <Suspense fallback={<GenresSkeleton />}>
            <GenresTopPage />
          </Suspense>
        </ErrorBoundary>
      </section>

      <section className="flex flex-col">
        <h2 className="font-bold">ニューリリース</h2>

        <ErrorBoundary fallback={<ErrorElement />}>
          <Suspense fallback={<BooksSkeleton />}>
            <BooksNewReleases />
          </Suspense>
        </ErrorBoundary>
      </section>
    </>
  );
}

------------------------------------------------------------
route.tsx

import BookDetailPage from '@/routes/book/[bookId]/page';
import BookmarksPage from '@/routes/bookmarks/page';
import DiscoverPage from '@/routes/discover/page';
import FavoritesPage from '@/routes/favorites/page';
import RootLayout from '@/routes/layout';
import LoginPage from '@/routes/login/page';
import MyReviewsPage from '@/routes/my-reviews/page';
import NotFoundPage from '@/routes/not-found';
import RootPage from '@/routes/page';
import UpdateUserEmailPage from '@/routes/profile/change-email/page';
import UpdateUserPasswordPage from '@/routes/profile/change-password/page';
import ChangeUserInfoPage from '@/routes/profile/change-user-info/page';
import ProfilePage from '@/routes/profile/page';
import ProtectedRoute from '@/routes/protected-route';
import RankingPage from '@/routes/ranking/page';
import BookReadPage from '@/routes/read/[bookId]/chapter/[chapterNumber]/page';
import BookReadTableOfContentsPage from '@/routes/read/[bookId]/table-of-contents/page';
import SearchPage from '@/routes/search/page';
import SettingsPage from '@/routes/settings/page';
import SignupPage from '@/routes/signup/page';
import SpecialFeaturesPage from '@/routes/special-features/page';
import {
  createBrowserRouter,
  createRoutesFromElements,
  Route,
} from 'react-router';

export const router = createBrowserRouter(
  createRoutesFromElements(
    <Route>
      <Route path="/" element={<RootLayout />}>
        <Route index element={<RootPage />} />

        <Route path="login" element={<LoginPage title="ログイン" />} />
        <Route path="signup" element={<SignupPage title="サインアップ" />} />

        <Route path="book">
          <Route path=":bookId" element={<BookDetailPage />} />
        </Route>

        <Route path="read">
          <Route path=":bookId">
            <Route
              path="table-of-contents"
              element={<BookReadTableOfContentsPage />}
            />
          </Route>
        </Route>

        <Route path="search" element={<SearchPage />} />
        <Route path="discover" element={<DiscoverPage title="ジャンル" />} />
        <Route path="ranking" element={<RankingPage title="ランキング" />} />
        <Route
          path="special-features"
          element={<SpecialFeaturesPage title="特集" />}
        />
        <Route path="settings" element={<SettingsPage title="設定" />} />

        {/* 以下、認証が必要な画面 */}
        <Route element={<ProtectedRoute />}>
          <Route
            path="favorites"
            element={<FavoritesPage title="お気に入り" />}
          />
          <Route
            path="bookmarks"
            element={<BookmarksPage title="ブックマーク" />}
          />
          <Route
            path="my-reviews"
            element={<MyReviewsPage title="マイレビュー" />}
          />

          <Route path="profile">
            <Route index element={<ProfilePage title="プロフィール" />} />
            <Route
              path="change-user-info"
              element={<ChangeUserInfoPage title="ユーザー情報変更" />}
            />
            <Route
              path="change-email"
              element={<UpdateUserEmailPage title="メールアドレス変更" />}
            />
            <Route
              path="change-password"
              element={<UpdateUserPasswordPage title="パスワード変更" />}
            />
          </Route>

          <Route path="read/:bookId">
            <Route path="chapter/:chapterNumber">
              <Route path="page/:pageNumber" element={<BookReadPage />} />
            </Route>
          </Route>
        </Route>

        <Route path="*" element={<NotFoundPage title="404" />} />
      </Route>
    </Route>
  )
);

------------------------------------------------------------
bookmark.ts

import { Book } from '@/types/book';
import { UseMutationResult } from '@tanstack/react-query';

export type Bookmark = {
  id: number;
  userId: number;
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  note: string;
  chapterTitle: string;
  createdAt: string;
  updatedAt: string;
  book: Book;
};

export type BookmarkPage = {
  page: number;
  totalPages: number;
  totalItems: number;
  bookmarks: Bookmark[];
};

export type BookmarkRequest = {
  bookId: string;
  chapterNumber: number;
  pageNumber: number;
  note: string;
};

export type BookmarkCreateMutation = UseMutationResult<
  void,
  Error,
  BookmarkRequest,
  unknown
>;

export type BookmarkUpdateMutation = UseMutationResult<
  void,
  Error,
  {
    bookmarkId: number;
    requestBody: BookmarkRequest;
  },
  unknown
>;

export type BookmarkDeleteMutation = UseMutationResult<
  void,
  Error,
  number,
  unknown
>;

------------------------------------------------------------
index.ts

export * from './api';
export * from './auth';
export * from './book';
export * from './bookmark';
export * from './favorite';
export * from './genre';
export * from './review';
export * from './user';

------------------------------------------------------------
review.ts

import { Book } from '@/types/book';
import { UseMutationResult } from '@tanstack/react-query';

export type Review = {
  id: number;
  userId: number;
  bookId: string;
  name: string;
  avatarPath: string;
  comment: string;
  rating: number;
  createdAt: string;
  updatedAt: string;
  book: Book;
};

export type ReviewPage = {
  page: number;
  totalPages: number;
  totalItems: number;
  reviews: Review[];
};

export type ReviewCounts = {
  bookId: string;
  reviewCount: number;
  averageRating: number;
};

export type ReviewRequest = {
  bookId: string;
  comment: string;
  rating: number;
};

export type SelfReviewExists = {
  exists: boolean;
};

export type ReviewCreateMutation = UseMutationResult<
  void,
  Error,
  ReviewRequest,
  unknown
>;

export type ReviewUpdateMutation = UseMutationResult<
  void,
  Error,
  {
    reviewId: number;
    requestBody: ReviewRequest;
  },
  unknown
>;

export type ReviewDeleteMutation = UseMutationResult<
  void,
  Error,
  number,
  unknown
>;

------------------------------------------------------------
index.css

@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

/* https://tweakcn.com/ で色情報を作成 */
:root {
  --background: oklch(0.97 0.01 80.72);
  --foreground: oklch(0.3 0.04 30.2);
  --card: oklch(0.97 0.01 80.72);
  --card-foreground: oklch(0.3 0.04 30.2);
  --popover: oklch(0.97 0.01 80.72);
  --popover-foreground: oklch(0.3 0.04 30.2);
  --primary: oklch(0.52 0.13 144.17);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.96 0.02 147.64);
  --secondary-foreground: oklch(0.43 0.12 144.31);
  --muted: oklch(0.94 0.01 74.42);
  --muted-foreground: oklch(0.45 0.05 39.21);
  --accent: oklch(0.9 0.05 146.04);
  --accent-foreground: oklch(0.43 0.12 144.31);
  --destructive: oklch(0.54 0.19 26.72);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.88 0.02 74.64);
  --input: oklch(0.88 0.02 74.64);
  --ring: oklch(0.52 0.13 144.17);
  --chart-1: oklch(0.67 0.16 144.21);
  --chart-2: oklch(0.58 0.14 144.18);
  --chart-3: oklch(0.52 0.13 144.17);
  --chart-4: oklch(0.43 0.12 144.31);
  --chart-5: oklch(0.22 0.05 145.73);
  --sidebar: oklch(0.94 0.01 74.42);
  --sidebar-foreground: oklch(0.3 0.04 30.2);
  --sidebar-primary: oklch(0.52 0.13 144.17);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.9 0.05 146.04);
  --sidebar-accent-foreground: oklch(0.43 0.12 144.31);
  --sidebar-border: oklch(0.88 0.02 74.64);
  --sidebar-ring: oklch(0.52 0.13 144.17);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Noto Serif JP, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.3 0.02 232.02);
  --foreground: oklch(0.94 0.01 72.66);
  --card: oklch(0.28 0.02 229.7);
  --card-foreground: oklch(0.94 0.01 72.66);
  --popover: oklch(0.27 0.02 229.77);
  --popover-foreground: oklch(0.94 0.01 72.66);
  --primary: oklch(0.75 0.17 144.65);
  --primary-foreground: oklch(0.22 0.05 145.73);
  --secondary: oklch(0.4 0.07 145.17);
  --secondary-foreground: oklch(0.9 0.04 146.44);
  --muted: oklch(0.34 0.01 226.41);
  --muted-foreground: oklch(0.78 0.01 231.27);
  --accent: oklch(0.45 0.03 231.13);
  --accent-foreground: oklch(0.94 0.01 72.66);
  --destructive: oklch(0.64 0.22 28.58);
  --destructive-foreground: oklch(0.94 0.01 72.66);
  --border: oklch(0.35 0.01 225.37);
  --input: oklch(0.38 0.01 229.22);
  --ring: oklch(0.75 0.17 144.65);
  --chart-1: oklch(0.77 0.12 145.3);
  --chart-2: oklch(0.72 0.14 144.89);
  --chart-3: oklch(0.67 0.16 144.21);
  --chart-4: oklch(0.63 0.15 144.2);
  --chart-5: oklch(0.58 0.14 144.18);
  --sidebar: oklch(0.27 0.03 150.77);
  --sidebar-foreground: oklch(0.94 0.01 72.66);
  --sidebar-primary: oklch(0.67 0.16 144.21);
  --sidebar-primary-foreground: oklch(0.22 0.05 145.73);
  --sidebar-accent: oklch(0.58 0.14 144.18);
  --sidebar-accent-foreground: oklch(0.94 0.01 72.66);
  --sidebar-border: oklch(0.39 0.03 142.99);
  --sidebar-ring: oklch(0.67 0.16 144.21);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Zen Old Mincho, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

/* ロゴのフォント */
:root {
  --font-logo: 'Alfa Slab One';
}

@theme inline {
  /* ロゴのフォント */
  --font-logo: var(--font-logo);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* デフォルトの<button>のカーソル */
  button:not(:disabled),
  [role='button']:not(:disabled) {
    cursor: pointer;
  }

  /* デフォルトの<input>のプレースホルダー */
  input::placeholder,
  textarea::placeholder {
    font-size: var(--text-sm);
  }

  /* スクロールバー */
  ::-webkit-scrollbar-track {
    cursor: default;
    background-color: var(--background);
  }
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  ::-webkit-scrollbar-thumb {
    cursor: default;
    border-radius: 8px;
    background-color: hsl(from var(--foreground) h s l / 0.2);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: hsl(from var(--foreground) h s l / 0.3);
  }
}

------------------------------------------------------------
main.tsx

import { AuthProvider } from '@/providers/auth-provider';
import { ThemeProvider } from '@/providers/theme-provider';
import { ThemeStyleProvider } from '@/providers/theme-style-provider';
import { UserProvider } from '@/providers/user-provider';
import { router } from '@/routes/route.tsx';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import { RouterProvider } from 'react-router';
import './index.css';

const queryClient = new QueryClient();

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <UserProvider>
          <ThemeStyleProvider
            defaultTheme="default"
            storageKey="vite-ui-theme-style"
          >
            <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
              <RouterProvider router={router} />
            </ThemeProvider>
          </ThemeStyleProvider>
        </UserProvider>
      </AuthProvider>
    </QueryClientProvider>
  </StrictMode>
);

------------------------------------------------------------
index.html

<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      name="description"
      content="本の探索サイトへようこそ。多様なコレクションから、新しい知識を発見しましょう。厳選された書籍で、あなたの次の読書を見つけてください。知識の旅に一緒に出かけましょう。"
    />
    <title>My Books</title>

    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Alfa+Slab+One&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Berkshire+Swash&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Serif+JP:wght@200..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Outfit:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Geist:wght@100..900&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Architects+Daughter&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Yusei+Magic&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=DotGothic16&display=swap"
      rel="stylesheet"
    />
    <link
      href="https://fonts.googleapis.com/css2?family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>


------------------------------------------------------------
del

my-review-*** 4
review-*** 2
review-book-*** 2

