----------------------------------------
●components/book-list

book-card.tsx

import FavoriteButton from '@/components/favorite-button';
import Card from '@/components/ui/card';
import { Book } from '@/types/book';
import { Link } from 'react-router-dom';

type Props = {
  book: Book;
};

export default function BookCard({ book }: Props) {
  return (
    <>
      <Card className="relative flex w-40 flex-col gap-2 px-4 pb-3 pt-6 sm:w-48 sm:px-5 sm:pb-4 sm:pt-7">
        <div className="absolute right-1 top-1 z-10">
          <FavoriteButton book={book} />
        </div>
        <img
          className="h-44 rounded object-cover sm:h-52"
          src={book.imageUrl}
          alt={book.title}
        />
        <p className="line-clamp-2 h-8 w-full px-2 text-center text-xs sm:h-10 sm:text-sm">
          {book.title}
          <Link className="absolute inset-0" to={`/book/${book.id}`}></Link>
        </p>
      </Card>
    </>
  );
}

----------------------------------------
●components

favorite-button

import Button from '@/components/ui/button';
import { cn } from '@/lib/util';
import { Book } from '@/types/book';
import { HeartIcon } from 'lucide-react';

type Props = {
  book: Book;
};

export default function FavoriteButton({ book }: Props) {
  const isFavorite = !book.isFavorite;
  return (
    <>
      <Button
        className={cn(
          'size-8 rounded-full text-muted-foreground',
          isFavorite && 'text-primary bg-primary/20'
        )}
        variant="ghost"
        size="icon"
      >
        <HeartIcon className="size-4" />
      </Button>
    </>
  );
}

----------------------------------------
●lib

data

// import { getUser } from '@/lib/auth';
// import prisma from '@/lib/db';
import { Book, FavoriteBook } from '@/types/book';
import { GoogleApiBook, SearchResponse } from '@/types/google-books-api';
// import { Book, FavoriteBook, GoogleApiBook, SearchResponse } from '@/types';

const GOOGLE_BOOKS_API_ENDPOINT = 'https://www.googleapis.com/books/v1';
export const FETCH_BOOKS_MAX_RESULTS = 20;

/**
 * 書籍の検索
 * https://developers.google.com/books/docs/v1/reference/volumes/list?hl=ja
 * @param q 全文のクエリ文字列
 * @param startIndex? 最初に返される結果のインデックス（0 から開始）
 * @return Book[]
 */
export const getBooksByQuery = async (
  q: string | undefined | null,
  startIndex: number = 0
) => {
  if (!q) return [];

  const url = `${GOOGLE_BOOKS_API_ENDPOINT}/volumes?q=${q}&startIndex=${startIndex}&maxResults=${FETCH_BOOKS_MAX_RESULTS}&langRestrict=ja`;
  const res = await fetch(url);

  if (!res.ok) {
    throw new Error(
      `Failed to fetch data from ${url}. HTTP error! status: ${res.status}`
    );
  }

  const googleBooksData = (await res.json()) as SearchResponse;
  const books = googleBooksData.items
    ? googleBooksData.items.map((item) => convertBook(item, []))
    : [];
  return books;

  // const user = getUser();
  // const favoriteBooks = await prisma.favoriteBook.findMany({
  //   where: {
  //     userId: user.id,
  //   },
  // });

  // const books = googleBooksData.items
  //   ? googleBooksData.items.map((item) => convertBook(item, favoriteBooks))
  //   : [];

  // return books;
};

/**
 * クエリ文字列で検索したときの書籍の総数を取得
 * https://developers.google.com/books/docs/v1/reference/volumes/list?hl=ja
 * @param q 全文のクエリ文字列
 * @returns 総数
 */
export const getTotalItemsByQuery = async (q: string | undefined | null) => {
  if (!q) return 0;

  const url = `${GOOGLE_BOOKS_API_ENDPOINT}/volumes?q=${q}&maxResults=1&langRestrict=ja`;
  const res = await fetch(url);

  if (!res.ok) {
    throw new Error(
      `Failed to fetch data from ${url}. HTTP error! status: ${res.status}`
    );
  }

  const googleBooksData = (await res.json()) as SearchResponse;

  return googleBooksData.totalItems;
};

/**
 * １冊分の本の情報を取得
 * https://developers.google.com/books/docs/v1/reference/volumes/get?hl=ja
 * @param volumeId 取得するボリュームの ID
 * @return Book
 */
export const getBookById = async (
  volumeId: string | undefined
): Promise<Book | undefined> => {
  if (!volumeId) return undefined;

  const url = `${GOOGLE_BOOKS_API_ENDPOINT}/volumes/${volumeId}`;
  const res = await fetch(url);

  if (!res.ok) {
    throw new Error(
      `Failed to fetch data from ${url}. HTTP error! status: ${res.status}`
    );
  }

  const googleBooksData = (await res.json()) as GoogleApiBook;
  const book = convertBook(googleBooksData, []);
  return book;

  // const user = getUser();
  // const favoriteBooks = await prisma.favoriteBook.findMany({
  //   where: {
  //     userId: user.id,
  //   },
  // });

  // const book = convertBook(googleBooksData, favoriteBooks);

  // return book;
};

/**
 * お気に入り一覧取得
 * @return Book[]
 */
export const fetchFavorites = async () => {
  // const user = getUser();
  // const favorites = await prisma.favoriteBook.findMany({
  //   where: {
  //     userId: user.id,
  //   },
  //   orderBy: {
  //     createdAt: 'desc',
  //   },
  // });
  // const books = favorites.map((favorite) => ({
  //   id: favorite.bookId,
  //   title: favorite.title,
  //   imageUrl: favorite.imageUrl,
  //   authors: [],
  //   publisher: '',
  //   publishedDate: '',
  //   description: '',
  //   webReaderLink: '',
  //   pageCount: 0,
  //   price: 0,
  //   isFavorite: true,
  // }));
  // return books;
};

/**
 * 閲覧履歴一覧取得
 * @return Book[]
 */
export const getBrowsingHistory = async () => {
  // const user = getUser();
  // const histories = await prisma.bookBrowsingHistory.findMany({
  //   where: {
  //     userId: user.id,
  //   },
  //   orderBy: {
  //     createdAt: 'desc',
  //   },
  // });
  // const favorites = await prisma.favoriteBook.findMany({
  //   where: {
  //     userId: user.id,
  //   },
  //   select: {
  //     bookId: true,
  //   },
  // });
  // const books = histories.map((history) => ({
  //   id: history.bookId,
  //   title: history.title,
  //   imageUrl: history.imageUrl,
  //   authors: [],
  //   publisher: '',
  //   publishedDate: '',
  //   description: '',
  //   webReaderLink: '',
  //   pageCount: 0,
  //   price: 0,
  //   isFavorite: favorites.find((favorite) => favorite.bookId === history.bookId)
  //     ? true
  //     : false,
  // }));
  // return books;
};

/**
 * Google Books API のレスポンスをBookへ変換
 * @param googleBooksData Google Books API のレスポンス
 * @param favoriteBooks お気に入り一覧
 * @returns Book
 */
const convertBook = (
  googleBooksData: GoogleApiBook,
  favoriteBooks: FavoriteBook[]
): Book => {
  return {
    id: googleBooksData.id,
    title: googleBooksData.volumeInfo.title,
    imageUrl: googleBooksData.volumeInfo.imageLinks?.thumbnail ?? '/no-image.png',
    authors: googleBooksData.volumeInfo.authors,
    publisher: googleBooksData.volumeInfo.publisher ?? '',
    publishedDate: googleBooksData.volumeInfo.publishedDate,
    description: googleBooksData.volumeInfo.description ?? '',
    webReaderLink: googleBooksData.accessInfo.webReaderLink,
    pageCount: googleBooksData.volumeInfo.pageCount ?? 0,
    price: googleBooksData.saleInfo.retailPrice?.amount ?? 0,

    // isFavorite: favoriteBooks.find((favorite) => favorite.bookId === googleBooksData.id)
    //   ? true
    //   : false,

    isFavorite: Math.random() > 0.5,
  };
};

// import { Book } from '@/types/book';
// import { GoogleApiBook, SearchResponse } from '@/types/google-books-api';

// const GOOGLE_BOOKS_API_ENDPOINT = 'https://www.googleapis.com/books/v1';
// const FETCH_BOOKS_MAX_RESULTS = 20;

// /**
//  * 書籍の検索
//  * https://developers.google.com/books/docs/v1/reference/volumes/list?hl=ja
//  * @param q 全文のクエリ文字列
//  * @param startIndex? 最初に返される結果のインデックス（0 から開始）
//  * @return Book[]
//  */
// export const getBooksByQuery = async (
//   q: string | undefined | null,
//   startIndex: number = 0
// ) => {
//   if (!q) return [];

//   const url = `${GOOGLE_BOOKS_API_ENDPOINT}/volumes?q=${q}&startIndex=${startIndex}&maxResults=${FETCH_BOOKS_MAX_RESULTS}&langRestrict=ja`;

//   const res = await fetch(url);

//   if (!res.ok) {
//     throw new Error(
//       `Failed to fetch data from ${url}. HTTP error! status: ${res.status}`
//     );
//   }

//   const googleBooksData = (await res.json()) as SearchResponse;

//   const books = googleBooksData.items
//     ? googleBooksData.items.map((item) => convertBook(item))
//     : [];

//   return books;
// };

// /**
//  * １冊分の本の情報を取得
//  * https://developers.google.com/books/docs/v1/reference/volumes/get?hl=ja
//  * @param volumeId 取得するボリュームの ID
//  * @return Book
//  */
// export const getBookById = async (
//   volumeId: string | undefined
// ): Promise<Book | undefined> => {
//   if (!volumeId) return undefined;

//   const url = `${GOOGLE_BOOKS_API_ENDPOINT}/volumes/${volumeId}`;

//   const res = await fetch(url);

//   if (!res.ok) {
//     throw new Error(
//       `Failed to fetch data from ${url}. HTTP error! status: ${res.status}`
//     );
//   }

//   const googleBooksData = (await res.json()) as GoogleApiBook;

//   const book = convertBook(googleBooksData);

//   return book;
// };

// /**
//  * Google Books API のレスポンスをBookへ変換
//  * @param googleBooksData Google Books API のレスポンス
//  * @returns Book
//  */
// const convertBook = (googleBooksData: GoogleApiBook): Book => {
//   return {
//     id: googleBooksData.id,
//     title: googleBooksData.volumeInfo.title,
//     imageUrl:
//       googleBooksData.volumeInfo.imageLinks?.thumbnail ??
//       new URL(`src/assets/no-image.png`, import.meta.url).href,
//     authors: googleBooksData.volumeInfo.authors,
//     publisher: googleBooksData.volumeInfo.publisher ?? '',
//     publishedDate: googleBooksData.volumeInfo.publishedDate,
//     description: googleBooksData.volumeInfo.description ?? '',
//     webReaderLink: googleBooksData.accessInfo.webReaderLink,
//     pageCount: googleBooksData.volumeInfo.pageCount ?? 0,
//     price: googleBooksData.saleInfo.retailPrice?.amount ?? 0,
//   };
// };

----------------------------------------

