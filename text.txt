２８ファイル

--------------------------------------------------
book-detail-skeleton

import { Skeleton } from '@/components/ui/skeleton';

export default function BookDetailSkeleton() {
  return (
    <>
      <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
        <div className="flex flex-col items-center justify-center lg:w-1/2">
          <Skeleton className="h-[360px] w-[280px] rounded bg-muted-foreground/5 object-cover sm:h-[480px] sm:w-[360px]" />
          <div className="my-4 flex items-center gap-x-2">
            <Skeleton className="h-11 w-32 rounded-full bg-muted-foreground/5" />
            <Skeleton className="size-8 rounded-full bg-muted-foreground/5" />
          </div>
        </div>

        <div className="p-4 lg:w-1/2">
          <div className="text-3xl font-bold sm:text-4xl">
            <Skeleton className="h-9 w-64 rounded-full bg-muted-foreground/5 sm:h-10" />
          </div>
          <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
            <Skeleton className="h-7 w-24 rounded-full bg-muted-foreground/5 sm:h-8" />
          </div>

          <div className="flex gap-x-2">
            <Skeleton className="h-9 w-24 rounded-full bg-muted-foreground/5" />
            <Skeleton className="h-9 w-24 rounded-full bg-muted-foreground/5" />
          </div>

          <div className="my-6">
            <Skeleton className="my-2 h-6 w-full rounded-full bg-muted-foreground/5" />
            <Skeleton className="my-2 h-6 w-full rounded-full bg-muted-foreground/5" />
            <Skeleton className="my-2 h-6 w-full rounded-full bg-muted-foreground/5" />
          </div>

          <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
            <div className="flex flex-col gap-y-1 text-muted-foreground">
              <div className="flex">
                <Skeleton className="mb-1 h-5 w-48 rounded-full bg-muted-foreground/5" />
              </div>
              <div className="flex">
                <Skeleton className="mb-1 h-5 w-36 rounded-full bg-muted-foreground/5" />
              </div>
              <div className="flex">
                <Skeleton className="mb-1 h-5 w-44 rounded-full bg-muted-foreground/5" />
              </div>
              <div className="flex">
                <Skeleton className="mb-1 h-5 w-36 rounded-full bg-muted-foreground/5" />
              </div>
              <div className="flex">
                <Skeleton className="mb-1 h-5 w-32 rounded-full bg-muted-foreground/5" />
              </div>
            </div>

            <div className="flex flex-col items-center justify-end gap-y-4 sm:items-end">
              <div className="h-10" />
              <Skeleton className="h-10 w-32 rounded-full bg-muted-foreground/5" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

--------------------------------------------------
book-detail

import ReviewDialog from '@/components/book-detail/review-dialog';
import FavoriteButton from '@/components/favorite-button';
import GenreList from '@/components/genre-list/genre-list';
import MyListButton from '@/components/my-list-button';
import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useUser } from '@/hooks/use-user';
import { formatDateJP, formatIsbn, priceToString } from '@/lib/util';
import { Book, Genre } from '@/types/book';

type Props = {
  book: Book;
  genres: Genre[];
};

export default function BookDetail({ book, genres }: Props) {
  const { user } = useUser();
  const genreList = genres.filter((genre) => book.genreIds.includes(genre.id));

  return (
    <>
      <div className="flex flex-col justify-center p-3 pt-10 sm:p-6 lg:flex-row">
        <div className="flex flex-col items-center justify-center lg:w-1/2">
          <img
            className="h-[360px] rounded object-cover sm:h-[480px]"
            src={book.imageUrl}
            alt={book.title}
          />
          <div className="my-4 flex items-center">
            <div className="w-20"></div>
            <Button className="w-32 rounded-full" size="lg">
              読む
            </Button>

            <div className="flex w-20 items-center justify-center">
              <Tooltip>
                <TooltipTrigger asChild>
                  <MyListButton />
                </TooltipTrigger>
                {user ? (
                  <TooltipContent>マイリストに追加</TooltipContent>
                ) : (
                  <TooltipContent>
                    ログインしてこの本を「マイリスト」に加えましょう
                  </TooltipContent>
                )}
              </Tooltip>

              <Tooltip>
                <TooltipTrigger asChild>
                  <FavoriteButton book={book} />
                </TooltipTrigger>
                {user ? (
                  <TooltipContent>お気に入りに追加</TooltipContent>
                ) : (
                  <TooltipContent>
                    ログインしてこの本を「お気に入り」に加えましょう
                  </TooltipContent>
                )}
              </Tooltip>
            </div>
          </div>
        </div>

        <div className="p-4 lg:w-1/2">
          <p className="text-3xl font-bold sm:text-4xl">{book.title}</p>
          <div className="my-4 flex w-full flex-wrap items-center justify-end gap-x-3">
            <p>著者</p>
            {book.authors.map((author) => (
              <p className="text-lg font-bold sm:text-2xl" key={author}>
                {author}
              </p>
            ))}
          </div>

          <GenreList className="gap-2" genres={genreList} variant="outline" />

          <div className="my-6 md:my-10">{book.description}</div>

          <div className="flex flex-col justify-between gap-y-4 lg:flex-row">
            <div className="flex flex-col gap-y-1 text-muted-foreground">
              <div className="flex">
                <p className="min-w-20">ISBN</p>
                <p>{formatIsbn(book.isbn)}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">出版社</p>
                <p>{book.publisher}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">発売日</p>
                <p className="tracking-wide">{formatDateJP(book.publishedDate)}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">ページ数</p>
                <p>{`${book.pageCount}ページ`}</p>
              </div>
              <div className="flex">
                <p className="min-w-20">価格</p>
                <p>{priceToString(book.price)}</p>
              </div>
            </div>

            <div className="flex flex-col items-center justify-end gap-y-4 sm:items-end">
              <Rating rating={4.5} readOnly />
              <ReviewDialog bookId={book.id} />
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

--------------------------------------------------
review-dialog

import Rating from '@/components/rating';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogFooter } from '@/components/ui/dialog';
import { Textarea } from '@/components/ui/textarea';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { useUser } from '@/hooks/use-user';
import { createReview } from '@/lib/action';
import React, { useEffect, useRef, useState } from 'react';
import { useNavigate } from 'react-router-dom';

type Props = {
  bookId: string;
};

export default function ReviewDialog({ bookId }: Props) {
  const [isOpen, setIsOpen] = useState(false);
  const [rating, setRating] = useState(0);
  const [comment, setComment] = useState('');
  const ref = useRef<HTMLTextAreaElement | null>(null);
  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();
  const { user } = useUser();
  const navigate = useNavigate();

  useEffect(() => {
    if (isOpen) {
      setRating(0);
    }
  }, [isOpen]);

  const handleAnimationStart = (e: React.AnimationEvent) => {
    if (e.animationName === 'enter') {
      setComment('');
      ref.current?.focus();
    }
  };

  const handlePost = async () => {
    if (rating === 0) {
      const { isCancel } = await confirmDialog({
        icon: '?',
        title: 'このまま投稿しますか？',
        message: '星の数が「0」のままです。',
      });
      if (isCancel) return;
    }
    if (!user) {
      await confirmDialog({
        icon: '!',
        title: 'ユーザー情報がないため投稿できません',
        message: '',
      });
      return;
    }
    await createReview({ comment, rating, bookId, userId: user.id });
    toast({ description: 'レビューを投稿しました' });
    setIsOpen(false);

    // 現在の画面にリダイレクトしてloaderを再実行してデータを更新
    navigate(0);
  };

  const handleCloseDialog = async () => {
    if (comment) {
      const { isCancel } = await confirmDialog({
        icon: '?',
        title: '本当に閉じますか？',
        message: 'コメントはまだ投稿していません。',
        persistent: true,
      });
      if (isCancel) return;
    }
    setIsOpen(false);
  };

  return (
    <>
      <Tooltip>
        <TooltipTrigger asChild>
          <Button
            className="rounded-full bg-transparent"
            variant="outline"
            onClick={() => user && setIsOpen(true)}
          >
            レビューを書く
          </Button>
        </TooltipTrigger>
        {!user && (
          <TooltipContent>ログインしてこの本の「レビュー」を書きましょう</TooltipContent>
        )}
      </Tooltip>

      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogContent
          className="w-1/2 min-w-[360px] max-w-[600px] p-4 md:p-6"
          onEscapeKeyDown={handleCloseDialog}
          onPointerDownOutside={handleCloseDialog}
          onAnimationStart={handleAnimationStart}
        >
          <div className="flex items-start justify-between">
            <div>
              <p className="font-semibold leading-10">レビュー</p>
              <p className="text-xs text-muted-foreground md:text-sm">
                素敵な感想を伝えましょう！
              </p>
            </div>
            <div>
              <Rating rating={rating} onChange={setRating} />
              <p className="text-center text-xs text-muted-foreground md:text-sm">
                {rating === 0 ? '星をクリックして決定' : ''}
              </p>
            </div>
          </div>

          <Textarea ref={ref} onChange={(e) => setComment(e.currentTarget.value)} />

          <DialogFooter>
            <Button className="rounded-full" variant="ghost" onClick={handleCloseDialog}>
              閉じる
            </Button>
            <Button
              className="rounded-full"
              disabled={comment === '' ? true : false}
              onClick={handlePost}
            >
              投稿する
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}

--------------------------------------------------
book-card

import FavoriteButton from '@/components/favorite-button';
import MyListButton from '@/components/my-list-button';
import { Card, CardContent } from '@/components/ui/card';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { useUser } from '@/hooks/use-user';
import { formatDateJP } from '@/lib/util';
import { Book } from '@/types/book';
import { Link } from 'react-router-dom';

type Props = {
  book: Book;
};

export default function BookCard({ book }: Props) {
  const { user } = useUser();
  return (
    <>
      <Card className="border-card-foreground/5 bg-card/70">
        <CardContent className="relative flex w-40 flex-col items-center px-3 pb-2 pt-6 sm:w-48 sm:px-4">
          <Link className="flex justify-center" to={`/book/${book.id}`}>
            <img
              className="h-44 rounded object-cover sm:h-52"
              src={book.imageUrl}
              alt={book.title}
            />
          </Link>
          <div className="mt-1 flex w-full items-center justify-between">
            <p className="text-xs tracking-wide text-muted-foreground">
              {formatDateJP(book.publishedDate)}
            </p>
            {user && (
              <div className="flex">
                <Tooltip>
                  <TooltipTrigger asChild>
                    <MyListButton size="sm" />
                  </TooltipTrigger>
                  <TooltipContent>マイリストに追加</TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <FavoriteButton size="sm" book={book} />
                  </TooltipTrigger>
                  <TooltipContent>お気に入りに追加</TooltipContent>
                </Tooltip>
              </div>
            )}
          </div>
          <Link
            className="flex h-8 w-full items-center justify-center text-xs hover:text-primary sm:h-10 sm:text-sm"
            to={`/book/${book.id}`}
          >
            <p className="line-clamp-2 text-center">{book.title}</p>
          </Link>
        </CardContent>
      </Card>
    </>
  );
}

--------------------------------------------------
review-item

import Rating from '@/components/rating';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { formatDateJP, formatTime } from '@/lib/util';
import { Review } from '@/types/review';

type Props = {
  review: Review;
};

export default function ReviewItem({ review }: Props) {
  const { user, rating, comment, updatedAt } = review;

  return (
    <div>
      <div className="flex flex-col items-center justify-between gap-y-4 p-4 pb-0 sm:flex-row">
        <div className="flex items-center gap-x-4">
          <Avatar className="size-16">
            <AvatarImage
              className="bg-primary/50"
              src={user.avatarUrl}
              alt="avatar-image"
            />
            <AvatarFallback className="font-semibold">
              {user.name.slice(0, 1)}
            </AvatarFallback>
          </Avatar>
          <div>
            <p className="text-lg font-semibold">{user.name}</p>
            <p className="text-sm tracking-wide text-muted-foreground">
              {formatDateJP(updatedAt)} {formatTime(updatedAt)}
            </p>
          </div>
        </div>
        <Rating rating={rating} readOnly />
      </div>
      <p className="p-4 text-muted-foreground">{comment}</p>
    </div>
  );
}

--------------------------------------------------
review-list-skeleton

import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';

export default function ReviewListSkeleton() {
  return (
    <>
      <ul className="flex flex-col gap-y-6 p-3 sm:p-6">
        {[...Array<number>(2)].map((_, index) => (
          <li key={index}>
            <Separator className="bg-foreground/10" />
            <div className="flex flex-col items-center justify-between gap-y-4 p-4 pb-0 sm:flex-row">
              <div className="flex items-center gap-x-4">
                <Skeleton className="size-16 rounded-full bg-muted-foreground/5" />
                <div>
                  <Skeleton className="my-2 h-5 w-20 rounded-full bg-muted-foreground/5" />
                  <Skeleton className="my-2 h-5 w-32 rounded-full bg-muted-foreground/5" />
                </div>
              </div>
              <Skeleton className="h-8 w-40 rounded-full bg-muted-foreground/5" />
            </div>
            <div className="p-4">
              <Skeleton className="my-1 h-5 w-full rounded-full bg-muted-foreground/5" />
              <Skeleton className="my-1 h-5 w-3/4 rounded-full bg-muted-foreground/5" />
            </div>
          </li>
        ))}
      </ul>
    </>
  );
}

--------------------------------------------------
review-list

import ReviewItem from '@/components/review-list/review-item';
import { Separator } from '@/components/ui/separator';
import { Review } from '@/types/review';

type Props = {
  reviews: Review[];
};

export default function ReviewList({ reviews }: Props) {
  return (
    <ul className="flex flex-col p-3 sm:p-6">
      {reviews.map((review) => (
        <li key={review.id}>
          <Separator className="bg-foreground/10" />
          <ReviewItem review={review} />
        </li>
      ))}
    </ul>
  );
}

--------------------------------------------------
avatar-carousel

import SwipeArea from '@/components/swipe-area';
import { Avatar, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/util';
import { CheckIcon, ChevronLeft, ChevronRight } from 'lucide-react';
import { useEffect, useRef, useState } from 'react';

type AvatarSelectType = {
  index: number;
  avatarUrl: string;
};

type Props = {
  items: AvatarSelectType[];
  defaultSelected: number | undefined;
  onSelected: (index: number) => void;
  itemWidth?: number;
  paddingItem?: number;
  frameWidth?: number;
};

export default function AvatarCarousel({
  items,
  defaultSelected,
  onSelected,
  itemWidth = 100,
  paddingItem = 2,
  frameWidth = 400,
}: Props) {
  const extendedItems = [
    ...items.slice(-paddingItem),
    ...items,
    ...items.slice(0, paddingItem),
  ];

  const carouselRef = useRef<HTMLUListElement>(null);

  const [isVisible, setIsVisible] = useState(false);

  const [currentIndex, setCurrentIndex] = useState(0);
  const [innerIndex, setInnerIndex] = useState(0);
  const [defaultIndex, setDefaultIndex] = useState(0);

  const [isScrolling, setIsScrolling] = useState(false);
  const [marginLeft, setMarginLeft] = useState(0);

  useEffect(() => {
    if (defaultSelected !== undefined && !isVisible) {
      setInnerIndex(defaultSelected);
      setCurrentIndex(defaultSelected);
      setDefaultIndex(defaultSelected);

      carouselRef.current!.style.transitionProperty = 'none';
      setTimeout(() => {
        carouselRef.current!.style.transitionProperty = 'transform';
        setIsVisible(true);
      }, 100);
    }
  }, [defaultSelected, isVisible]);

  useEffect(() => {
    setMarginLeft(Math.floor(frameWidth / 2) - Math.floor(itemWidth / 2));
  }, [frameWidth, itemWidth]);

  const handlePrev = () => {
    if (isScrolling) return;
    setIsScrolling(true);
    setInnerIndex(innerIndex - 1);
    setCurrentIndex((currentIndex - 1 + items.length) % items.length);
    onSelected?.((currentIndex - 1 + items.length) % items.length);
  };

  const handleNext = () => {
    if (isScrolling) return;
    setIsScrolling(true);
    setInnerIndex(innerIndex + 1);
    setCurrentIndex((currentIndex + 1) % items.length);
    onSelected?.((currentIndex + 1) % items.length);
  };

  const handleTransitonEnd = () => {
    if (innerIndex >= 0 && innerIndex < items.length) {
      setIsScrolling(false);
      return;
    }

    const index = innerIndex > items.length - 1 ? 0 : items.length - 1;
    setInnerIndex(index);

    carouselRef.current!.style.transitionProperty = 'none';
    setTimeout(() => {
      carouselRef.current!.style.transitionProperty = 'transform';
      setIsScrolling(false);
    }, 50);
  };

  return (
    <div
      className={cn(
        'flex items-center transition-all duration-75 opacity-0',
        isVisible && 'opacity-100'
      )}
    >
      <Button
        className="rounded-full"
        type="button"
        variant="ghost"
        size="icon"
        onClick={handlePrev}
      >
        <ChevronLeft className="size-4" />
      </Button>

      <div
        className="relative w-full select-none overflow-hidden"
        style={{ width: `${frameWidth}px` }}
      >
        <ul
          ref={carouselRef}
          className="flex transition-transform duration-200"
          style={{
            transform: `translateX(-${(innerIndex + paddingItem) * itemWidth}px)`,
            marginLeft: `${marginLeft}px`,
          }}
          onTransitionEnd={handleTransitonEnd}
        >
          {extendedItems.map((item, index) => (
            <li
              key={index}
              className={`flex shrink-0 items-center justify-center`}
              style={{ width: `${itemWidth}px` }}
            >
              <div className="relative flex h-24 items-center">
                <Avatar
                  className={cn(
                    'transition-all duration-200',
                    'size-14 opacity-25 scale-100',
                    currentIndex === item.index &&
                      'opacity-100 scale-150 outline-1 outline-offset-1 outline outline-primary'
                  )}
                >
                  <AvatarImage
                    className="bg-primary"
                    src={item.avatarUrl}
                    alt="avatar-image"
                    draggable={false}
                  />
                </Avatar>
                {defaultIndex === item.index && (
                  <div
                    className={cn(
                      'absolute bottom-4 right-0 rounded-full bg-primary text-primary-foreground p-1 transition-all duration-200',
                      currentIndex === item.index && 'bottom-0 -right-4'
                    )}
                  >
                    <CheckIcon className="size-4" />
                  </div>
                )}
              </div>
            </li>
          ))}
        </ul>
        <SwipeArea
          className="absolute left-0 top-0 h-24 w-full"
          onSwipeLeft={handleNext}
          onSwipeRight={handlePrev}
        />
      </div>

      <Button
        className="rounded-full"
        type="button"
        variant="ghost"
        size="icon"
        onClick={handleNext}
      >
        <ChevronRight className="size-4" />
      </Button>
    </div>
  );
}

--------------------------------------------------
count-up-number

import { useCallback, useEffect, useState } from 'react';

type Props = {
  className?: string;
  start?: number;
  end: number;
  minInterval?: number; // 最小間隔
  maxInterval?: number; // 最大間隔
  normalInterval?: number; // 高速カウントアップ時の間隔
  delay?: number; // カウントアップ開始までの遅延時間（ミリ秒）
};

export default function CountUpNumber({
  className,
  start,
  end,
  minInterval = 20,
  maxInterval = 300,
  normalInterval = 20,
  delay = 0,
}: Props) {
  const initialStart = start ?? Math.max(0, end - 30);

  const [count, setCount] = useState(initialStart);
  const [isDelayComplete, setIsDelayComplete] = useState(delay === 0);

  // 遅延処理
  useEffect(() => {
    if (delay === 0) return;

    const delayTimeout = setTimeout(() => {
      setIsDelayComplete(true);
    }, delay);

    return () => clearTimeout(delayTimeout);
  }, [delay]);

  // イージング関数：最後の10カウント用
  const easeInOut = useCallback((progress: number): number => {
    return progress < 0.5
      ? 4 * progress ** 3 // 前半は加速 (ease-in)
      : 1 - Math.pow(-3 * progress + 3, 7) / 2; // 後半を非常に緩やかに減速
  }, []);

  useEffect(() => {
    // 遅延が完了していない場合は何もしない
    if (!isDelayComplete) return;
    if (count >= end) return; // カウント終了

    const isFinalPhase = count >= end - 10; // 最後の10カウントかどうかを判定

    let currentInterval: number;

    if (isFinalPhase) {
      // 最後の10カウントの場合、イージングを適用
      const progress = (count - (end - 10)) / 10; // 進捗率 (0 ~ 1)
      const easedProgress = easeInOut(progress);
      currentInterval = minInterval + (maxInterval - minInterval) * easedProgress;
    } else {
      // 高速カウントアップ
      currentInterval = normalInterval;
    }

    const timeout = setTimeout(() => {
      setCount((prev) => prev + 1);
    }, currentInterval);

    return () => clearTimeout(timeout);
  }, [count, easeInOut, end, isDelayComplete, maxInterval, minInterval, normalInterval]);

  return <span className={className}>{count}</span>;
}

--------------------------------------------------
swipe-area

import { useState } from 'react';

type Props = {
  className?: string;
  onSwipeUp?: () => void;
  onSwipeDown?: () => void;
  onSwipeLeft?: () => void;
  onSwipeRight?: () => void;
};

export default function SwipeArea({
  className,
  onSwipeUp,
  onSwipeDown,
  onSwipeLeft,
  onSwipeRight,
}: Props) {
  const [startX, setStartX] = useState(0);
  const [startY, setStartY] = useState(0);

  const handleTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {
    const touch = e.touches[0];
    setStartX(touch.clientX);
    setStartY(touch.clientY);
  };

  const handleTouchMove = (e: React.TouchEvent<HTMLDivElement>) => {
    if (!startX || !startY) {
      return;
    }

    const touch = e.touches[0];
    const diffX = touch.clientX - startX;
    const diffY = touch.clientY - startY;

    if (Math.abs(diffX) > Math.abs(diffY)) {
      if (diffX > 0) {
        onSwipeRight?.();
      } else {
        onSwipeLeft?.();
      }
    } else {
      if (diffY > 0) {
        onSwipeDown?.();
      } else {
        onSwipeUp?.();
      }
    }

    setStartX(0);
    setStartY(0);
  };

  return (
    <div
      className={className}
      onTouchStart={handleTouchStart}
      onTouchMove={handleTouchMove}
    ></div>
  );
}

--------------------------------------------------
constants

import { HeartIcon, ListIcon, SettingsIcon } from 'lucide-react';

// ロゴ
export const LOGO_TITLE = 'My Books';

// メニュー一覧
export const MENU_LIST = [
  { href: '/favorites', title: 'お気に入り', icon: HeartIcon },
  { href: '/my-lists', title: 'マイリスト', icon: ListIcon },
  { href: '/settings/profile', title: '設定', icon: SettingsIcon },
];

// API Endpoits
// export const BOOKS_API_ENDPOINT = 'http://vsv-emerald/my-books/api/v1';
// export const BOOKS_IMAGE_URL = 'http://vsv-emerald/images';
// export const AVATER_IMAGE_URL = 'https://vsv-emerald/images/avatars';

export const BOOKS_API_ENDPOINT = 'https://localhost/my-books/api/v1';
export const BOOKS_IMAGE_URL = 'https://localhost/images';
export const AVATER_IMAGE_URL = 'https://localhost/images/avatars';

--------------------------------------------------
use-confirm-dialog

import { CONFIRM_DIALOG_EVENT } from '@/components/confirm-dialog';

// 確認ダイアログの引数
export type ConfirmDialogOptions = {
  icon: string; // アイコンの種類（「''」「'i'」「'?'」「'!'」「'c'」）
  title: string; // タイトル
  message?: string; // メッセージ
  actionLabel?: string; // アクションボタンの文字（デフォルト「OK」）
  actionOnly?: boolean; // 「キャンセル」ボタンをなくす
  persistent?: boolean; // 永続化するか（要素外クリック、ESCキーでも閉じないようにするか）
  showInput?: boolean; // 入力欄を表示するか
  inputLabel?: string; // 入力欄のラベル
  inputPlaceholder?: string; // 入力欄のプレースホルダー
  inputRows?: number; // 入力欄の行数
  resolve?: (value: ConfirmDialogResult) => void;
};

// 確認ダイアログの戻り値
export type ConfirmDialogResult = {
  isAction: boolean;
  isCancel: boolean;
  text: string;
};

export const useConfirmDialog = () => {
  const confirmDialog = (options: ConfirmDialogOptions): Promise<ConfirmDialogResult> => {
    return new Promise((resolve) => {
      const event = new CustomEvent(CONFIRM_DIALOG_EVENT, {
        detail: { ...options, resolve },
      });
      document.dispatchEvent(event);
    });
  };
  return { confirmDialog };
};

--------------------------------------------------
use-toast

import { TOAST_EVENT } from '@/components/ui/toaster';

export type ToastEvent = {
  title?: string;
  description?: string;
  duration?: number;
  variant?: 'default' | 'destructive';
};

export const useToast = () => {
  const toast = (detail: ToastEvent) => {
    const event = new CustomEvent(TOAST_EVENT, { detail });
    document.dispatchEvent(event);
  };
  return { toast };
};

--------------------------------------------------
action

import { fetchWithAuth } from '@/lib/auth';
import { CreateReviewRequest } from '@/types/review';
import {
  ChangeEmailRequest,
  ChangePasswordRequest,
  UpdateUserRequest,
} from '@/types/user';

export const updateCurrentUser = async (requestBody: UpdateUserRequest) => {
  try {
    const url = `/me`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await fetchWithAuth(url, options);
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};

export const changePassword = async (requestBody: ChangePasswordRequest) => {
  try {
    const url = `/me/password`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await fetchWithAuth(url, options);
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};

export const changeEmail = async (requestBody: ChangeEmailRequest) => {
  try {
    const url = `/me/email`;
    const options: RequestInit = {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody),
    };
    await fetchWithAuth(url, options);
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};

export const createReview = async (reqestBody: CreateReviewRequest) => {
  try {
    const url = `/reviews`;
    const options: RequestInit = {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(reqestBody),
    };
    await fetchWithAuth(url, options);
    return true;
  } catch (e) {
    console.error(e);
    return false;
  }
};


--------------------------------------------------
data

import { BOOKS_API_ENDPOINT } from '@/constants/constants';
import { fetchWithAuth } from '@/lib/auth';
import { Book, Genre, PaginatedBook } from '@/types/book';
import { Review } from '@/types/review';
import { CheckNameExistsResponse, User } from '@/types/user';

export const FETCH_BOOKS_MAX_RESULTS = 20;

export const getBooksByQuery = async (q?: string, page: number = 0) => {
  if (!q) return emptyPaginatedBook();

  try {
    const url = `/books/search?q=${q}&page=${page}&maxResults=${FETCH_BOOKS_MAX_RESULTS}`;
    const paginatedBook = (await fetchJSON(url)) as PaginatedBook;
    return convertBookResponse(paginatedBook);
  } catch (e) {
    console.error(e);
    return null;
  }
};

export const getBookById = async (bookId?: string) => {
  if (!bookId) return null;

  try {
    const url = `/books/${bookId}`;
    const book = (await fetchJSON(url)) as Book;
    return convertBook(book);
  } catch (e) {
    console.error(e);
    return null;
  }
};

export const getGenres = async () => {
  try {
    const url = `/genres`;
    const genres = (await fetchJSON(url)) as Genre[];
    return genres;
  } catch (e) {
    console.error(e);
    return [];
  }
};

export const getBooksByGenreId = async (genreIdsQuery?: string, page: number = 0) => {
  if (!genreIdsQuery) return emptyPaginatedBook();

  try {
    // 「|」はそのまま渡すとエラーになるので、URLエンコードする
    const encodedParams = genreIdsQuery.replace(/\|/g, encodeURIComponent('|'));

    const url = `/books/discover?genreId=${encodedParams}&page=${page}&maxResults=${FETCH_BOOKS_MAX_RESULTS}`;
    const paginatedBook = (await fetchJSON(url)) as PaginatedBook;
    return convertBookResponse(paginatedBook);
  } catch (e) {
    console.error(e);
    return null;
  }
};

export const getNewReleases = async () => {
  try {
    const url = `/books/new-releases`;
    const books = (await fetchJSON(url)) as Book[];
    return convertBooks(books);
  } catch (e) {
    console.error(e);
    return [];
  }
};

export const getCurrentUser = async () => {
  try {
    const url = `/me`;
    const user = (await fetchWithAuth(url)) as User;
    return user;
  } catch (e) {
    console.error(e);
    return null;
  }
};

export const checkNameExists = async (name: string) => {
  try {
    const url = `/check-name-exists?name=${name}`;
    const data = (await fetchJSON(url)) as CheckNameExistsResponse;
    return data.exists;
  } catch (e) {
    console.error(e);
    return false; // エラーの場合「存在しない」とするのはどうかと思うけどいったんfalse
  }
};

export const getReviewsByBookId = async (bookId?: string) => {
  if (!bookId) return null;

  try {
    const url = `/reviews/book/${bookId}`;
    const reviews = (await fetchJSON(url)) as Review[];
    return reviews;
  } catch (e) {
    console.error(e);
    return [];
  }
};

const fetchJSON = async (url: string, options: RequestInit = {}) => {
  const res = await fetch(`${BOOKS_API_ENDPOINT}${url}`, options);
  if (!res.ok) {
    throw new Error(`失敗しました。URL: ${url} ステータス: ${res.status}`);
  }
  return res.json();
};

const convertBook = (book: Book) => {
  book.imageUrl = book.imageUrl ?? '/images/no-image.png';
  return book;
};

const convertBooks = (books: Book[]) => {
  return books.map((book) => convertBook(book));
};

const convertBookResponse = (paginatedBook: PaginatedBook) => {
  paginatedBook.books = convertBooks(paginatedBook.books);
  return paginatedBook;
};

const emptyPaginatedBook = (): PaginatedBook => {
  return {
    page: 0,
    totalPages: 0,
    totalItems: 0,
    books: [],
  };
};

--------------------------------------------------
util

import { clsx, type ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
/**
 * sleep関数
 * @param msec ミリ秒
 *
 * await sleep(3000);  // ３秒待つ
 */
export const sleep = (msec: number) =>
  new Promise((resolve) => setTimeout(resolve, msec));

/**
 * yyyy-MM-ddTHH:mm:ss形式の文字列を変換
 * @param dateString
 * @returns yyyy年M月d日の文字列
 */
export const formatDateJP = (dateString: string) => {
  const date = new Date(dateString);
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();

  return `${year}年${month}月${day}日`;
};

/**
 * yyyy-MM-ddTHH:mm:ss形式の文字列を変換
 * @param dateString
 * @returns yyyy/MM/dd日の文字列
 */
export const formatDate = (dateString: string) => {
  const date = new Date(dateString);
  const year = date.getFullYear().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');

  return `${year}/${month}/${day}`;
};

/**
 * yyyy-MM-ddTHH:mm:ss形式の文字列を変換
 * @param dateString
 * @returns HH:mmの文字列
 */
export const formatTime = (dateString: string) => {
  const date = new Date(dateString);
  const hours = date.getHours().toString().padStart(2, '0');
  const minutes = date.getMinutes().toString().padStart(2, '0');

  return `${hours}:${minutes}`;
};

/**
 * 価格をカンマ区切り数字文字列へ変換
 * @param price 価格
 * @returns カンマ区切り数字文字列
 */
export const priceToString = (price: number) => {
  return price === 0 ? '-' : `${Number(price).toLocaleString()}円`;
};

/**
 * ISBNの文字列をハイフンを含めたISBN文字列へ変換
 * @param isbn isbn文字列
 * @returns ハイフンを含めたISBN文字列
 */
export const formatIsbn = (isbnString: string) => {
  const country = isbnString.slice(0, 3);
  const area = isbnString.slice(3, 4);
  const publisher = isbnString.slice(4, 7);
  const book = isbnString.slice(7, 12);
  const check = isbnString.slice(12, 13);

  return country + '-' + area + '-' + publisher + '-' + book + '-' + check;
};

--------------------------------------------------
book/[bookId]
page

import BookDetail from '@/components/book-detail/book-detail';
import BookDetailSkeleton from '@/components/book-detail/book-detail-skeleton';
import ReviewList from '@/components/review-list/review-list';
import ReviewListSkeleton from '@/components/review-list/review-list-skeleton';
import { getBookById, getGenres, getReviewsByBookId } from '@/lib/data';
import ErrorElement from '@/routes/error-element';
import { Book, Genre } from '@/types/book';
import { Review } from '@/types/review';
import { Suspense } from 'react';
import { Await, LoaderFunctionArgs, useLoaderData } from 'react-router-dom';

type LoaderFunctionReturnType = {
  genres: Genre[];
  book: Promise<Book | null>;
  reviews: Promise<Review[]>;
};

const loader = async ({ params }: LoaderFunctionArgs) => {
  const genres = await getGenres();
  const book = getBookById(params.bookId);
  const reviews = getReviewsByBookId(params.bookId);

  return { book, genres, reviews };
};

export default function Page() {
  const { book, genres, reviews } = useLoaderData() as LoaderFunctionReturnType;

  return (
    <>
      <Suspense fallback={<BookDetailSkeleton />}>
        <Await resolve={book} errorElement={<ErrorElement />}>
          {(book) => <BookDetail book={book} genres={genres} />}
        </Await>
      </Suspense>

      <div className="mx-auto w-full lg:w-3/4">
        <Suspense fallback={<ReviewListSkeleton />}>
          <Await resolve={reviews} errorElement={<ErrorElement />}>
            {(reviews) => <ReviewList reviews={reviews} />}
          </Await>
        </Suspense>
      </div>
    </>
  );
}

Page.loader = loader;

--------------------------------------------------
my-lists
page

export default function Page() {
  return <div>MyListPage</div>;
}

--------------------------------------------------
change-email
page

import Logo from '@/components/layout/logo';
import PasswordInput from '@/components/password-input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useConfirmDialog } from '@/hooks/use-confirm-dialog';
import { useToast } from '@/hooks/use-toast';
import { useUser } from '@/hooks/use-user';
import { changeEmail } from '@/lib/action';
import { logout } from '@/lib/auth';
import { cn } from '@/lib/util';
import { Loader2Icon } from 'lucide-react';
import React, { useEffect, useRef, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

export default function Page() {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [emailErrorMessage, setEmailErrorMessage] = useState('');
  const [passwordErrorMessage, setPasswordErrorMessage] = useState('');

  const emailRef = useRef<HTMLInputElement | null>(null);

  const navigate = useNavigate();
  const { user, setUser } = useUser();
  const { toast } = useToast();
  const { confirmDialog } = useConfirmDialog();

  useEffect(() => {
    emailRef.current?.focus();
  }, []);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const form = new FormData(e.currentTarget);
    const email = form.get('email') as string;
    const password = form.get('password') as string;

    if (!(email && password)) {
      if (email === '') setEmailErrorMessage('メールアドレスは必須です。');
      if (password === '') setPasswordErrorMessage('パスワードは必須です。');
      return;
    }

    const { isCancel } = await confirmDialog({
      icon: '?',
      title: '本当に変更しますか？',
      message: 'メールアドレス変更後、一度ログアウトします。',
    });
    if (isCancel) return;

    setIsSubmitting(true);
    const isSuccess = await changeEmail({ email, password });
    if (!isSuccess) {
      setIsSubmitting(false);
      toast({
        title: 'メールアドレスを変更できませんでした',
        description: '入力内容を確認してください',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    toast({ title: 'メールアドレスを変更し、ログアウトしました' });

    await logout();
    setUser(null);
    setIsSubmitting(false);

    navigate('/login');
  };

  const handleCheckEmail = () => {
    setEmailErrorMessage('');

    if (!emailRef.current?.value) return;

    const emailRegex = /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!emailRegex.test(emailRef.current.value)) {
      setEmailErrorMessage('無効なメールアドレスです。');
    }
  };

  return (
    <div className="my-3 flex flex-col items-center justify-items-center gap-y-3 sm:my-16">
      <Logo size="lg" disableLink />
      <p className="font-semibold">メールアドレス変更</p>
      <Card className="w-80 rounded-3xl sm:w-96">
        <CardContent className="p-6 sm:px-10">
          <form className="flex w-full flex-col gap-y-4" onSubmit={handleSubmit}>
            <div>
              <Label className="text-xs" htmlFor="name">
                現在のメールアドレス
              </Label>
              <p className="my-2 rounded-full border border-transparent px-3 py-2 text-sm">
                {user?.email}
              </p>
            </div>

            <div>
              <Label className="text-xs" htmlFor="name">
                新しいメールアドレス
              </Label>
              <Input
                ref={emailRef}
                className={cn(
                  'my-2 rounded-full',
                  emailErrorMessage && 'border-destructive'
                )}
                id="email"
                name="email"
                autoComplete="off"
                spellCheck="false"
                onBlur={handleCheckEmail}
              />
              {emailErrorMessage && (
                <p className="text-xs text-destructive">{emailErrorMessage}</p>
              )}
            </div>

            <div>
              <Label className="text-xs" htmlFor="password">
                パスワード
              </Label>
              <PasswordInput
                className={cn(
                  'my-2 rounded-full',
                  passwordErrorMessage && 'border-destructive'
                )}
                id="password"
                name="password"
              />
              {passwordErrorMessage && (
                <p className="text-xs text-destructive">{passwordErrorMessage}</p>
              )}
            </div>

            <Button
              className="mt-6 w-full rounded-full"
              type="submit"
              disabled={isSubmitting}
            >
              {isSubmitting ? <Loader2Icon className="animate-spin" /> : '変更'}
            </Button>
            <Button
              className="w-full rounded-full bg-transparent"
              type="button"
              variant="outline"
              asChild
            >
              <Link to="/settings/profile">キャンセル</Link>
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

--------------------------------------------------
change-password
page

import Logo from '@/components/layout/logo';
import PasswordInput from '@/components/password-input';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import { useUser } from '@/hooks/use-user';
import { changePassword } from '@/lib/action';
import { getCurrentUser } from '@/lib/data';
import { Loader2Icon } from 'lucide-react';
import React, { useEffect, useRef, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

export default function Page() {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const currentPasswordRef = useRef<HTMLInputElement | null>(null);

  const navigate = useNavigate();
  const { setUser } = useUser();
  const { toast } = useToast();

  useEffect(() => {
    currentPasswordRef.current?.focus();
  }, []);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const form = new FormData(e.currentTarget);
    const currentPassword = form.get('current-password') as string;
    const newPassword = form.get('new-password') as string;
    const confirmNewPassword = form.get('confirm-new-password') as string;

    setIsSubmitting(true);
    const isSuccess = await changePassword({
      currentPassword,
      newPassword,
      confirmNewPassword,
    });
    if (!isSuccess) {
      setIsSubmitting(false);
      toast({
        title: 'パスワードを変更できませんでした',
        description: '入力内容を確認してください',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    toast({ title: 'パスワードを変更しました' });

    const currentUser = await getCurrentUser();
    setUser(currentUser);
    setIsSubmitting(false);

    navigate('/settings/profile');
  };

  return (
    <div className="my-3 flex flex-col items-center justify-items-center gap-y-3 sm:my-16">
      <Logo size="lg" disableLink />
      <p className="font-semibold">パスワード変更</p>
      <Card className="w-80 rounded-3xl sm:w-96">
        <CardContent className="p-6 sm:px-10">
          <form className="flex w-full flex-col gap-y-4" onSubmit={handleSubmit}>
            <div>
              <Label className="text-xs" htmlFor="current-password">
                現在のパスワード
              </Label>
              <PasswordInput
                ref={currentPasswordRef}
                className="my-2 rounded-full"
                id="current-password"
                name="current-password"
              />
            </div>

            <div>
              <Label className="text-xs" htmlFor="new-password">
                新しいパスワード
              </Label>
              <PasswordInput
                className="my-2 rounded-full"
                id="new-password"
                name="new-password"
              />
            </div>

            <div>
              <Label className="text-xs" htmlFor="confirm-new-password">
                新しいパスワード（確認用）
              </Label>
              <PasswordInput
                className="my-2 rounded-full"
                id="confirm-new-password"
                name="confirm-new-password"
              />
            </div>

            <Button
              className="mt-6 w-full rounded-full"
              type="submit"
              disabled={isSubmitting}
            >
              {isSubmitting ? <Loader2Icon className="animate-spin" /> : '変更'}
            </Button>
            <Button
              className="w-full rounded-full bg-transparent"
              type="button"
              variant="outline"
              asChild
            >
              <Link to="/settings/profile">キャンセル</Link>
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

--------------------------------------------------
change-user-info
page

import AvatarCarousel from '@/components/avatar-carousel';
import Logo from '@/components/layout/logo';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';
import { AVATER_IMAGE_URL } from '@/constants/constants';
import { useToast } from '@/hooks/use-toast';
import { useUser } from '@/hooks/use-user';
import { updateCurrentUser } from '@/lib/action';
import { checkNameExists, getCurrentUser } from '@/lib/data';
import { CircleHelpIcon, Loader2Icon } from 'lucide-react';
import React, { useEffect, useRef, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';

const AVATARS = [
  { index: 0, avatarUrl: `${AVATER_IMAGE_URL}/avatar00.png` },
  { index: 1, avatarUrl: `${AVATER_IMAGE_URL}/avatar01.png` },
  { index: 2, avatarUrl: `${AVATER_IMAGE_URL}/avatar02.png` },
  { index: 3, avatarUrl: `${AVATER_IMAGE_URL}/avatar03.png` },
  { index: 4, avatarUrl: `${AVATER_IMAGE_URL}/avatar04.png` },
  { index: 5, avatarUrl: `${AVATER_IMAGE_URL}/avatar05.png` },
  { index: 6, avatarUrl: `${AVATER_IMAGE_URL}/avatar06.png` },
  { index: 7, avatarUrl: `${AVATER_IMAGE_URL}/avatar07.png` },
  { index: 8, avatarUrl: `${AVATER_IMAGE_URL}/avatar08.png` },
  { index: 9, avatarUrl: `${AVATER_IMAGE_URL}/avatar09.png` },
  { index: 10, avatarUrl: `${AVATER_IMAGE_URL}/avatar10.png` },
];

export default function Page() {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const [nameErrorMessage, setNameErrorMessage] = useState('');

  const [defaultAvatar, setDefaultAvatar] = useState<number | undefined>(undefined);
  const nameRef = useRef<HTMLInputElement | null>(null);
  const avatarUrlRef = useRef<HTMLInputElement | null>(null);

  const navigate = useNavigate();
  const { user, setUser } = useUser();
  const { toast } = useToast();

  useEffect(() => {
    const initUserInfo = async () => {
      const currentUser = await getCurrentUser();
      setUser(currentUser);

      if (nameRef.current && avatarUrlRef.current && currentUser) {
        nameRef.current.focus();
        nameRef.current.value = currentUser.name || '';
        avatarUrlRef.current.value = currentUser.avatarUrl;

        const index =
          AVATARS.find((avatar) => avatar.avatarUrl === currentUser.avatarUrl)?.index ||
          0;

        setDefaultAvatar(index);
      }
    };
    initUserInfo();
  }, [setUser]);

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    const form = new FormData(e.currentTarget);
    const name = form.get('name') as string;
    const avatarUrl = form.get('avatar-url') as string;

    if (name === '') {
      setNameErrorMessage('ユーザー名は必須です。');
      return;
    }

    if (user?.name !== name && (await checkNameExists(name))) {
      setNameErrorMessage('そのユーザー名はすでに使われています。');
      return;
    }

    setIsSubmitting(true);
    const isSuccess = await updateCurrentUser({
      name,
      avatarUrl,
    });
    if (!isSuccess) {
      setIsSubmitting(false);
      toast({
        title: 'ユーザー情報を変更できませんでした',
        description: '入力内容を確認してください',
        variant: 'destructive',
        duration: 5000,
      });
      return;
    }

    toast({ title: 'ユーザー情報を変更しました' });

    const currentUser = await getCurrentUser();
    setUser(currentUser);
    setIsSubmitting(false);

    navigate('/settings/profile');
  };

  const handleSelectedAvatar = (selectedIndex: number) => {
    if (avatarUrlRef.current) {
      avatarUrlRef.current.value = AVATARS[selectedIndex].avatarUrl;
    }
  };

  return (
    <div className="my-3 flex flex-col items-center justify-items-center gap-y-3 sm:my-16">
      <Logo size="lg" disableLink />
      <p className="font-semibold">ユーザー情報の編集</p>
      <Card className="w-80 rounded-3xl sm:w-96">
        <CardContent className="p-6 sm:px-10">
          <form className="flex w-full flex-col gap-y-4" onSubmit={handleSubmit}>
            <div>
              <Label className="text-xs" htmlFor="name">
                ユーザー名
              </Label>
              <Input
                ref={nameRef}
                className="my-2 rounded-full"
                id="name"
                name="name"
                autoComplete="off"
                spellCheck="false"
              />
              <p className="h-4 text-xs text-destructive">{nameErrorMessage}</p>
            </div>

            <div className="mb-4">
              <div className="flex items-center gap-x-1">
                <Label className="text-xs" htmlFor="name">
                  アバター画像
                </Label>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <CircleHelpIcon className="size-4" />
                  </TooltipTrigger>
                  <TooltipContent>チェックマークは現在のアバターです</TooltipContent>
                </Tooltip>
              </div>
              <div className="flex justify-center">
                <AvatarCarousel
                  items={AVATARS}
                  itemWidth={80}
                  frameWidth={220}
                  defaultSelected={defaultAvatar}
                  onSelected={handleSelectedAvatar}
                />
              </div>
              <input
                ref={avatarUrlRef}
                className="w-[400px] text-black"
                type="text"
                name="avatar-url"
                hidden
              />
            </div>

            <Button className="w-full rounded-full" type="submit" disabled={isSubmitting}>
              {isSubmitting ? <Loader2Icon className="animate-spin" /> : '変更'}
            </Button>
            <Button
              className="w-full rounded-full bg-transparent"
              type="button"
              variant="outline"
              asChild
            >
              <Link to="/settings/profile">キャンセル</Link>
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}


--------------------------------------------------
profile
page

import CountUpNumber from '@/components/count-up-number';
import Logo from '@/components/layout/logo';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { useUser } from '@/hooks/use-user';
import { KeyRoundIcon, MailIcon, UserRoundIcon } from 'lucide-react';
import { Link } from 'react-router-dom';

export default function Page() {
  const { user } = useUser();

  if (!user) return null;

  return (
    <div className="my-3 flex flex-col items-center justify-items-center gap-y-3 sm:my-16">
      <Logo size="lg" disableLink />
      <p className="font-semibold">プロフィール</p>
      <Card className="w-80 overflow-hidden rounded-3xl sm:w-96">
        <CardHeader className="h-80 w-full bg-gradient-to-tr from-secondary to-primary">
          <div className="flex flex-col items-center pt-8">
            <Avatar className="mb-4 size-24">
              <AvatarImage
                className="bg-primary"
                src={user.avatarUrl}
                alt="avatar-image"
              />
              <AvatarFallback className="bg-primary text-5xl font-semibold">
                {user.name.slice(0, 1)}
              </AvatarFallback>
            </Avatar>
            <p className="text-xl font-semibold">{user.name}</p>
            <p className="text-sm">{user.email}</p>
          </div>
          <div className="flex justify-between pt-8">
            <div className="animate-fadeInUp-4 delay-0">
              <div className="w-20 text-center">
                <p className="text-xl font-bold">
                  <CountUpNumber end={15} delay={300} />
                </p>
                <p className="text-sm">お気に入り</p>
              </div>
            </div>
            <div className="animate-fadeInUp-4 delay-100">
              <div className="w-20 text-center">
                <p className="text-xl font-bold">
                  <CountUpNumber end={32} delay={400} />
                </p>
                <p className="text-sm">マイリスト</p>
              </div>
            </div>
            <div className="animate-fadeInUp-4 delay-200">
              <div className="w-20 text-center">
                <p className="text-xl font-bold">
                  <CountUpNumber end={112} delay={500} />
                </p>
                <p className="text-sm">レビュー</p>
              </div>
            </div>
          </div>
        </CardHeader>
        <CardContent className="relative p-6">
          <ul>
            <li className="flex items-center p-2">
              <UserRoundIcon className="mr-4" />
              <p>ユーザー情報</p>
              <div className="flex-1"></div>
              <Button className="rounded-full bg-transparent" variant="outline" asChild>
                <Link to="/settings/change-user-info">変更</Link>
              </Button>
            </li>
            <li className="flex items-center p-2">
              <MailIcon className="mr-4" />
              <p>メールアドレス</p>
              <div className="flex-1"></div>
              <Button className="rounded-full bg-transparent" variant="outline" asChild>
                <Link to="/settings/change-email">変更</Link>
              </Button>
            </li>
            <li className="flex items-center p-2">
              <KeyRoundIcon className="mr-4" />
              <p>パスワード</p>
              <div className="flex-1"></div>
              <Button className="rounded-full bg-transparent" variant="outline" asChild>
                <Link to="/settings/change-password">変更</Link>
              </Button>
            </li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}


--------------------------------------------------
route

import BookIdPage from '@/routes/book/[bookId]/page';
import DiscoverPage from '@/routes/discover/page';
import FavoritesPage from '@/routes/favorite/page';
import RootLayout from '@/routes/layout';
import LoginPage from '@/routes/login/page';
import MyListsPage from '@/routes/my-lists/page';
import RootPage from '@/routes/page';
import { ProtectedRoute } from '@/routes/protected-route';
import SearchPage from '@/routes/search/page';
import ChangeEmailPage from '@/routes/settings/change-email/page';
import ChangePasswordPage from '@/routes/settings/change-password/page';
import ChangeUserInfoPage from '@/routes/settings/change-user-info/page';
import ProfilePage from '@/routes/settings/profile/page';
import SignupPage from '@/routes/signup/page';
import { createBrowserRouter, createRoutesFromElements, Route } from 'react-router-dom';

export const router = createBrowserRouter(
  createRoutesFromElements(
    <Route>
      <Route path="/" element={<RootLayout />}>
        <Route index element={<RootPage />} loader={RootPage.loader} />

        <Route path="book">
          <Route path=":bookId" element={<BookIdPage />} loader={BookIdPage.loader} />
        </Route>

        <Route path="search">
          <Route index element={<SearchPage />} loader={SearchPage.loader} />
        </Route>

        <Route path="discover">
          <Route index element={<DiscoverPage />} loader={DiscoverPage.loader} />
        </Route>

        <Route path="login">
          <Route index element={<LoginPage />} />
        </Route>

        <Route path="signup">
          <Route index element={<SignupPage />} />
        </Route>

        <Route element={<ProtectedRoute />}>
          <Route path="favorites">
            <Route index element={<FavoritesPage />} />
          </Route>

          <Route path="my-lists">
            <Route index element={<MyListsPage />} />
          </Route>

          <Route path="settings">
            <Route path="profile" element={<ProfilePage />} />
            <Route path="change-user-info" element={<ChangeUserInfoPage />} />
            <Route path="change-email" element={<ChangeEmailPage />} />
            <Route path="change-password" element={<ChangePasswordPage />} />
          </Route>
        </Route>
      </Route>
    </Route>
  )
);

--------------------------------------------------
review

import { Book } from '@/types/book';
import { SimpleUserInfo } from '@/types/user';

export interface Review {
  id: number;
  comment: string;
  rating: number;
  updatedAt: string;
  user: SimpleUserInfo;
  book: Book;
}

export interface CreateReviewRequest {
  comment: string;
  rating: number;
  bookId: string;
  userId: number;
}

--------------------------------------------------
user

export interface User {
  id: number;
  email: string;
  roles: string[];
  name: string;
  avatarUrl: string;
}

export interface SimpleUserInfo {
  id: number;
  name: string;
  avatarUrl: string;
}

export interface UpdateUserRequest {
  name: string;
  avatarUrl: string;
}

export interface ChangePasswordRequest {
  currentPassword: string;
  newPassword: string;
  confirmNewPassword: string;
}

export interface ChangeEmailRequest {
  email: string;
  password: string;
}

export interface CheckNameExistsResponse {
  exists: boolean;
}

--------------------------------------------------
index.css

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: 'Inter', 'Noto Sans JP', system-ui, sans-serif;
  }
  body {
    touch-action: pan-y;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

/*
カラーテーマは以下のページからコピペ
https://ui.jln.dev/
*/

@layer base {
  :root {
    /* --background: 210 25% 98%;
    --foreground: 234 10% 37%;
    --muted: 210 12% 90%;
    --muted-foreground: 210 12% 30%;
    --popover: 210 25% 95%;
    --popover-foreground: 234 10% 27%;
    --card: 210 25% 96%;
    --card-foreground: 234 10% 32%;
    --border: 210 15% 93%;
    --input: 210 15% 90%;
    --primary: 140 59% 43%;
    --primary-foreground: 0 0% 100%;
    --secondary: 140 30% 75%;
    --secondary-foreground: 140 30% 15%;
    --accent: 210 25% 83%;
    --accent-foreground: 210 25% 23%;
    --destructive: 8 93% 44%;
    --destructive-foreground: 0 0% 100%; */

    --background: 112 100% 97%;
    --foreground: 60 2% 30%;
    --muted: 112 12% 90%;
    --muted-foreground: 112 12% 30%;
    --popover: 112 100% 94%;
    --popover-foreground: 60 2% 20%;
    --card: 112 100% 95%;
    --card-foreground: 60 2% 25%;
    --border: 112 90% 92%;
    --input: 112 90% 89%;
    --primary: 123 43% 39%;
    --primary-foreground: 0 0% 100%;
    --secondary: 123 30% 75%;
    --secondary-foreground: 123 30% 15%;
    --accent: 112 100% 82%;
    --accent-foreground: 112 100% 2%;
    --destructive: 2 96% 27%;
    --destructive-foreground: 2 96% 87%;

    /* --background: 0 0% 100%;
    --foreground: 167 62% 25%;
    --muted: 0 12% 90%;
    --muted-foreground: 0 12% 30%;
    --popover: 0 0% 97%;
    --popover-foreground: 167 62% 15%;
    --card: 0 0% 98%;
    --card-foreground: 167 62% 20%;
    --border: 0 0% 95%;
    --input: 0 0% 92%;
    --primary: 143 88% 29%;
    --primary-foreground: 0 0% 100%;
    --secondary: 143 30% 75%;
    --secondary-foreground: 143 30% 15%;
    --accent: 0 0% 85%;
    --accent-foreground: 0 0% 25%;
    --destructive: 7 100% 27%;
    --destructive-foreground: 7 100% 87%; */

    --ring: 155 58% 29%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 200 19% 18%;
    --foreground: 0 0% 96%;
    --muted: 200 12% 22%;
    --muted-foreground: 200 12% 72%;
    --popover: 200 19% 15%;
    --popover-foreground: 0 0% 100%;
    --card: 200 19% 16%;
    --card-foreground: 0 0% 100%;
    --border: 200 9% 23%;
    --input: 200 9% 26%;
    --primary: 123 49% 59%;
    --primary-foreground: 0 0% 0%;
    --secondary: 123 30% 25%;
    --secondary-foreground: 123 30% 85%;
    --accent: 200 19% 33%;
    --accent-foreground: 200 19% 93%;
    --destructive: 4 91% 59%;
    --destructive-foreground: 0 0% 100%;
    --ring: 123 49% 59%;
  }
}

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
