１１ファイル
------------------------------------------------------------
bookmark-list.tsx

import BookmarkItem from '@/components/bookmarks/bookmark-item';
import { Bookmark } from '@/types';

type Props = {
  bookmarks: Bookmark[];
};

export default function BookmarkList({ bookmarks }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {bookmarks.map((bookmark) => (
        <li key={bookmark.id}>
          <article>
            <BookmarkItem bookmark={bookmark} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
favorite-list.tsx

import FavoriteItem from '@/components/favorites/favorite-item';
import { Favorite } from '@/types';

type Props = {
  favorites: Favorite[];
};

export default function FavoriteList({ favorites }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {favorites.map((favorite, index) => (
        <li key={index}>
          <article>
            <FavoriteItem favorite={favorite} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
nav-list.tsx

import NavigateLink from '@/components/layout/navigate-link';
import { cn } from '@/lib/utils';
import { useLocation } from 'react-router';

const NAV_LIST = [
  {
    href: '/discover?genreIds=1&condition=SINGLE',
    title: 'ジャンル',
  },
  { href: '/ranking', title: 'ランキング' },
  { href: '/special-features', title: '特集' },
  { href: '/settings', title: '設定' },
];

type Props = {
  onClick?: () => void;
};

export default function NavList({ onClick }: Props) {
  const location = useLocation();

  return (
    <nav>
      <ul className="flex flex-col gap-y-2 lg:flex-row lg:gap-x-2">
        {NAV_LIST.map((item) => (
          <li key={item.href}>
            <NavigateLink
              className={cn(
                location.pathname !== '/' &&
                  item.href.includes(location.pathname) &&
                  'text-primary'
              )}
              href={item.href}
              onClick={onClick}
            >
              {item.title}
            </NavigateLink>
          </li>
        ))}
      </ul>
    </nav>
  );
}

------------------------------------------------------------
navigate-link.tsx

import { cn } from '@/lib/utils';
import { HTMLAttributes } from 'react';
import { Link } from 'react-router';

type Props = HTMLAttributes<HTMLAnchorElement> & {
  href: string;
};

export default function NavigateLink({
  href,
  className,
  children,
  ...props
}: Props) {
  return (
    <Link
      className={cn(
        'group w-full',
        "focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive inline-flex shrink-0 items-center justify-center gap-2 rounded-md text-sm font-medium whitespace-nowrap transition-all outline-none focus-visible:ring-[3px] disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class='size-'])]:size-4",
        'h-9 px-4 py-2 has-[>svg]:px-3'
      )}
      to={href}
      {...props}
    >
      <div
        className={cn(
          '[&>*]:after:bg-primary [&>*]:relative [&>*]:inline-block [&>*]:after:absolute [&>*]:after:-bottom-1 [&>*]:after:left-0 [&>*]:after:h-0.5 [&>*]:after:w-0 [&>*]:after:transition-all [&>*]:after:duration-300 group-hover:[&>*]:after:w-full',
          className
        )}
      >
        <span>{children}</span>
      </div>
    </Link>
  );
}

------------------------------------------------------------
my-review-list.tsx

import MyReviewItem from '@/components/reviews/my-review-item';
import { Review } from '@/types';

type Props = {
  reviews: Review[];
};

export default function MyReviewList({ reviews }: Props) {
  return (
    <ul className="flex flex-col gap-y-2">
      {reviews.map((review) => (
        <li key={review.id}>
          <article>
            <MyReviewItem review={review} />
          </article>
        </li>
      ))}
    </ul>
  );
}

------------------------------------------------------------
settings/
theme-card.tsx

import { Card, CardContent } from '@/components/ui/card';
import { useRipple } from '@/hooks/use-ripple';
import { cn } from '@/lib/utils';
import { ThemeStyle, useThemeStyle } from '@/providers/theme-style-provider';
import React from 'react';

export type ThemeCardProps = {
  themeStyle: ThemeStyle;
  title: string;
  bg: string;
  border: string;
  primary: string;
  secondary: string;
  accent: string;
  background: string;
};

type Props = {
  card: ThemeCardProps;
};
export default function ThemeCard({ card }: Props) {
  const { themeStyle: currentThemeStyle, setThemeStyle } = useThemeStyle();
  const { containerRef, createRipple } = useRipple();

  const handleClick = (e: React.MouseEvent) => {
    setThemeStyle(card.themeStyle);
    createRipple(e);
  };

  return (
    <Card
      className={cn(
        'transition-transform duration-300 ease-out hover:-translate-y-0.5 hover:shadow-xl',
        'relative overflow-hidden',
        'border-transparent hover:cursor-pointer',
        currentThemeStyle === card.themeStyle && card.border,
        card.bg
      )}
      ref={containerRef}
      onClick={handleClick}
    >
      <CardContent>
        <div className="flex flex-col items-center gap-2 md:flex-row">
          <div className="flex gap-x-1">
            <div className={cn('size-3 rounded-sm', card.primary)} />
            <div className={cn('size-3 rounded-sm', card.secondary)} />
            <div className={cn('size-3 rounded-sm', card.accent)} />
            <div className={cn('size-3 rounded-sm', card.background)} />
          </div>
          <p className="text-nowrap">{card.title}</p>
        </div>
      </CardContent>
    </Card>
  );
}

------------------------------------------------------------
button.tsx

import { Slot } from '@radix-ui/react-slot';
import { cva, type VariantProps } from 'class-variance-authority';
import * as React from 'react';

import { cn } from '@/lib/utils';

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        destructive:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'border border-primary/50 text-primary bg-transparent hover:bg-primary/20 hover:border-primary',
        secondary:
          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
        ghost:
          'border border-transparent bg-transparent text-foreground hover:bg-primary/20 hover:text-primary',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button';
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    );
  }
);
Button.displayName = 'Button';

export { Button, buttonVariants };

------------------------------------------------------------
use-ripple.ts

import { useRef } from 'react';

export function useRipple() {
  const containerRef = useRef<HTMLDivElement | null>(null);

  const createRipple = (event: React.MouseEvent) => {
    const container = containerRef.current;
    if (!container) return;

    const rect = container.getBoundingClientRect();
    const ripple = document.createElement('span');

    const size = Math.max(rect.width, rect.height);
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;

    ripple.className = `
      absolute
      rounded-full
      bg-white
      opacity-10
      pointer-events-none
      animate-ripple
    `;
    ripple.style.width = ripple.style.height = `${size}px`;
    ripple.style.left = `${x}px`;
    ripple.style.top = `${y}px`;

    container.appendChild(ripple);

    ripple.addEventListener('animationend', () => {
      ripple.remove();
    });
  };

  return { containerRef, createRipple };
}

------------------------------------------------------------
theme-style-provider.tsx

import {
  createContext,
  ReactNode,
  useContext,
  useEffect,
  useState,
} from 'react';

export type ThemeStyle =
  | 'default'
  | 'claude'
  | 't3-chat'
  | 'claymorphism'
  | 'solar-dusk'
  | 'notebook'
  | 'perpetuity'
  | 'vintage-paper'
  | 'candyland'
  | 'supabase'
  | 'twitter'
  | 'vercel';

type ThemeStyleProviderProps = {
  children: ReactNode;
  defaultTheme?: ThemeStyle;
  storageKey?: string;
};

type ThemeStyleContextState = {
  themeStyle: ThemeStyle;
  setThemeStyle: (theme: ThemeStyle) => void;
};

const initialState: ThemeStyleContextState = {
  themeStyle: 'default',
  setThemeStyle: () => null,
};

const ThemeStyleContext = createContext<ThemeStyleContextState>(initialState);

export function ThemeStyleProvider({
  children,
  defaultTheme = 'default',
  storageKey = 'vite-ui-theme-style',
  ...props
}: ThemeStyleProviderProps) {
  const [themeStyle, setThemeStyle] = useState<ThemeStyle>(() => {
    return (localStorage.getItem(storageKey) as ThemeStyle) || defaultTheme;
  });

  useEffect(() => {
    const existingLink = document.getElementById('theme-stylesheet');
    if (existingLink) {
      // 設定しているCSSをすぐに削除すると、デフォルトで設定しているCSSに一瞬変わった後に
      // 新しく読み込んだCSSになるのでカクつく。そのため時間差をつくる。
      setTimeout(() => {
        document.head.removeChild(existingLink);
      }, 200);
    }

    const link = document.createElement('link');
    link.id = 'theme-stylesheet';
    link.rel = 'stylesheet';
    link.href = `/theme-styles/${themeStyle}-theme.css`;

    document.head.appendChild(link);
  }, [themeStyle]);

  const value = {
    themeStyle,
    setThemeStyle: (themeStyle: ThemeStyle) => {
      localStorage.setItem(storageKey, themeStyle);
      setThemeStyle(themeStyle);
    },
  };

  return (
    <ThemeStyleContext.Provider {...props} value={value}>
      {children}
    </ThemeStyleContext.Provider>
  );
}

export const useThemeStyle = () => {
  const context = useContext(ThemeStyleContext);

  if (context === undefined)
    throw new Error('useThemeStyle must be used within a ThemeStyleProvider');

  return context;
};

------------------------------------------------------------
routes/settings/
page.tsx

import ThemeCard, { ThemeCardProps } from '@/components/settings/theme-card';
import { Separator } from '@/components/ui/separator';
import { APP_TITLE } from '@/constants/constants';

const THEME_CARDS: ThemeCardProps[] = [
  {
    themeStyle: 'default',
    title: 'Default',
    bg: 'bg-[oklch(0.52_0.13_144.17)]/20 dark:bg-[oklch(0.75_0.17_144.65)]/20',
    border:
      'border-[oklch(0.52_0.13_144.17)] dark:border-[oklch(0.75_0.17_144.65)]',
    primary: 'bg-[oklch(0.52_0.13_144.17)] dark:bg-[oklch(0.75_0.17_144.65)]',
    secondary: 'bg-[oklch(0.96_0.02_147.64)] dark:bg-[oklch(0.4_0.07_145.17)]',
    accent: 'bg-[oklch(0.9_0.05_146.04)] dark:bg-[oklch(0.45_0.03_231.13)]',
    background: 'bg-[oklch(0.97_0.01_80.72)] dark:bg-[oklch(0.3_0.02_232.02)]',
  },
  {
    themeStyle: 'claude',
    title: 'Claude',
    bg: 'bg-[oklch(0.62_0.14_39.04)]/20 dark:bg-[oklch(0.67_0.13_38.76)]/20',
    border:
      'border-[oklch(0.62_0.14_39.04)] dark:border-[oklch(0.67_0.13_38.76)]',
    primary: 'bg-[oklch(0.62_0.14_39.04)] dark:bg-[oklch(0.67_0.13_38.76)]',
    secondary: 'bg-[oklch(0.92_0.01_92.99)] dark:bg-[oklch(0.98_0.01_95.1)]',
    accent: 'bg-[oklch(0.92_0.01_92.99)] dark:bg-[oklch(0.21_0.01_95.42)]',
    background: 'bg-[oklch(0.98_0.01_95.1)] dark:bg-[oklch(0.27_0_106.64)]',
  },
  {
    themeStyle: 't3-chat',
    title: 'T3 Chat',
    bg: 'bg-[oklch(0.53_0.14_355.2)]/20 dark:bg-[oklch(0.46_0.19_4.1)]/20',
    border:
      'border-[oklch(0.53_0.14_355.2)] dark:border-[oklch(0.46_0.19_4.1)]',
    primary: 'bg-[oklch(0.53_0.14_355.2)] dark:bg-[oklch(0.46_0.19_4.1)]',
    secondary: 'bg-[oklch(0.87_0.07_334.9)] dark:bg-[oklch(0.31_0.03_310.06)]',
    accent: 'bg-[oklch(0.87_0.07_334.9)] dark:bg-[oklch(0.36_0.05_308.49)]',
    background:
      'bg-[oklch(0.98_0.01_325.64)] dark:bg-[oklch(0.24_0.02_307.53)]',
  },
  {
    themeStyle: 'claymorphism',
    title: 'Claymorphism',
    bg: 'bg-[oklch(0.59_0.2_277.12)]/20 dark:bg-[oklch(0.68_0.16_276.93)]/20',
    border:
      'border-[oklch(0.59_0.2_277.12)] dark:border-[oklch(0.68_0.16_276.93)]',
    primary: 'bg-[oklch(0.59_0.2_277.12)] dark:bg-[oklch(0.68_0.16_276.93)]',
    secondary: 'bg-[oklch(0.87_0_56.37)] dark:bg-[oklch(0.34_0.01_59.42)]',
    accent: 'bg-[oklch(0.94_0.03_321.94)] dark:bg-[oklch(0.39_0.01_59.47)]',
    background: 'bg-[oklch(0.92_0_48.72)] dark:bg-[oklch(0.22_0.01_67.44)]',
  },
  {
    themeStyle: 'solar-dusk',
    title: 'Solar dusk',
    bg: 'bg-[oklch(0.56_0.15_49)]/20 dark:bg-[oklch(0.7_0.19_47.6)]/20',
    border: 'border-[oklch(0.56_0.15_49)] dark:border-[oklch(0.7_0.19_47.6)]',
    primary: 'bg-[oklch(0.56_0.15_49)] dark:bg-[oklch(0.7_0.19_47.6)]',
    secondary: 'bg-[oklch(0.83_0.08_74.44)] dark:bg-[oklch(0.44_0.01_73.64)]',
    accent: 'bg-[oklch(0.9_0.05_74.99)] dark:bg-[oklch(0.36_0.05_229.32)]',
    background: 'bg-[oklch(0.99_0.01_84.57)] dark:bg-[oklch(0.22_0.01_56.04)]',
  },
  {
    themeStyle: 'notebook',
    title: 'Notebook',
    bg: 'bg-[oklch(0.49_0_0)]/20 dark:bg-[oklch(0.76_0_0)]/20',
    border: 'border-[oklch(0.49_0_0)] dark:border-[oklch(0.76_0_0)]',
    primary: 'bg-[oklch(0.49_0_0)] dark:bg-[oklch(0.76_0_0)]',
    secondary: 'bg-[oklch(0.9_0_0)] dark:bg-[oklch(0.47_0_0)]',
    accent: 'bg-[oklch(0.94_0.05_94.85)] dark:bg-[oklch(0.91_0_0)]',
    background: 'bg-[oklch(0.98_0_0)] dark:bg-[oklch(0.29_0_0)]',
  },
  {
    themeStyle: 'perpetuity',
    title: 'perpetuity',
    bg: 'bg-[oklch(0.56_0.09_203.28)]/20 dark:bg-[oklch(0.85_0.13_195.04)]/20',
    border:
      'border-[oklch(0.56_0.09_203.28)] dark:border-[oklch(0.85_0.13_195.04)]',
    primary: 'bg-[oklch(0.56_0.09_203.28)] dark:bg-[oklch(0.85_0.13_195.04)]',
    secondary: 'bg-[oklch(0.92_0.02_196.84)] dark:bg-[oklch(0.38_0.06_216.5)]',
    accent: 'bg-[oklch(0.9_0.03_201.89)] dark:bg-[oklch(0.38_0.06_216.5)]',
    background:
      'bg-[oklch(0.95_0.01_197.01)] dark:bg-[oklch(0.21_0.02_224.45)]',
  },
  {
    themeStyle: 'vintage-paper',
    title: 'Vintage Paper',
    bg: 'bg-[oklch(0.62_0.08_65.54)]/20 dark:bg-[oklch(0.73_0.06_66.7)]/20',
    border:
      'border-[oklch(0.62_0.08_65.54)] dark:border-[oklch(0.73_0.06_66.7)]',
    primary: 'bg-[oklch(0.62_0.08_65.54)] dark:bg-[oklch(0.73_0.06_66.7)]',
    secondary: 'bg-[oklch(0.88_0.03_85.57)] dark:bg-[oklch(0.38_0.02_57.13)]',
    accent: 'bg-[oklch(0.83_0.04_88.81)] dark:bg-[oklch(0.42_0.03_56.34)]',
    background: 'bg-[oklch(0.96_0.02_90.24)] dark:bg-[oklch(0.27_0.01_57.65)]',
  },
  {
    themeStyle: 'candyland',
    title: 'Candyland',
    bg: 'bg-[oklch(0.87_0.07_7.09)]/20 dark:bg-[oklch(0.8_0.14_349.23)]/20',
    border:
      'border-[oklch(0.87_0.07_7.09)] dark:border-[oklch(0.8_0.14_349.23)]',
    primary: 'bg-[oklch(0.87_0.07_7.09)] dark:bg-[oklch(0.8_0.14_349.23)]',
    secondary: 'bg-[oklch(0.81_0.08_225.75)] dark:bg-[oklch(0.74_0.23_142.85)]',
    accent: 'bg-[oklch(0.97_0.21_109.77)] dark:bg-[oklch(0.81_0.08_225.75)]',
    background: 'bg-[oklch(0.98_0_228.78)] dark:bg-[oklch(0.23_0.01_264.29)]',
  },
  {
    themeStyle: 'supabase',
    title: 'supabase',
    bg: 'bg-[oklch(0.83_0.13_160.91)]/20 dark:bg-[oklch(0.44_0.1_156.76)]/20',
    border:
      'border-[oklch(0.83_0.13_160.91)] dark:border-[oklch(0.44_0.1_156.76)]',
    primary: 'bg-[oklch(0.83_0.13_160.91)] dark:bg-[oklch(0.44_0.1_156.76)]',
    secondary: 'bg-[oklch(0.99_0_0)] dark:bg-[oklch(0.26_0_0)]',
    accent: 'bg-[oklch(0.95_0_0)] dark:bg-[oklch(0.31_0_0)]',
    background: 'bg-[oklch(0.99_0_0)] dark:bg-[oklch(0.18_0_0)]',
  },
  {
    themeStyle: 'twitter',
    title: 'Twitter',
    bg: 'bg-[oklch(0.67_0.16_245)]/20 dark:bg-[oklch(0.67_0.16_245)]/20',
    border: 'border-[oklch(0.67_0.16_245)] dark:border-[oklch(0.67_0.16_245)]',
    primary: 'bg-[oklch(0.67_0.16_245)] dark:bg-[oklch(0.67_0.16_245)]',
    secondary: 'bg-[oklch(0.19_0.01_248.51)] dark:bg-[oklch(0.96_0_219.53)]',
    accent: 'bg-[oklch(0.94_0.02_250.85)] dark:bg-[oklch(0.19_0.03_242.55)]',
    background: 'bg-[oklch(1_0_0)] dark:bg-[oklch(0_0_0)]',
  },
  {
    themeStyle: 'vercel',
    title: 'Vercel',
    bg: 'bg-[oklch(0_0_0)]/20 dark:bg-[oklch(1_0_0)]/20',
    border: 'border-[oklch(0_0_0)] dark:border-[oklch(1_0_0)]',
    primary: 'bg-[oklch(0_0_0)] dark:bg-[oklch(1_0_0)]',
    secondary: 'bg-[oklch(0.94_0_0)] dark:bg-[oklch(0.25_0_0)]',
    accent: 'bg-[oklch(0.94_0_0)] dark:bg-[oklch(0.32_0_0)]',
    background: 'bg-[oklch(0.99_0_0)] dark:bg-[oklch(0_0_0)]',
  },
];

type Props = {
  title: string;
};

export default function Page({ title }: Props) {
  return (
    <>
      <title>{`${title} - ${APP_TITLE}`}</title>

      <div className="m-4 flex h-10 items-center">
        <h1>設定</h1>
      </div>

      <Separator className="bg-foreground/10 my-4" />

      <section className="p-4">
        <h2 className="mb-4">テーマ</h2>

        <div className="grid grid-cols-2 gap-2 sm:grid-cols-3">
          {THEME_CARDS.map((card) => (
            <ThemeCard card={card} key={card.themeStyle} />
          ))}
        </div>
      </section>
    </>
  );
}

------------------------------------------------------------
index.css

@import 'tailwindcss';
@import 'tw-animate-css';

@custom-variant dark (&:is(.dark *));

/* https://tweakcn.com/ で色情報を作成 */
:root {
  --background: oklch(0.97 0.01 80.72);
  --foreground: oklch(0.3 0.04 30.2);
  --card: oklch(0.97 0.01 80.72);
  --card-foreground: oklch(0.3 0.04 30.2);
  --popover: oklch(0.97 0.01 80.72);
  --popover-foreground: oklch(0.3 0.04 30.2);
  --primary: oklch(0.52 0.13 144.17);
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.96 0.02 147.64);
  --secondary-foreground: oklch(0.43 0.12 144.31);
  --muted: oklch(0.94 0.01 74.42);
  --muted-foreground: oklch(0.45 0.05 39.21);
  --accent: oklch(0.9 0.05 146.04);
  --accent-foreground: oklch(0.43 0.12 144.31);
  --destructive: oklch(0.54 0.19 26.72);
  --destructive-foreground: oklch(1 0 0);
  --border: oklch(0.88 0.02 74.64);
  --input: oklch(0.88 0.02 74.64);
  --ring: oklch(0.52 0.13 144.17);
  --chart-1: oklch(0.67 0.16 144.21);
  --chart-2: oklch(0.58 0.14 144.18);
  --chart-3: oklch(0.52 0.13 144.17);
  --chart-4: oklch(0.43 0.12 144.31);
  --chart-5: oklch(0.22 0.05 145.73);
  --sidebar: oklch(0.94 0.01 74.42);
  --sidebar-foreground: oklch(0.3 0.04 30.2);
  --sidebar-primary: oklch(0.52 0.13 144.17);
  --sidebar-primary-foreground: oklch(1 0 0);
  --sidebar-accent: oklch(0.9 0.05 146.04);
  --sidebar-accent-foreground: oklch(0.43 0.12 144.31);
  --sidebar-border: oklch(0.88 0.02 74.64);
  --sidebar-ring: oklch(0.52 0.13 144.17);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Noto Serif JP, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

.dark {
  --background: oklch(0.3 0.02 232.02);
  --foreground: oklch(0.94 0.01 72.66);
  --card: oklch(0.28 0.02 229.7);
  --card-foreground: oklch(0.94 0.01 72.66);
  --popover: oklch(0.27 0.02 229.77);
  --popover-foreground: oklch(0.94 0.01 72.66);
  --primary: oklch(0.75 0.17 144.65);
  --primary-foreground: oklch(0.22 0.05 145.73);
  --secondary: oklch(0.4 0.07 145.17);
  --secondary-foreground: oklch(0.9 0.04 146.44);
  --muted: oklch(0.34 0.01 226.41);
  --muted-foreground: oklch(0.78 0.01 231.27);
  --accent: oklch(0.45 0.03 231.13);
  --accent-foreground: oklch(0.94 0.01 72.66);
  --destructive: oklch(0.64 0.22 28.58);
  --destructive-foreground: oklch(0.94 0.01 72.66);
  --border: oklch(0.35 0.01 225.37);
  --input: oklch(0.38 0.01 229.22);
  --ring: oklch(0.75 0.17 144.65);
  --chart-1: oklch(0.77 0.12 145.3);
  --chart-2: oklch(0.72 0.14 144.89);
  --chart-3: oklch(0.67 0.16 144.21);
  --chart-4: oklch(0.63 0.15 144.2);
  --chart-5: oklch(0.58 0.14 144.18);
  --sidebar: oklch(0.27 0.03 150.77);
  --sidebar-foreground: oklch(0.94 0.01 72.66);
  --sidebar-primary: oklch(0.67 0.16 144.21);
  --sidebar-primary-foreground: oklch(0.22 0.05 145.73);
  --sidebar-accent: oklch(0.58 0.14 144.18);
  --sidebar-accent-foreground: oklch(0.94 0.01 72.66);
  --sidebar-border: oklch(0.39 0.03 142.99);
  --sidebar-ring: oklch(0.67 0.16 144.21);
  --font-sans: Inter, Noto Sans JP, sans-serif;
  --font-serif: Zen Old Mincho, serif;
  --font-mono:
    ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono',
    'Courier New', monospace;
  --radius: 1.5rem;
  --shadow-2xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-xs: 0 1px 3px 0px hsl(0 0% 0% / 0.05);
  --shadow-sm:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow: 0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 1px 2px -1px hsl(0 0% 0% / 0.1);
  --shadow-md:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 2px 4px -1px hsl(0 0% 0% / 0.1);
  --shadow-lg:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 4px 6px -1px hsl(0 0% 0% / 0.1);
  --shadow-xl:
    0 1px 3px 0px hsl(0 0% 0% / 0.1), 0 8px 10px -1px hsl(0 0% 0% / 0.1);
  --shadow-2xl: 0 1px 3px 0px hsl(0 0% 0% / 0.25);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);

  --font-sans: var(--font-sans);
  --font-mono: var(--font-mono);
  --font-serif: var(--font-serif);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);

  --shadow-2xs: var(--shadow-2xs);
  --shadow-xs: var(--shadow-xs);
  --shadow-sm: var(--shadow-sm);
  --shadow: var(--shadow);
  --shadow-md: var(--shadow-md);
  --shadow-lg: var(--shadow-lg);
  --shadow-xl: var(--shadow-xl);
  --shadow-2xl: var(--shadow-2xl);
}

/* ロゴとタイトルのフォント */
:root {
  --font-logo: 'Alfa Slab One';
  --font-title: 'Inter';
}

@theme inline {
  --font-logo: var(--font-logo);
  --font-title: var(--font-title);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* デフォルトの<button>のカーソル */
  button:not(:disabled),
  [role='button']:not(:disabled) {
    cursor: pointer;
  }

  /* デフォルトの<input>のプレースホルダー */
  input::placeholder,
  textarea::placeholder {
    font-size: var(--text-sm);
  }

  /* スクロールバー */
  ::-webkit-scrollbar-track {
    cursor: default;
    background-color: var(--background);
  }
  ::-webkit-scrollbar {
    width: 8px;
    height: 8px;
  }
  ::-webkit-scrollbar-thumb {
    cursor: default;
    border-radius: 8px;
    background-color: hsl(from var(--foreground) h s l / 0.2);
  }
  ::-webkit-scrollbar-thumb:hover {
    background-color: hsl(from var(--foreground) h s l / 0.3);
  }
}

/* useRipple 波紋アニメーション用 */
@keyframes ripple {
  0% {
    transform: scale(0);
    opacity: 0.4;
  }
  100% {
    transform: scale(2);
    opacity: 0;
  }
}

.animate-ripple {
  animation: ripple 0.6s ease-out forwards;
}

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------

