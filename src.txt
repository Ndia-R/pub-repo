１７ファイル

------------------------------------------------------------
SecurityConfig

package com.example.my_books_backend.config;

import java.util.Arrays;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {
    private final AuthTokenFilter authTokenFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable());

        http.cors(cors -> cors.configurationSource(corsConfigurationSource()));

        http.sessionManagement(
                session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        http.authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/v1/login", "/api/v1/signup", "/api/v1/logout").permitAll()
                .requestMatchers("/api/v1/refresh-token", "/api/v1/validate-token").permitAll()
                .requestMatchers("/api/v1/users/exists").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/books/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/genres/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/reviews/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/favorites/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/my-lists/**").permitAll()
                // .requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html")
                // .permitAll()
                .anyRequest().authenticated());

        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("https://localhost:5173"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

------------------------------------------------------------
FavoriteController

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteCountResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStatusResponse;
import com.example.my_books_backend.dto.favorite.FavoriteInfoResponse;
import com.example.my_books_backend.service.FavoriteService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/favorites")
@RequiredArgsConstructor
public class FavoriteController {
    private final FavoriteService favoriteService;

    @GetMapping("")
    public ResponseEntity<PaginatedBookResponse> getFavorites(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse favorites = favoriteService.getFavorites(page, maxResults);
        return ResponseEntity.ok(favorites);
    }

    @PostMapping("")
    public ResponseEntity<FavoriteResponse> addFavorite(
            @Valid @RequestBody FavoriteRequest request) {
        FavoriteResponse favorite = favoriteService.addFavorite(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(favorite.getFavoriteId()).toUri();
        return ResponseEntity.created(location).body(favorite);
    }

    @DeleteMapping("/{bookId}")
    public ResponseEntity<Void> removeFavorite(@PathVariable String bookId) {
        favoriteService.removeFavorite(bookId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{bookId}/status")
    public ResponseEntity<FavoriteStatusResponse> getFavoriteStatus(@PathVariable String bookId) {
        FavoriteStatusResponse favoriteStateResponse = favoriteService.getFavoriteStatus(bookId);
        return ResponseEntity.ok(favoriteStateResponse);
    }

    @GetMapping("/{bookId}/count")
    public ResponseEntity<FavoriteCountResponse> getFavoriteCount(@PathVariable String bookId) {
        FavoriteCountResponse favoriteCountResponse = favoriteService.getFavoriteCount(bookId);
        return ResponseEntity.ok(favoriteCountResponse);
    }

    @GetMapping("/{bookId}/info")
    public ResponseEntity<FavoriteInfoResponse> getFavoriteInfo(@PathVariable String bookId) {
        FavoriteInfoResponse favoriteInfoResponse = favoriteService.getFavoriteInfo(bookId);
        return ResponseEntity.ok(favoriteInfoResponse);
    }
}

------------------------------------------------------------
MyListController

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListCountResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.dto.my_list.MyListStatusResponse;
import com.example.my_books_backend.dto.my_list.MyListInfoResponse;
import com.example.my_books_backend.service.MyListService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/my-lists")
@RequiredArgsConstructor
public class MyListController {
    private final MyListService myListService;

    @GetMapping("")
    public ResponseEntity<PaginatedBookResponse> getMyLists(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse mylists = myListService.getMyLists(page, maxResults);
        return ResponseEntity.ok(mylists);
    }

    @PostMapping("")
    public ResponseEntity<MyListResponse> addMyList(@Valid @RequestBody MyListRequest request) {
        MyListResponse mylist = myListService.addMyList(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(mylist.getMyListId()).toUri();
        return ResponseEntity.created(location).body(mylist);
    }

    @DeleteMapping("/{bookId}")
    public ResponseEntity<Void> removeMyList(@PathVariable String bookId) {
        myListService.removeMyList(bookId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/{bookId}/status")
    public ResponseEntity<MyListStatusResponse> getMyListStatus(@PathVariable String bookId) {
        MyListStatusResponse myListStateResponse = myListService.getMyListStatus(bookId);
        return ResponseEntity.ok(myListStateResponse);
    }

    @GetMapping("/{bookId}/count")
    public ResponseEntity<MyListCountResponse> getMyListCount(@PathVariable String bookId) {
        MyListCountResponse myListCountResponse = myListService.getMyListCount(bookId);
        return ResponseEntity.ok(myListCountResponse);
    }

    @GetMapping("/{bookId}/info")
    public ResponseEntity<MyListInfoResponse> getMyListInfo(@PathVariable String bookId) {
        MyListInfoResponse myListInfoResponse = myListService.getMyListInfo(bookId);
        return ResponseEntity.ok(myListInfoResponse);
    }
}

------------------------------------------------------------
FavoriteCountResponse

package com.example.my_books_backend.dto.favorite;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteCountResponse {
    private String bookId;
    private Integer favoriteCount;
}

------------------------------------------------------------
FavoriteInfoResponse

package com.example.my_books_backend.dto.favorite;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteInfoResponse {
    private String bookId;
    private Boolean isFavorite;
    private Integer favoriteCount;
}

------------------------------------------------------------
FavoriteStatusResponse

package com.example.my_books_backend.dto.favorite;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteStatusResponse {
    private String bookId;
    private Boolean isFavorite;
}

------------------------------------------------------------
MyListCountResponse

package com.example.my_books_backend.dto.my_list;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyListCountResponse {
    private String bookId;
    private Integer myListCount;
}

------------------------------------------------------------
MyListInfoResponse

package com.example.my_books_backend.dto.my_list;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyListInfoResponse {
    private String bookId;
    private Boolean isMyList;
    private Integer myListCount;
}

------------------------------------------------------------
MyListStatusResponse

package com.example.my_books_backend.dto.my_list;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyListStatusResponse {
    private String bookId;
    private Boolean isMyList;
}

------------------------------------------------------------
FavoriteRepository

package com.example.my_books_backend.repository;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Favorite;
import com.example.my_books_backend.entity.FavoriteId;

@Repository
public interface FavoriteRepository extends JpaRepository<Favorite, FavoriteId> {
    Page<Favorite> findByUserId(Long userId, Pageable pageable);

    void deleteById(@NonNull FavoriteId favoriteId);

    Integer countByUserId(Long userId);

    Integer countByBookId(String bookId);

    Integer countByUserIdAndBookId(Long userId, String bookId);

    List<Favorite> findByBookId(String bookId);
}

------------------------------------------------------------
MyListRepository

package com.example.my_books_backend.repository;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.MyList;
import com.example.my_books_backend.entity.MyListId;

@Repository
public interface MyListRepository extends JpaRepository<MyList, MyListId> {
    Page<MyList> findByUserId(Long userId, Pageable pageable);

    void deleteById(@NonNull MyListId myListId);

    Integer countByUserId(Long userId);

    Integer countByBookId(String bookId);

    Integer countByUserIdAndBookId(Long userId, String bookId);

    List<MyList> findByBookId(String bookId);
}

------------------------------------------------------------
FavoriteServiceImpl

package com.example.my_books_backend.service.impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteCountResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStatusResponse;
import com.example.my_books_backend.dto.favorite.FavoriteInfoResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.Favorite;
import com.example.my_books_backend.entity.FavoriteId;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.FavoriteMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.FavoriteRepository;
import com.example.my_books_backend.service.FavoriteService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class FavoriteServiceImpl implements FavoriteService {
    private final FavoriteRepository favoriteRepository;
    private final FavoriteMapper favoriteMapper;
    private final BookRepository bookRepository;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "updatedAt");

    @Override
    public PaginatedBookResponse getFavorites(Integer page, Integer maxResults) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Pageable pageable = createPageable(page, maxResults);
        Page<Favorite> favorites = favoriteRepository.findByUserId(user.getId(), pageable);
        return favoriteMapper.toPaginatedBookResponse(favorites);
    }

    @Override
    @Transactional
    public FavoriteResponse addFavorite(FavoriteRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Book book = bookRepository.findById(request.getBookId())
                .orElseThrow(() -> new NotFoundException("Book not found"));
        FavoriteId favoriteId = new FavoriteId(user.getId(), request.getBookId());
        Favorite favorite = new Favorite();
        favorite.setId(favoriteId);
        favorite.setUser(user);
        favorite.setBook(book);
        Favorite savedFavorite = favoriteRepository.save(favorite);
        return favoriteMapper.toFavoriteResponse(savedFavorite);
    }

    @Override
    @Transactional
    public void removeFavorite(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        FavoriteId favoriteId = new FavoriteId(user.getId(), bookId);
        favoriteRepository.deleteById(favoriteId);
    }

    @Override
    public FavoriteStatusResponse getFavoriteStatus(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Integer count = favoriteRepository.countByUserIdAndBookId(user.getId(), bookId);

        FavoriteStatusResponse favoriteStateResponse = new FavoriteStatusResponse();
        favoriteStateResponse.setBookId(bookId);
        favoriteStateResponse.setIsFavorite(count > 0 ? true : false);
        return favoriteStateResponse;
    }

    @Override
    public FavoriteCountResponse getFavoriteCount(String bookId) {
        Integer favoriteCount = favoriteRepository.countByBookId(bookId);

        FavoriteCountResponse favoriteCountResponse = new FavoriteCountResponse();
        favoriteCountResponse.setBookId(bookId);
        favoriteCountResponse.setFavoriteCount(favoriteCount);
        return favoriteCountResponse;
    }

    @Override
    public FavoriteInfoResponse getFavoriteInfo(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        Integer count = 0;
        // 認証済みであればユーザー情報取得（匿名ユーザーは未認証とする）
        if (authentication != null && authentication.isAuthenticated()
                && !(authentication instanceof AnonymousAuthenticationToken)) {
            User user = (User) authentication.getPrincipal();
            count = favoriteRepository.countByUserIdAndBookId(user.getId(), bookId);
        }
        Integer favoriteCount = favoriteRepository.countByBookId(bookId);

        FavoriteInfoResponse favoriteInfoResponse = new FavoriteInfoResponse();
        favoriteInfoResponse.setBookId(bookId);
        favoriteInfoResponse.setIsFavorite(count > 0 ? true : false);
        favoriteInfoResponse.setFavoriteCount(favoriteCount);

        return favoriteInfoResponse;
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }
}

------------------------------------------------------------
MyListServiceImpl

package com.example.my_books_backend.service.impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListCountResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.dto.my_list.MyListStatusResponse;
import com.example.my_books_backend.dto.my_list.MyListInfoResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.MyList;
import com.example.my_books_backend.entity.MyListId;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.MyListMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.MyListRepository;
import com.example.my_books_backend.service.MyListService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MyListServiceImpl implements MyListService {
    private final MyListRepository myListRepository;
    private final MyListMapper myListMapper;
    private final BookRepository bookRepository;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "updatedAt");

    @Override
    public PaginatedBookResponse getMyLists(Integer page, Integer maxResults) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Pageable pageable = createPageable(page, maxResults);
        Page<MyList> myLists = myListRepository.findByUserId(user.getId(), pageable);
        return myListMapper.toPaginatedBookResponse(myLists);
    }

    @Override
    @Transactional
    public MyListResponse addMyList(MyListRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Book book = bookRepository.findById(request.getBookId())
                .orElseThrow(() -> new NotFoundException("Book not found"));
        MyListId myListId = new MyListId(user.getId(), request.getBookId());
        MyList myList = new MyList();
        myList.setId(myListId);
        myList.setUser(user);
        myList.setBook(book);
        MyList savedMyList = myListRepository.save(myList);
        return myListMapper.toMyListResponse(savedMyList);
    }

    @Override
    @Transactional
    public void removeMyList(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        MyListId myListId = new MyListId(user.getId(), bookId);
        myListRepository.deleteById(myListId);
    }

    @Override
    public MyListStatusResponse getMyListStatus(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Integer count = myListRepository.countByUserIdAndBookId(user.getId(), bookId);

        MyListStatusResponse myListStateResponse = new MyListStatusResponse();
        myListStateResponse.setBookId(bookId);
        myListStateResponse.setIsMyList(count > 0 ? true : false);
        return myListStateResponse;
    }

    @Override
    public MyListCountResponse getMyListCount(String bookId) {
        Integer myListCount = myListRepository.countByBookId(bookId);

        MyListCountResponse myListCountResponse = new MyListCountResponse();
        myListCountResponse.setBookId(bookId);
        myListCountResponse.setMyListCount(myListCount);
        return myListCountResponse;
    }

    @Override
    public MyListInfoResponse getMyListInfo(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        Integer count = 0;
        // 認証済みであればユーザー情報取得（匿名ユーザーは未認証とする）
        if (authentication != null && authentication.isAuthenticated()
                && !(authentication instanceof AnonymousAuthenticationToken)) {
            User user = (User) authentication.getPrincipal();
            count = myListRepository.countByUserIdAndBookId(user.getId(), bookId);
        }
        Integer myListCount = myListRepository.countByBookId(bookId);

        MyListInfoResponse myListInfoResponse = new MyListInfoResponse();
        myListInfoResponse.setBookId(bookId);
        myListInfoResponse.setIsMyList(count > 0 ? true : false);
        myListInfoResponse.setMyListCount(myListCount);
        return myListInfoResponse;
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }
}

------------------------------------------------------------
FavoriteService

package com.example.my_books_backend.service;

import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteCountResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStatusResponse;
import com.example.my_books_backend.dto.favorite.FavoriteInfoResponse;

public interface FavoriteService {
    PaginatedBookResponse getFavorites(Integer page, Integer maxResults);

    FavoriteResponse addFavorite(FavoriteRequest request);

    void removeFavorite(String bookId);

    FavoriteStatusResponse getFavoriteStatus(String bookId);

    FavoriteCountResponse getFavoriteCount(String bookId);

    FavoriteInfoResponse getFavoriteInfo(String bookId);
}

------------------------------------------------------------
MyListService

package com.example.my_books_backend.service;

import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListCountResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.dto.my_list.MyListStatusResponse;
import com.example.my_books_backend.dto.my_list.MyListInfoResponse;

public interface MyListService {
    PaginatedBookResponse getMyLists(Integer page, Integer maxResults);

    MyListResponse addMyList(MyListRequest request);

    void removeMyList(String bookId);

    MyListStatusResponse getMyListStatus(String bookId);

    MyListCountResponse getMyListCount(String bookId);

    MyListInfoResponse getMyListInfo(String bookId);
}

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
