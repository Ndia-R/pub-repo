１２ファイル

------------------------------------------------------------
SecurityConfig.java

package com.example.my_books_backend.config;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.logout.LogoutSuccessHandler;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import com.example.my_books_backend.util.JwtUtil;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {
    private final AuthTokenFilter authTokenFilter;
    private final SecurityEndpointsConfig securityEndpointsConfig;

    private final JwtUtil jwtUtil;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable());

        http.cors(cors -> cors.configurationSource(corsConfigurationSource()));

        http.sessionManagement(
                session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        List<String> fullyPublicEndpoints = securityEndpointsConfig.getFullyPublicEndpoints();
        List<String> publicGetEndpoints = securityEndpointsConfig.getPublicGetEndpoints();

        http.authorizeHttpRequests(authorize -> authorize
                .requestMatchers(fullyPublicEndpoints.toArray(new String[0])).permitAll()
                .requestMatchers(HttpMethod.GET, publicGetEndpoints.toArray(new String[0]))
                .permitAll().anyRequest().authenticated());

        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);

        // Controllerクラスで"/logout"のエンドポイントを用意しても、Spring Securityのデフォルトの
        // "/logout"が呼ばれるので、カスタムのログアウト処理をデフォルトのログアウトに追加設定する
        http.logout(logout -> logout.logoutUrl("/logout")
                .logoutSuccessHandler(customLogoutSuccessHandler()).invalidateHttpSession(true)
                .deleteCookies("JSESSIONID"));

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("http://localhost:5173"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }

    // カスタムログアウト処理
    @Bean
    public LogoutSuccessHandler customLogoutSuccessHandler() {
        return new LogoutSuccessHandler() {
            @Override
            public void onLogoutSuccess(HttpServletRequest request, HttpServletResponse response,
                    Authentication authentication) throws IOException, ServletException {
                Cookie cookie = jwtUtil.getInvalidateRefreshTokenCookie();
                response.addCookie(cookie);
                response.setStatus(HttpServletResponse.SC_OK);
                // リダイレクトを行わないように、レスポンスを直接書き込む
                response.getWriter().flush();
            }
        };
    }
}

------------------------------------------------------------
SecurityEndpointsConfig.java

package com.example.my_books_backend.config;

import java.util.List;
import java.util.Arrays;
import org.springframework.stereotype.Component;

@Component
public class SecurityEndpointsConfig {

    public List<String> getFullyPublicEndpoints() {
        return Arrays.asList("/login", "/signup", "/logout", "/refresh-token"
        // , "/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html"
        );
    }

    // 以下はGETだけ認証なしのエンドポイントとする
    public List<String> getPublicGetEndpoints() {
        return Arrays.asList("/genres/**", "/books/**");
    }
}

------------------------------------------------------------
AuthController.java

package com.example.my_books_backend.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.auth.LoginRequest;
import com.example.my_books_backend.dto.auth.SignupRequest;
import com.example.my_books_backend.dto.auth.AccessTokenResponse;
import com.example.my_books_backend.service.AuthService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService authService;

    @PostMapping("/login")
    public ResponseEntity<AccessTokenResponse> login(@Valid @RequestBody LoginRequest request,
            HttpServletResponse response) {
        AccessTokenResponse loginResponse = authService.login(request, response);
        return ResponseEntity.ok(loginResponse);
    }

    @PostMapping("/signup")
    public ResponseEntity<AccessTokenResponse> signup(@Valid @RequestBody SignupRequest request,
            HttpServletResponse response) {
        AccessTokenResponse userResponse = authService.signup(request, response);
        return ResponseEntity.ok(userResponse);
    }

    // Controllerクラスで"/logout"のエンドポイントを用意しても、Spring Securityのデフォルトの
    // "/logout"が呼ばれるので、このエンドポイントは意味がなくなる
    // ログアウト処理は「SecurityConfig.java」に実装している
    @PostMapping("/logout")
    public ResponseEntity<Void> logout(HttpServletResponse response) {
        authService.logout(response);
        return ResponseEntity.ok().build();
    }

    @PostMapping("/refresh-token")
    public ResponseEntity<AccessTokenResponse> refreshToken(HttpServletRequest request) {
        AccessTokenResponse accessTokenResponse = authService.refreshAccessToken(request);
        return ResponseEntity.ok(accessTokenResponse);
    }
}

------------------------------------------------------------
BookChapterController.java

package com.example.my_books_backend.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.book_chapter.BookTableOfContentsResponse;
import com.example.my_books_backend.service.BookChapterService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class BookChapterController {
    private final BookChapterService bookChapterService;

    @GetMapping("/books/{bookId}/table-of-contents")
    public ResponseEntity<BookTableOfContentsResponse> getBookTableOfContents(
            @PathVariable String bookId) {
        BookTableOfContentsResponse bookTableOfContentsResponse =
                bookChapterService.getBookTableOfContents(bookId);
        return ResponseEntity.ok(bookTableOfContentsResponse);
    }
}

------------------------------------------------------------
BookContentPageController.java

package com.example.my_books_backend.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.book_content_page.BookContentPageResponse;
import com.example.my_books_backend.service.BookContentPageService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class BookContentPageController {
    private final BookContentPageService bookContentPageService;

    @GetMapping("/read/books/{bookId}/chapters/{chapterNumber}/pages/{pageNumber}")
    public ResponseEntity<BookContentPageResponse> getBookContentPage(@PathVariable String bookId,
            @PathVariable Integer chapterNumber, @PathVariable Integer pageNumber) {
        BookContentPageResponse bookContentPageResponse =
                bookContentPageService.getBookContentPage(bookId, chapterNumber, pageNumber);
        return ResponseEntity.ok(bookContentPageResponse);
    }
}

------------------------------------------------------------
BookController.java

package com.example.my_books_backend.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.book.BookDetailsResponse;
import com.example.my_books_backend.dto.book.BookPageResponse;
import com.example.my_books_backend.service.BookService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class BookController {
    private final BookService bookService;

    @GetMapping("/books/{bookId}")
    public ResponseEntity<BookDetailsResponse> getBookDetailsById(@PathVariable String bookId) {
        BookDetailsResponse bookDetailsResponse = bookService.getBookDetailsById(bookId);
        return ResponseEntity.ok(bookDetailsResponse);
    }

    @GetMapping("/books/new-books")
    public ResponseEntity<BookPageResponse> getNewBooks(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        BookPageResponse bookPageResponse = bookService.getNewBooks(page, maxResults);
        return ResponseEntity.ok(bookPageResponse);
    }

    @GetMapping("/books/search")
    public ResponseEntity<BookPageResponse> getBookPageByTitle(@RequestParam String q,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        BookPageResponse bookPageResponse = bookService.getBookPageByTitle(q, page, maxResults);
        return ResponseEntity.ok(bookPageResponse);
    }

    @GetMapping("/books/discover")
    public ResponseEntity<BookPageResponse> getBookPageByGenreId(@RequestParam String genreIds,
            @RequestParam String condition, @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        BookPageResponse bookPageResponse =
                bookService.getBookPageByGenreId(genreIds, condition, page, maxResults);
        return ResponseEntity.ok(bookPageResponse);
    }
}

------------------------------------------------------------
BookmarkController.java

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.bookmark.BookmarkPageResponse;
import com.example.my_books_backend.dto.bookmark.BookmarkRequest;
import com.example.my_books_backend.dto.bookmark.BookmarkResponse;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.service.BookmarkService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class BookmarkController {
    private final BookmarkService bookmarkService;

    @GetMapping("/bookmarks/{bookId}")
    public ResponseEntity<List<BookmarkResponse>> getBookmarksByBookId(@PathVariable String bookId,
            @AuthenticationPrincipal User user) {
        List<BookmarkResponse> bookmarkResponses =
                bookmarkService.getBookmarksByBookId(bookId, user);
        return ResponseEntity.ok(bookmarkResponses);
    }

    @GetMapping("/bookmarks")
    public ResponseEntity<BookmarkPageResponse> getBookmarkPageByUser(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults,
            @AuthenticationPrincipal User user) {
        BookmarkPageResponse bookmarkPageResponses =
                bookmarkService.getBookmarkPageByUser(page, maxResults, user);
        return ResponseEntity.ok(bookmarkPageResponses);
    }

    @PostMapping("/bookmarks")
    public ResponseEntity<BookmarkResponse> createBookmark(
            @Valid @RequestBody BookmarkRequest request, @AuthenticationPrincipal User user) {
        BookmarkResponse bookmarkResponse = bookmarkService.createBookmark(request, user);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(bookmarkResponse.getId()).toUri();
        return ResponseEntity.created(location).body(bookmarkResponse);
    }

    @PutMapping("/bookmarks/{id}")
    public ResponseEntity<BookmarkResponse> updateBookmark(@PathVariable Long id,
            @Valid @RequestBody BookmarkRequest request, @AuthenticationPrincipal User user) {
        BookmarkResponse bookmarkResponse = bookmarkService.updateBookmark(id, request, user);
        return ResponseEntity.ok(bookmarkResponse);
    }

    @DeleteMapping("/bookmarks/{id}")
    public ResponseEntity<Void> deleteBookmark(@PathVariable Long id,
            @AuthenticationPrincipal User user) {
        bookmarkService.deleteBookmark(id, user);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
FavoriteController.java

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.dto.favorite.FavoriteInfoResponse;
import com.example.my_books_backend.dto.favorite.FavoritePageResponse;
import com.example.my_books_backend.service.FavoriteService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class FavoriteController {
    private final FavoriteService favoriteService;

    @GetMapping("/books/{bookId}/favorites/info")
    public ResponseEntity<FavoriteInfoResponse> getFavoriteInfo(@PathVariable String bookId,
            @RequestParam(required = false) Long userId) {
        FavoriteInfoResponse favoriteInfoResponse = favoriteService.getFavoriteInfo(bookId, userId);
        return ResponseEntity.ok(favoriteInfoResponse);
    }

    @GetMapping("/favorites/{bookId}")
    public ResponseEntity<FavoriteResponse> getFavoriteByBookId(@PathVariable String bookId,
            @AuthenticationPrincipal User user) {
        FavoriteResponse favoriteResponse = favoriteService.getFavoriteByBookId(bookId, user);
        return ResponseEntity.ok(favoriteResponse);
    }

    @GetMapping("/favorites")
    public ResponseEntity<FavoritePageResponse> getFavoritePageByUser(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults,
            @AuthenticationPrincipal User user) {
        FavoritePageResponse favoritePageResponse =
                favoriteService.getFavoritePageByUser(page, maxResults, user);
        return ResponseEntity.ok(favoritePageResponse);
    }

    @PostMapping("/favorites")
    public ResponseEntity<FavoriteResponse> createFavorite(
            @Valid @RequestBody FavoriteRequest request, @AuthenticationPrincipal User user) {
        FavoriteResponse favoriteResponse = favoriteService.createFavorite(request, user);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{bookId}")
                .buildAndExpand(favoriteResponse.getBookId()).toUri();
        return ResponseEntity.created(location).body(favoriteResponse);
    }

    @DeleteMapping("/favorites/{bookId}")
    public ResponseEntity<Void> deleteFavorite(@PathVariable String bookId,
            @AuthenticationPrincipal User user) {
        favoriteService.deleteFavorite(bookId, user);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
GenreController.java

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.genre.GenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.service.GenreService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class GenreController {
    private final GenreService genreService;

    @GetMapping("/genres")
    public ResponseEntity<List<GenreResponse>> getAllGenres() {
        List<GenreResponse> genreResponses = genreService.getAllGenres();
        return ResponseEntity.ok(genreResponses);
    }

    @GetMapping("/genres/{id}")
    public ResponseEntity<GenreResponse> getGenreById(@PathVariable Long id) {
        GenreResponse genreResponse = genreService.getGenreById(id);
        return ResponseEntity.ok(genreResponse);
    }

    @PostMapping("/genres")
    public ResponseEntity<GenreResponse> createGenre(@Valid @RequestBody GenreRequest request) {
        GenreResponse genreResponse = genreService.createGenre(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(genreResponse.getId()).toUri();
        return ResponseEntity.created(location).body(genreResponse);
    }

    @PutMapping("/genres/{id}")
    public ResponseEntity<GenreResponse> updateGenre(@PathVariable Long id,
            @Valid @RequestBody GenreRequest request) {
        GenreResponse genreResponse = genreService.updateGenre(id, request);
        return ResponseEntity.ok(genreResponse);
    }

    @DeleteMapping("/genres/{id}")
    public ResponseEntity<Void> deleteGenre(@PathVariable Long id) {
        genreService.deleteGenre(id);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
ReviewController.java

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.review.ReviewPageResponse;
import com.example.my_books_backend.dto.review.ReviewSummaryResponse;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.dto.review.ReviewRequest;
import com.example.my_books_backend.dto.review.ReviewResponse;
import com.example.my_books_backend.dto.review.SelfReviewExistsResponse;
import com.example.my_books_backend.service.ReviewService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class ReviewController {
    private final ReviewService reviewService;

    @GetMapping("/books/{bookId}/reviews")
    public ResponseEntity<ReviewPageResponse> getReviewPage(@PathVariable String bookId,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        ReviewPageResponse reviewPageResponse =
                reviewService.getReviewPage(bookId, page, maxResults);
        return ResponseEntity.ok(reviewPageResponse);
    }

    @GetMapping("/books/{bookId}/reviews/summary")
    public ResponseEntity<ReviewSummaryResponse> getReviewSummary(@PathVariable String bookId) {
        ReviewSummaryResponse reviewSummaryResponse = reviewService.getReviewSummary(bookId);
        return ResponseEntity.ok(reviewSummaryResponse);
    }

    @GetMapping("/reviews/self-review-exists/{bookId}")
    public ResponseEntity<SelfReviewExistsResponse> getSelfReviewExistsByBookId(
            @PathVariable String bookId, @AuthenticationPrincipal User user) {
        Boolean exists = reviewService.getSelfReviewExistsByBookId(bookId, user);
        return ResponseEntity.ok(new SelfReviewExistsResponse(exists));
    }

    @GetMapping("/reviews/{bookId}")
    public ResponseEntity<ReviewResponse> getReviewByBookId(@PathVariable String bookId,
            @AuthenticationPrincipal User user) {
        ReviewResponse reviewResponse = reviewService.getReviewByBookId(bookId, user);
        return ResponseEntity.ok(reviewResponse);
    }

    @GetMapping("/reviews")
    public ResponseEntity<ReviewPageResponse> getReviewPageByUser(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults,
            @AuthenticationPrincipal User user) {
        ReviewPageResponse reviewPageResponse =
                reviewService.getReviewPageByUser(page, maxResults, user);
        return ResponseEntity.ok(reviewPageResponse);
    }

    @PostMapping("/reviews")
    public ResponseEntity<ReviewResponse> createReview(@Valid @RequestBody ReviewRequest request,
            @AuthenticationPrincipal User user) {
        ReviewResponse reviewResponse = reviewService.createReview(request, user);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{bookId}")
                .buildAndExpand(reviewResponse.getBookId()).toUri();
        return ResponseEntity.created(location).body(reviewResponse);
    }

    @PutMapping("/reviews/{id}")
    public ResponseEntity<ReviewResponse> updateReview(@PathVariable Long id,
            @Valid @RequestBody ReviewRequest request, @AuthenticationPrincipal User user) {
        ReviewResponse reviewResponse = reviewService.updateReview(id, request, user);
        return ResponseEntity.ok(reviewResponse);
    }

    @DeleteMapping("/reviews/{id}")
    public ResponseEntity<Void> deleteReview(@PathVariable Long id,
            @AuthenticationPrincipal User user) {
        reviewService.deleteReview(id, user);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
RoleController.java

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.role.RoleRequest;
import com.example.my_books_backend.dto.role.RoleResponse;
import com.example.my_books_backend.service.RoleService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class RoleController {
    private final RoleService roleService;

    @GetMapping("/roles")
    public ResponseEntity<List<RoleResponse>> getAllRoles() {
        List<RoleResponse> roleResponses = roleService.getAllRoles();
        return ResponseEntity.ok(roleResponses);
    }

    @GetMapping("/roles/{id}")
    public ResponseEntity<RoleResponse> getRoleById(@PathVariable Long id) {
        RoleResponse roleResponse = roleService.getRoleById(id);
        return ResponseEntity.ok(roleResponse);
    }

    @PostMapping("/roles")
    public ResponseEntity<RoleResponse> createRole(@Valid @RequestBody RoleRequest request) {
        RoleResponse roleResponse = roleService.createRole(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(roleResponse.getId()).toUri();
        return ResponseEntity.created(location).body(roleResponse);
    }

    @PutMapping("/roles/{id}")
    public ResponseEntity<RoleResponse> updateRole(@PathVariable Long id,
            @Valid @RequestBody RoleRequest request) {
        RoleResponse roleResponse = roleService.updateRole(id, request);
        return ResponseEntity.ok(roleResponse);
    }

    @DeleteMapping("/roles/{id}")
    public ResponseEntity<Void> deleteRole(@PathVariable Long id) {
        roleService.deleteRole(id);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
UserController.java

package com.example.my_books_backend.controller;

import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.user.ProfileCountsResponse;
import com.example.my_books_backend.dto.user.ChangeEmailRequest;
import com.example.my_books_backend.dto.user.ChangePasswordRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.dto.user.UpdateUserRequest;
import com.example.my_books_backend.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("")
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;

    @GetMapping("/users")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<List<UserResponse>> getAllUsers() {
        List<UserResponse> userResponses = userService.getAllUsers();
        return ResponseEntity.ok(userResponses);
    }

    @GetMapping("/users/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<UserResponse> getUserById(@PathVariable Long id) {
        UserResponse userResponse = userService.getUserById(id);
        return ResponseEntity.ok(userResponse);
    }

    @DeleteMapping("/users/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<Void> deleteUser(@PathVariable Long id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/me")
    public ResponseEntity<UserResponse> getCurrentUser(@AuthenticationPrincipal User user) {
        UserResponse userResponse = userService.getCurrentUser(user);
        return ResponseEntity.ok(userResponse);
    }

    @GetMapping("/me/profile-counts")
    public ResponseEntity<ProfileCountsResponse> getProfileCounts(
            @AuthenticationPrincipal User user) {
        ProfileCountsResponse profileCountsResponse = userService.getProfileCounts(user);
        return ResponseEntity.ok(profileCountsResponse);
    }

    @PutMapping("/me")
    public ResponseEntity<Void> updateCurrentUser(@Valid @RequestBody UpdateUserRequest request,
            @AuthenticationPrincipal User user) {
        userService.updateCurrentUser(request, user);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/me/email")
    public ResponseEntity<Void> changeEmail(@Valid @RequestBody ChangeEmailRequest request,
            @AuthenticationPrincipal User user) {
        userService.changeEmail(request, user);
        return ResponseEntity.noContent().build();
    }

    @PutMapping("/me/password")
    public ResponseEntity<Void> changePassword(@Valid @RequestBody ChangePasswordRequest request,
            @AuthenticationPrincipal User user) {
        userService.changePassword(request, user);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------

