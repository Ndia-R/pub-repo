５０ファイル

------------------------------------------------------------
init.sql

DROP DATABASE IF EXISTS `my-books-db`;
CREATE DATABASE `my-books-db`;

USE `my-books-db`;


DROP TABLE IF EXISTS `books`;
DROP TABLE IF EXISTS `genres`;
DROP TABLE IF EXISTS `book_genres`;
DROP TABLE IF EXISTS `users`;
DROP TABLE IF EXISTS `roles`;
DROP TABLE IF EXISTS `user_roles`;
DROP TABLE IF EXISTS `reviews`;
DROP TABLE IF EXISTS `favorites`;
DROP TABLE IF EXISTS `my_lists`;


CREATE TABLE `books` (
  `id` VARCHAR(255) NOT NULL PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL DEFAULT '',
  `description` TEXT NOT NULL,
  `authors` VARCHAR(255) NOT NULL DEFAULT '',
  `publisher` VARCHAR(255) NOT NULL DEFAULT '',
  `published_date` DATE NOT NULL,
  `price` INT NOT NULL DEFAULT 0,
  `page_count` INT NOT NULL DEFAULT 0,
  `isbn` VARCHAR(255) NOT NULL DEFAULT '',
  `image_url` VARCHAR(255) DEFAULT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE `genres` (
  `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` VARCHAR(255) NOT NULL DEFAULT '',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE `book_genres` (
  `book_id` VARCHAR(255) NOT NULL,
  `genre_id` BIGINT NOT NULL,
  PRIMARY KEY (`book_id`, `genre_id`),
  FOREIGN KEY (`book_id`) REFERENCES `books`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`genre_id`) REFERENCES `genres`(`id`) ON DELETE CASCADE
);

CREATE TABLE `users` (
  `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `email` VARCHAR(255) NOT NULL DEFAULT '',
  `password` VARCHAR(255) NOT NULL DEFAULT '',
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `avatar_url` VARCHAR(255) DEFAULT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE `roles` (
  `id` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` VARCHAR(255) NOT NULL DEFAULT '',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0
);

CREATE TABLE `user_roles` (
  `user_id` BIGINT NOT NULL,
  `role_id` BIGINT NOT NULL,
  PRIMARY KEY (`user_id`, `role_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`role_id`) REFERENCES `roles`(`id`) ON DELETE CASCADE
);

CREATE TABLE `reviews` (
  `user_id` BIGINT NOT NULL,
  `book_id` VARCHAR(255) NOT NULL,
  `comment` TEXT NOT NULL,
  `rating` DECIMAL(2, 1) CHECK (`rating` >= 0 AND `rating` <= 5),
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`user_id`, `book_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`book_id`) REFERENCES `books`(`id`) ON DELETE CASCADE
);

CREATE TABLE `favorites` (
  `user_id` BIGINT NOT NULL,
  `book_id` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`user_id`, `book_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`book_id`) REFERENCES `books`(`id`) ON DELETE CASCADE
);

CREATE TABLE `my_lists` (
  `user_id` BIGINT NOT NULL,
  `book_id` VARCHAR(255) NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`user_id`, `book_id`),
  FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE,
  FOREIGN KEY (`book_id`) REFERENCES `books`(`id`) ON DELETE CASCADE
);

-- データのロード
LOAD DATA INFILE '/docker-entrypoint-initdb.d/books.csv'
INTO TABLE books
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(`id`, `title`, `description`, `authors`, `publisher`, `published_date`, `price`, `page_count`, `isbn`, `image_url`);

INSERT INTO `genres` (`name`, `description`) VALUES
('ミステリー', '謎解きや推理をテーマにした作品'),
('サスペンス', '緊張感や驚きを伴う作品'),
('ロマンス', '恋愛をテーマにした作品'),
('ファンタジー', '魔法や異世界を舞台にした作品'),
('SF', '科学技術や未来をテーマにした作品'),
('ホラー', '恐怖をテーマにした作品'),
('歴史', '歴史的な出来事や人物をテーマにした作品'),
('絵本', '子供向けのイラストが多い本'),
('教科書', '教育機関で使用される教材'),
('専門書', '特定の分野に特化した書籍'),
('研究書', '学術的な研究をまとめた書籍'),
('環境', '自然や環境問題をテーマにした作品'),
('冒険', '冒険や探検をテーマにした作品'),
('図鑑', '特定のテーマに関する情報を集めた書籍'),
('音楽', '音楽に関する書籍'),
('ドラマ', '人間関係や感情を描いた作品'),
('教育', '教育に関する書籍');

LOAD DATA INFILE '/docker-entrypoint-initdb.d/book_genres.csv'
INTO TABLE book_genres
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(`book_id`, `genre_id`);

INSERT INTO `users` (`name`, `email`, `password`, `avatar_url`) VALUES
('Julia', 'julia@gmail.com', '$2a$10$E7FzFP73ImXXFHUmUUmXtuDrJnp0gZ3Zb3XJluLEW7tfnVmh5FLwC', 'https://localhost/images/avatars/avatar02.png'),
('Steve', 'steve@gmail.com', '$2a$10$E7FzFP73ImXXFHUmUUmXtuDrJnp0gZ3Zb3XJluLEW7tfnVmh5FLwC', 'https://localhost/images/avatars/avatar07.png');

INSERT INTO `roles` (`name`, `description`) VALUES
('ROLE_ADMIN', '管理者権限'),
('ROLE_USER', 'ユーザー権限');

INSERT INTO `user_roles` (`user_id`, `role_id`) VALUES
(1, 1),
(1, 2),
(2, 2);

INSERT INTO `reviews` (`user_id`, `book_id`, `comment`, `rating`) VALUES
(1, 'afcIMuetDuzj', 'すごく面白かったです。', 4.5),
(2, 'afcIMuetDuzj', '感動しました。何度も読み直したいと思いました。', 4.0),
(1, '9UizZw491wye', '読み進むにつれドンドン引き込まれていきました。', 3.5),
(2, '9UizZw491wye', '首を長くして待っていました。非常に楽しかったです。', 5.0),
(1, 'pDYIwtdahwkp', '私もこんな経験をしたいと思いました。', 5.0);

INSERT INTO `favorites` (`user_id`, `book_id`) VALUES
(1, 'afcIMuetDuzj'),
(1, 'pDYIwtdahwkp'),
(2, '9UizZw491wye'),
(2, 'ln5NiMJq02V7');

INSERT INTO `my_lists` (`user_id`, `book_id`) VALUES
(1, '3BndPAiEFnjB'),
(1, '3gNJnRcrwrUH'),
(2, 'v21pjIlzDua1');
------------------------------------------------------------
SecurityConfig

package com.example.my_books_backend.config;

import java.util.Arrays;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import lombok.RequiredArgsConstructor;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {
    private final AuthTokenFilter authTokenFilter;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable());

        http.cors(cors -> cors.configurationSource(corsConfigurationSource()));

        http.sessionManagement(
                session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));

        http.authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/api/v1/login", "/api/v1/signup", "/api/v1/logout").permitAll()
                .requestMatchers("/api/v1/refresh-token", "/api/v1/validate-token").permitAll()
                .requestMatchers("/api/v1/check-name-exists").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/books/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/genres/**").permitAll()
                .requestMatchers(HttpMethod.GET, "/api/v1/reviews/book/**").permitAll()
                .requestMatchers("/api/v1/my-lists/**").permitAll()
                .requestMatchers("/api/v1/favorite/**").permitAll()
                .requestMatchers("/v3/api-docs/**", "/swagger-ui/**", "/swagger-ui.html")
                .permitAll().anyRequest().authenticated());

        http.addFilterBefore(authTokenFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.setAllowedOrigins(Arrays.asList("https://localhost:5173"));
        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        configuration.setAllowedHeaders(Arrays.asList("Authorization", "Content-Type"));
        configuration.setAllowCredentials(true);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}

------------------------------------------------------------
BookController

package com.example.my_books_backend.controller;

import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.book.BookDetailResponse;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.service.BookService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/books")
@RequiredArgsConstructor
public class BookController {
    private final BookService bookService;

    @GetMapping("/search")
    public ResponseEntity<PaginatedBookResponse> searchByTitle(@RequestParam String q,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse paginatedBookResponse =
                bookService.searchByTitle(q, page, maxResults);
        return ResponseEntity.ok(paginatedBookResponse);
    }

    @GetMapping("/discover")
    public ResponseEntity<PaginatedBookResponse> searchByGenreId(@RequestParam String genreId,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse paginatedBookResponse =
                bookService.searchByGenreId(genreId, page, maxResults);
        return ResponseEntity.ok(paginatedBookResponse);
    }

    @GetMapping("/new-releases")
    public ResponseEntity<List<BookResponse>> getNewReleases() {
        List<BookResponse> books = bookService.getNewReleases();
        return ResponseEntity.ok(books);
    }

    @GetMapping("/{bookId}")
    public ResponseEntity<BookDetailResponse> getBookById(@PathVariable String bookId) {
        BookDetailResponse book = bookService.getBookDetailById(bookId);
        return ResponseEntity.ok(book);
    }
}

------------------------------------------------------------
FavoriteController

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStateResponse;
import com.example.my_books_backend.service.FavoriteService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/favorites")
@RequiredArgsConstructor
public class FavoriteController {
    private final FavoriteService favoriteService;

    @GetMapping("")
    public ResponseEntity<PaginatedBookResponse> getFavorites(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse favorites = favoriteService.getFavorites(page, maxResults);
        return ResponseEntity.ok(favorites);
    }

    @PostMapping("")
    public ResponseEntity<FavoriteResponse> addFavorite(
            @Valid @RequestBody FavoriteRequest request) {
        FavoriteResponse favorite = favoriteService.addFavorite(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(favorite.getFavoriteId()).toUri();
        return ResponseEntity.created(location).body(favorite);
    }

    @DeleteMapping("/{bookId}")
    public ResponseEntity<Void> removeFavorite(@PathVariable String bookId) {
        favoriteService.removeFavorite(bookId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/favorite-state/{bookId}")
    public ResponseEntity<FavoriteStateResponse> getFavoriteState(@PathVariable String bookId) {
        FavoriteStateResponse favoriteStateResponse = favoriteService.getFavoriteState(bookId);
        return ResponseEntity.ok(favoriteStateResponse);
    }
}

------------------------------------------------------------
GenreController

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.genre.GenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.service.GenreService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/genres")
@RequiredArgsConstructor
public class GenreController {
    private final GenreService genreService;

    @GetMapping("")
    public ResponseEntity<List<GenreResponse>> getAllGenres() {
        List<GenreResponse> genres = genreService.getAllGenres();
        return ResponseEntity.ok(genres);
    }

    @GetMapping("/{id}")
    public ResponseEntity<GenreResponse> getGenreById(@PathVariable Long id) {
        GenreResponse genre = genreService.getGenreById(id);
        return ResponseEntity.ok(genre);
    }

    @PostMapping("")
    public ResponseEntity<GenreResponse> createGenre(@Valid @RequestBody GenreRequest request) {
        GenreResponse genre = genreService.createGenre(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(genre.getId()).toUri();
        return ResponseEntity.created(location).body(genre);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Void> updateGenre(@PathVariable Long id,
            @Valid @RequestBody GenreRequest request) {
        genreService.updateGenre(id, request);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteGenre(@PathVariable Long id) {
        genreService.deleteGenre(id);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
MyListController

package com.example.my_books_backend.controller;

import java.net.URI;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.service.MyListService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/my-lists")
@RequiredArgsConstructor
public class MyListController {
    private final MyListService mylistService;

    @GetMapping("")
    public ResponseEntity<PaginatedBookResponse> getMyLists(
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse mylists = mylistService.getMyLists(page, maxResults);
        return ResponseEntity.ok(mylists);
    }

    @PostMapping("")
    public ResponseEntity<MyListResponse> addToMyList(@Valid @RequestBody MyListRequest request) {
        MyListResponse mylist = mylistService.addToMyList(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(mylist.getMyListId()).toUri();
        return ResponseEntity.created(location).body(mylist);
    }

    @DeleteMapping("/{bookId}")
    public ResponseEntity<Void> removeFromMyList(@PathVariable String bookId) {
        mylistService.removeFromMyList(bookId);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
ReviewController

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.review.MyReviewResponse;
import com.example.my_books_backend.dto.review.ReviewRequest;
import com.example.my_books_backend.dto.review.ReviewResponse;
import com.example.my_books_backend.service.ReviewService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/reviews")
@RequiredArgsConstructor
public class ReviewController {
    private final ReviewService reviewService;

    @GetMapping("/book/{bookId}")
    public ResponseEntity<List<ReviewResponse>> getReviewsByBookId(@PathVariable String bookId) {
        List<ReviewResponse> reviews = reviewService.getReviewsByBookId(bookId);
        return ResponseEntity.ok(reviews);
    }

    @GetMapping("my-reviews")
    public ResponseEntity<List<MyReviewResponse>> getMyReviews() {
        List<MyReviewResponse> myReviews = reviewService.getMyReviews();
        return ResponseEntity.ok(myReviews);
    }

    @PostMapping("")
    public ResponseEntity<ReviewResponse> createReview(@Valid @RequestBody ReviewRequest request) {
        ReviewResponse review = reviewService.createReview(request);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(review.getReviewId()).toUri();
        return ResponseEntity.created(location).body(review);
    }

    @PutMapping("")
    public ResponseEntity<ReviewResponse> updateReview(@Valid @RequestBody ReviewRequest request) {
        ReviewResponse review = reviewService.updateReview(request);
        return ResponseEntity.ok(review);
    }

    @DeleteMapping("/${bookId}")
    public ResponseEntity<Void> deleteReview(@PathVariable String bookId) {
        reviewService.deleteReview(bookId);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
BookDetailResponse

package com.example.my_books_backend.dto.book;

import java.sql.Date;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class BookDetailResponse {
    private String id;
    private String title;
    private String description;
    private List<Long> genreIds;
    private List<String> authors;
    private String publisher;
    private Date publishedDate;
    private Integer price;
    private Integer pageCount;
    private String isbn;
    private String imageUrl;

    private Integer favoriteCount;
    private Integer myListCount;
    private Integer reviewCount;
    private Double rating;
}

------------------------------------------------------------
FavoriteRequest

package com.example.my_books_backend.dto.favorite;

import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteRequest {
    @NotNull
    private String bookId;
}

------------------------------------------------------------
FavoriteResponse

package com.example.my_books_backend.dto.favorite;

import java.time.LocalDateTime;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.user.SimpleUserInfo;
import com.example.my_books_backend.entity.FavoriteId;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteResponse {
    private FavoriteId favoriteId;
    private LocalDateTime updatedAt;
    private SimpleUserInfo user;
    private BookResponse book;
}

------------------------------------------------------------
FavoriteStateResponse

package com.example.my_books_backend.dto.favorite;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteStateResponse {
    private Boolean isFavorite;
    private Integer favoriteCount;
}

------------------------------------------------------------
GenreRequest

package com.example.my_books_backend.dto.genre;

import org.hibernate.validator.constraints.Length;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GenreRequest {
    @NotNull
    @Length(max = 50)
    private String name;

    @NotNull
    @Length(max = 255)
    private String description;
}

------------------------------------------------------------
MyListRequest

package com.example.my_books_backend.dto.my_list;

import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyListRequest {
    @NotNull
    private String bookId;
}

------------------------------------------------------------
MyListResponse

package com.example.my_books_backend.dto.my_list;

import java.time.LocalDateTime;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.user.SimpleUserInfo;
import com.example.my_books_backend.entity.MyListId;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyListResponse {
    private MyListId myListId;
    private LocalDateTime updatedAt;
    private SimpleUserInfo user;
    private BookResponse book;
}

------------------------------------------------------------
MyReviewResponse

package com.example.my_books_backend.dto.review;

import java.time.LocalDateTime;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.user.SimpleUserInfo;
import com.example.my_books_backend.entity.ReviewId;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class MyReviewResponse {
    private ReviewId reviewId;
    private String comment;
    private Double rating;
    private LocalDateTime updatedAt;
    private SimpleUserInfo user;
    private BookResponse book;
}

------------------------------------------------------------
ReviewRequest

package com.example.my_books_backend.dto.review;

import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ReviewRequest {
    @NotNull
    private String bookId;

    @NotNull
    private String comment;

    @NotNull
    private Double rating;
}

------------------------------------------------------------
ReviewResponse

package com.example.my_books_backend.dto.review;

import java.time.LocalDateTime;
import com.example.my_books_backend.dto.user.SimpleUserInfo;
import com.example.my_books_backend.entity.ReviewId;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ReviewResponse {
    private ReviewId reviewId;
    private String comment;
    private Double rating;
    private LocalDateTime updatedAt;
    private SimpleUserInfo user;
}

------------------------------------------------------------
Favorite

package com.example.my_books_backend.entity;

import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.MapsId;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "favorites")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Favorite extends EntityBase {
    @EmbeddedId
    private FavoriteId id;

    @ManyToOne
    @MapsId("userId")
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @MapsId("bookId")
    @JoinColumn(name = "book_id", nullable = false)
    private Book book;
}

------------------------------------------------------------
FavoriteId

package com.example.my_books_backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import java.io.Serializable;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Embeddable
@NoArgsConstructor
@AllArgsConstructor
public class FavoriteId implements Serializable {
    @Column(name = "user_id")
    private Long userId;

    @Column(name = "book_id")
    private String bookId;
}

------------------------------------------------------------
MyList

package com.example.my_books_backend.entity;

import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.MapsId;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "my_lists")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class MyList extends EntityBase {
    @EmbeddedId
    private MyListId id;

    @ManyToOne
    @MapsId("userId")
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @MapsId("bookId")
    @JoinColumn(name = "book_id", nullable = false)
    private Book book;
}

------------------------------------------------------------
MyListId

package com.example.my_books_backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import java.io.Serializable;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Embeddable
@NoArgsConstructor
@AllArgsConstructor
public class MyListId implements Serializable {
    @Column(name = "user_id")
    private Long userId;

    @Column(name = "book_id")
    private String bookId;
}

------------------------------------------------------------
Review

package com.example.my_books_backend.entity;

import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.MapsId;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "reviews")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Review extends EntityBase {
    @EmbeddedId
    private ReviewId id;

    @Column(name = "comment", nullable = false)
    private String comment;

    @Column(name = "rating", nullable = false)
    private Double rating;

    @ManyToOne
    @MapsId("userId")
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne
    @MapsId("bookId")
    @JoinColumn(name = "book_id", nullable = false)
    private Book book;
}

------------------------------------------------------------
ReviewId

package com.example.my_books_backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Embeddable;
import java.io.Serializable;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@Embeddable
@NoArgsConstructor
@AllArgsConstructor
public class ReviewId implements Serializable {
    @Column(name = "user_id")
    private Long userId;

    @Column(name = "book_id")
    private String bookId;
}

------------------------------------------------------------
BookMapper

package com.example.my_books_backend.mapper;

import java.util.Arrays;
import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.book.BookDetailResponse;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.entity.Book;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class BookMapper {
    private final ModelMapper modelMapper;

    public BookResponse toBookResponse(Book book) {
        BookResponse bookResponse = modelMapper.map(book, BookResponse.class);

        List<Long> genres = book.getGenres().stream().map(genre -> genre.getId()).toList();
        bookResponse.setGenreIds(genres);

        List<String> authors = Arrays.asList(book.getAuthors().split(","));
        bookResponse.setAuthors(authors);

        return bookResponse;
    }

    public List<BookResponse> toBookResponseList(List<Book> books) {
        return books.stream().map(book -> toBookResponse(book)).toList();
    }

    public PaginatedBookResponse toPaginatedBookResponse(Page<Book> pageBook) {
        Integer page = pageBook.getNumber();
        Integer totalPages = pageBook.getTotalPages();
        Integer totalItems = (int) pageBook.getTotalElements();
        List<BookResponse> booksDto = toBookResponseList(pageBook.getContent());
        return new PaginatedBookResponse(page, totalPages, totalItems, booksDto);
    }

    public BookDetailResponse toBookDetailResponse(BookResponse bookResponse) {
        BookDetailResponse bookDetailResponse =
                modelMapper.map(bookResponse, BookDetailResponse.class);
        return bookDetailResponse;
    }
}

------------------------------------------------------------
FavoriteMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.Favorite;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class FavoriteMapper {
    private final ModelMapper modelMapper;
    private final BookMapper bookMapper;
    private final UserMapper userMapper;

    public FavoriteResponse toFavoriteResponse(Favorite favorite) {
        FavoriteResponse favoriteResponse = modelMapper.map(favorite, FavoriteResponse.class);
        favoriteResponse.setUser(userMapper.toSimpleUserInfo(favorite.getUser()));
        favoriteResponse.setBook(bookMapper.toBookResponse(favorite.getBook()));
        return favoriteResponse;
    }

    public List<FavoriteResponse> toFavoriteResponseList(List<Favorite> favorites) {
        return favorites.stream().map(favorite -> toFavoriteResponse(favorite)).toList();
    }

    public PaginatedBookResponse toPaginatedBookResponse(Page<Favorite> favorites) {
        Integer page = favorites.getNumber();
        Integer totalPages = favorites.getTotalPages();
        Integer totalItems = (int) favorites.getTotalElements();
        List<Book> books =
                favorites.getContent().stream().map(favorite -> favorite.getBook()).toList();
        List<BookResponse> booksDto = bookMapper.toBookResponseList(books);
        return new PaginatedBookResponse(page, totalPages, totalItems, booksDto);
    }
}

------------------------------------------------------------
GenreMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.genre.GenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.entity.Genre;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class GenreMapper {
    private final ModelMapper modelMapper;

    public GenreResponse toGenreResponse(Genre genre) {
        return modelMapper.map(genre, GenreResponse.class);
    }

    public List<GenreResponse> toGenreResponseList(List<Genre> genres) {
        return genres.stream().map(genre -> toGenreResponse(genre)).toList();
    }

    public Genre toGenreEntity(GenreRequest createGenreRequest) {
        return modelMapper.map(createGenreRequest, Genre.class);
    }
}

------------------------------------------------------------
MyListMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.MyList;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class MyListMapper {
    private final ModelMapper modelMapper;
    private final BookMapper bookMapper;
    private final UserMapper userMapper;

    public MyListResponse toMyListResponse(MyList myList) {
        MyListResponse myListResponse = modelMapper.map(myList, MyListResponse.class);
        myListResponse.setUser(userMapper.toSimpleUserInfo(myList.getUser()));
        myListResponse.setBook(bookMapper.toBookResponse(myList.getBook()));
        return myListResponse;
    }

    public List<MyListResponse> toMyListResponseList(List<MyList> myLists) {
        return myLists.stream().map(item -> toMyListResponse(item)).toList();
    }

    public PaginatedBookResponse toPaginatedBookResponse(Page<MyList> myLists) {
        Integer page = myLists.getNumber();
        Integer totalPages = myLists.getTotalPages();
        Integer totalItems = (int) myLists.getTotalElements();
        List<Book> books = myLists.getContent().stream().map(item -> item.getBook()).toList();
        List<BookResponse> booksDto = bookMapper.toBookResponseList(books);
        return new PaginatedBookResponse(page, totalPages, totalItems, booksDto);
    }
}

------------------------------------------------------------
ReviewMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.review.MyReviewResponse;
import com.example.my_books_backend.dto.review.ReviewResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.Review;
import com.example.my_books_backend.entity.User;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class ReviewMapper {
    private final ModelMapper modelMapper;
    private final BookMapper bookMapper;
    private final UserMapper userMapper;

    public ReviewResponse toReviewResponse(Review review) {
        ReviewResponse reviewResponse = modelMapper.map(review, ReviewResponse.class);
        User user = modelMapper.map(review.getUser(), User.class);
        reviewResponse.setUser(userMapper.toSimpleUserInfo(user));
        return reviewResponse;
    }

    public List<ReviewResponse> toReviewResponseList(List<Review> reviews) {
        return reviews.stream().map(review -> toReviewResponse(review)).toList();
    }

    public MyReviewResponse toMyReviewResponse(Review review) {
        MyReviewResponse myReviewResponse = modelMapper.map(review, MyReviewResponse.class);
        User user = modelMapper.map(review.getUser(), User.class);
        Book book = modelMapper.map(review.getBook(), Book.class);
        myReviewResponse.setUser(userMapper.toSimpleUserInfo(user));
        myReviewResponse.setBook(bookMapper.toBookResponse(book));
        return myReviewResponse;
    }

    public List<MyReviewResponse> toMyReviewResponseList(List<Review> reviews) {
        return reviews.stream().map(review -> toMyReviewResponse(review)).toList();
    }
}

------------------------------------------------------------
BookRepositoryCustomImpl

package com.example.my_books_backend.repository;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Book;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;

@Repository
public class BookRepositoryCustomImpl implements BookRepositoryCustom {
    @PersistenceContext
    private EntityManager entityManager;

    // // 基本的な呼び出し
    // List<String> genres = Arrays.asList("ミステリー", "サスペンス");
    // Pageable pageable = PageRequest.of(0, 10); // 1ページ目、10件ずつ
    // Page<Book> result = bookRepository.findByGenreIds(genres, pageable);

    // // ソート条件付きの呼び出し
    // Pageable pageableWithSort = PageRequest.of(
    // 0,
    // 10,
    // Sort.by(Sort.Direction.DESC, "publishedDate")
    // );
    // Page<Book> sortedResult = bookRepository.findByGenreIds(genres,
    // pageableWithSort);

    @Override
    public Page<Book> findByGenreIds(String genreIdsParam, Pageable pageable) {
        if (genreIdsParam == null || genreIdsParam.isEmpty()) {
            return new PageImpl<>(Collections.emptyList(), pageable, 0);
        }

        boolean isAndSearch = genreIdsParam.contains(",");
        List<Long> genreIds = Arrays.stream(genreIdsParam.split("[,|]"))
                .map(genreId -> Long.parseLong(genreId)).collect(Collectors.toList());

        String sql = "SELECT b.* FROM books b " + "JOIN book_genres bg ON b.id = bg.book_id "
                + "WHERE bg.genre_id IN (:genreIds) ";

        if (isAndSearch) {
            sql += "GROUP BY b.id " + "HAVING COUNT(DISTINCT bg.genre_id) = :genreCount";
        } else {
            sql += "GROUP BY b.id";
        }

        sql += buildOrderByClause(pageable);

        Query query = entityManager.createNativeQuery(sql, Book.class);
        query.setParameter("genreIds", genreIds);
        if (isAndSearch) {
            query.setParameter("genreCount", genreIds.size());
        }

        query.setFirstResult((int) pageable.getOffset());
        query.setMaxResults(pageable.getPageSize());

        @SuppressWarnings("unchecked")
        List<Book> books = query.getResultList(); // ここで型の警告がでるので、アノテーション指定

        // トータル件数を取得するためのクエリ
        String countSql = "SELECT COUNT(DISTINCT b.id) FROM books b "
                + "JOIN book_genres bg ON b.id = bg.book_id " + "WHERE bg.genre_id IN (:genreIds) ";

        if (isAndSearch) {
            countSql += "GROUP BY b.id " + "HAVING COUNT(DISTINCT bg.genre_id) = :genreCount";
        } else {
            countSql += "GROUP BY b.id";
        }

        Query countQuery = entityManager.createNativeQuery(countSql);
        countQuery.setParameter("genreIds", genreIds);
        if (isAndSearch) {
            countQuery.setParameter("genreCount", genreIds.size());
        }

        long total = countQuery.getResultList().size();

        return new PageImpl<>(books, pageable, total);
    }

    // SortオブジェクトからORDER BY句を作成
    private String buildOrderByClause(Pageable pageable) {
        Sort sort = pageable.getSort().isSorted() ? pageable.getSort()
                : Sort.by(Sort.Direction.ASC, "title");
        StringBuilder orderBy = new StringBuilder(" ORDER BY ");
        sort.forEach(order -> {
            // エンティティのフィールド名をデータベースのカラム名に変換
            String columnName = convertCamelToSnake(order.getProperty());
            orderBy.append(columnName).append(" ").append(order.isAscending() ? "ASC" : "DESC")
                    .append(", ");
        });
        orderBy.setLength(orderBy.length() - 2); // 最後のカンマを削除
        return orderBy.toString();
    }

    private String convertCamelToSnake(String camelCase) {
        if (camelCase == null || camelCase.isEmpty()) {
            return camelCase;
        }

        StringBuilder snakeCase = new StringBuilder();
        char[] charArray = camelCase.toCharArray();

        for (char c : charArray) {
            if (Character.isUpperCase(c)) {
                snakeCase.append('_');
                snakeCase.append(Character.toLowerCase(c));
            } else {
                snakeCase.append(c);
            }
        }

        // 先頭にアンダースコアが付く場合があるので削除
        if (snakeCase.charAt(0) == '_') {
            snakeCase.deleteCharAt(0);
        }

        return snakeCase.toString();
    }
}

------------------------------------------------------------
FavoriteRepository

package com.example.my_books_backend.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Favorite;
import com.example.my_books_backend.entity.FavoriteId;

@Repository
public interface FavoriteRepository extends JpaRepository<Favorite, FavoriteId> {
    Page<Favorite> findByUserId(Long userId, Pageable pageable);

    void deleteById(@NonNull FavoriteId favoriteId);

    Integer countByUserId(Long userId);

    Integer countByBookId(String bookId);

    Integer countByUserIdAndBookId(Long userId, String bookId);
}

------------------------------------------------------------
MyListRepository

package com.example.my_books_backend.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.MyList;
import com.example.my_books_backend.entity.MyListId;

@Repository
public interface MyListRepository extends JpaRepository<MyList, MyListId> {
    Page<MyList> findByUserId(Long userId, Pageable pageable);

    void deleteById(@NonNull MyListId myListId);

    Integer countByUserId(Long userId);

    Integer countByBookId(String bookId);

    Integer countByUserIdAndBookId(Long userId, String bookId);
}

------------------------------------------------------------
ReviewRepository

package com.example.my_books_backend.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.FavoriteId;
import com.example.my_books_backend.entity.Review;
import com.example.my_books_backend.entity.ReviewId;

@Repository
public interface ReviewRepository extends JpaRepository<Review, ReviewId> {
    List<Review> findByUserIdOrderByUpdatedAtDesc(Long userId);

    List<Review> findByBookIdOrderByUpdatedAtDesc(String bookId);

    void deleteById(@NonNull FavoriteId favoriteId);

    Integer countByUserId(Long userId);

    Integer countByBookId(String bookId);

    @Query("SELECT AVG(r.rating) FROM Review r WHERE r.book.id = :bookId")
    Double findAverageRatingByBookId(@Param("bookId") String bookId);
}

------------------------------------------------------------
BookServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.dto.book.BookDetailResponse;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.BookMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.BookRepositoryCustom;
import com.example.my_books_backend.repository.FavoriteRepository;
import com.example.my_books_backend.repository.MyListRepository;
import com.example.my_books_backend.repository.ReviewRepository;
import com.example.my_books_backend.service.BookService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookServiceImpl implements BookService {
    private final BookRepository bookRepository;
    private final BookRepositoryCustom bookRepositoryCustom;
    private final BookMapper bookMapper;

    private final FavoriteRepository favoriteRepository;
    private final MyListRepository myListRepository;
    private final ReviewRepository reviewRepository;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "publishedDate");

    @Override
    public PaginatedBookResponse searchByTitle(String q, Integer page, Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepository.findByTitleContaining(q, pageable);
        return bookMapper.toPaginatedBookResponse(pageBook);
    }

    @Override
    public PaginatedBookResponse searchByGenreId(String genreId, Integer page, Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepositoryCustom.findByGenreIds(genreId, pageable);
        return bookMapper.toPaginatedBookResponse(pageBook);
    }

    @Override
    public List<BookResponse> getNewReleases() {
        List<Book> books = bookRepository.findTop10ByOrderByPublishedDateDesc();
        return bookMapper.toBookResponseList(books);
    }

    @Override
    public BookDetailResponse getBookDetailById(String bookId) {
        Book book = findBookById(bookId);
        BookResponse bookResponse = bookMapper.toBookResponse(book);
        BookDetailResponse bookDetailResponse = bookMapper.toBookDetailResponse(bookResponse);

        Integer favoritesCount = favoriteRepository.countByBookId(bookId);
        Integer myListCount = myListRepository.countByBookId(bookId);
        Integer reviewCount = reviewRepository.countByBookId(bookId);
        Double rating = reviewRepository.findAverageRatingByBookId(bookId);

        if (rating == null) {
            rating = 0.0;
        }

        bookDetailResponse.setFavoriteCount(favoritesCount);
        bookDetailResponse.setMyListCount(myListCount);
        bookDetailResponse.setReviewCount(reviewCount);
        bookDetailResponse.setRating(rating);

        return bookDetailResponse;
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }

    private Book findBookById(String id) {
        Book book = bookRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return book;
    }
}

------------------------------------------------------------
FavoriteServiceImpl

package com.example.my_books_backend.service.impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStateResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.Favorite;
import com.example.my_books_backend.entity.FavoriteId;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.FavoriteMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.FavoriteRepository;
import com.example.my_books_backend.service.FavoriteService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class FavoriteServiceImpl implements FavoriteService {
    private final FavoriteRepository favoriteRepository;
    private final FavoriteMapper favoriteMapper;
    private final BookRepository bookRepository;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "updatedAt");

    @Override
    public PaginatedBookResponse getFavorites(Integer page, Integer maxResults) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Pageable pageable = createPageable(page, maxResults);
        Page<Favorite> favorites = favoriteRepository.findByUserId(user.getId(), pageable);
        return favoriteMapper.toPaginatedBookResponse(favorites);
    }

    @Override
    public FavoriteStateResponse getFavoriteState(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Integer count = favoriteRepository.countByUserIdAndBookId(user.getId(), bookId);
        Integer favoriteCount = favoriteRepository.countByBookId(bookId);

        FavoriteStateResponse favoriteStateResponse = new FavoriteStateResponse();
        favoriteStateResponse.setIsFavorite(count > 0 ? true : false);
        favoriteStateResponse.setFavoriteCount(favoriteCount);
        return favoriteStateResponse;
    }

    @Override
    @Transactional
    public FavoriteResponse addFavorite(FavoriteRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Book book = bookRepository.findById(request.getBookId())
                .orElseThrow(() -> new NotFoundException("Book not found"));
        FavoriteId favoriteId = new FavoriteId(user.getId(), request.getBookId());
        Favorite favorite = new Favorite();
        favorite.setId(favoriteId);
        favorite.setUser(user);
        favorite.setBook(book);
        Favorite savedFavorite = favoriteRepository.save(favorite);
        return favoriteMapper.toFavoriteResponse(savedFavorite);
    }

    @Override
    @Transactional
    public void removeFavorite(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        FavoriteId favoriteId = new FavoriteId(user.getId(), bookId);
        favoriteRepository.deleteById(favoriteId);
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }
}

------------------------------------------------------------
GenreServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.genre.GenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.entity.Genre;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.GenreMapper;
import com.example.my_books_backend.repository.GenreRepository;
import com.example.my_books_backend.service.GenreService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class GenreServiceImpl implements GenreService {
    private final GenreRepository genreRepository;
    private final GenreMapper genreMapper;

    @Override
    @Cacheable("getAllGenres")
    public List<GenreResponse> getAllGenres() {
        List<Genre> genres = genreRepository.findAll();
        return genreMapper.toGenreResponseList(genres);
    }

    @Override
    @Cacheable(value = "getGenreById", key = "#p0")
    public GenreResponse getGenreById(Long id) {
        Genre genre = findGenreById(id);
        return genreMapper.toGenreResponse(genre);
    }

    @Override
    @Transactional
    @CacheEvict(value = "getAllGenres", allEntries = true)
    public GenreResponse createGenre(GenreRequest request) {
        Genre genre = genreMapper.toGenreEntity(request);
        Genre saveGenre = genreRepository.save(genre);
        return genreMapper.toGenreResponse(saveGenre);
    }

    @Override
    @Transactional
    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getAllGenres", allEntries = true)})
    public void updateGenre(Long id, GenreRequest request) {
        Genre genre = findGenreById(id);

        String name = request.getName();
        String description = request.getDescription();

        if (name != null) {
            genre.setName(name);
        }

        if (description != null) {
            genre.setDescription(description);
        }
        genreRepository.save(genre);
    }

    @Override
    @Transactional
    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getAllGenres", allEntries = true)})
    public void deleteGenre(Long id) {
        Genre genre = findGenreById(id);
        genreRepository.delete(genre);
    }

    private Genre findGenreById(Long id) {
        Genre genre = genreRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return genre;
    }
}

------------------------------------------------------------
MyListServiceImpl

package com.example.my_books_backend.service.impl;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.MyList;
import com.example.my_books_backend.entity.MyListId;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.MyListMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.MyListRepository;
import com.example.my_books_backend.service.MyListService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MyListServiceImpl implements MyListService {
    private final MyListRepository myListRepository;
    private final MyListMapper myListMapper;
    private final BookRepository bookRepository;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "updatedAt");

    @Override
    public PaginatedBookResponse getMyLists(Integer page, Integer maxResults) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Pageable pageable = createPageable(page, maxResults);
        Page<MyList> myLists = myListRepository.findByUserId(user.getId(), pageable);
        return myListMapper.toPaginatedBookResponse(myLists);
    }

    @Override
    @Transactional
    public MyListResponse addToMyList(MyListRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Book book = bookRepository.findById(request.getBookId())
                .orElseThrow(() -> new NotFoundException("Book not found"));
        MyListId myListId = new MyListId(user.getId(), request.getBookId());
        MyList myList = new MyList();
        myList.setId(myListId);
        myList.setUser(user);
        myList.setBook(book);
        MyList savedMyList = myListRepository.save(myList);
        return myListMapper.toMyListResponse(savedMyList);
    }

    @Override
    @Transactional
    public void removeFromMyList(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        MyListId myListId = new MyListId(user.getId(), bookId);
        myListRepository.deleteById(myListId);
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }
}

------------------------------------------------------------
ReviewServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.review.MyReviewResponse;
import com.example.my_books_backend.dto.review.ReviewRequest;
import com.example.my_books_backend.dto.review.ReviewResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.entity.Review;
import com.example.my_books_backend.entity.ReviewId;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.ReviewMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.ReviewRepository;
import com.example.my_books_backend.service.ReviewService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class ReviewServiceImpl implements ReviewService {
    private final ReviewRepository reviewRepository;
    private final ReviewMapper reviewMapper;
    private final BookRepository bookRepository;

    @Override
    public List<ReviewResponse> getReviewsByBookId(String bookId) {
        List<Review> reviews = reviewRepository.findByBookIdOrderByUpdatedAtDesc(bookId);
        return reviewMapper.toReviewResponseList(reviews);
    }

    @Override
    public List<MyReviewResponse> getMyReviews() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        List<Review> reviews = reviewRepository.findByUserIdOrderByUpdatedAtDesc(user.getId());
        return reviewMapper.toMyReviewResponseList(reviews);
    }

    @Override
    @Transactional
    public ReviewResponse createReview(ReviewRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        Book book = bookRepository.findById(request.getBookId())
                .orElseThrow(() -> new NotFoundException("Book not found"));
        ReviewId reviewId = new ReviewId(user.getId(), book.getId());
        Review review = new Review();
        review.setId(reviewId);
        review.setUser(user);
        review.setBook(book);
        review.setRating(request.getRating());
        review.setComment(request.getComment());
        Review savedReview = reviewRepository.save(review);
        return reviewMapper.toReviewResponse(savedReview);
    }

    @Override
    @Transactional
    public ReviewResponse updateReview(ReviewRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        ReviewId reviewId = new ReviewId(user.getId(), request.getBookId());
        Review review = reviewRepository.findById(reviewId)
                .orElseThrow(() -> new NotFoundException("Review not found"));

        String comment = request.getComment();
        Double rating = request.getRating();

        if (comment != null) {
            review.setComment(comment);
        }

        if (rating != null) {
            review.setRating(rating);
        }
        Review savedReview = reviewRepository.save(review);
        return reviewMapper.toReviewResponse(savedReview);
    }

    @Override
    @Transactional
    public void deleteReview(String bookId) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        ReviewId reviewId = new ReviewId(user.getId(), bookId);
        reviewRepository.deleteById(reviewId);
    }
}

------------------------------------------------------------
RoleServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.role.CreateRoleRequest;
import com.example.my_books_backend.dto.role.RoleResponse;
import com.example.my_books_backend.dto.role.UpdateRoleRequest;
import com.example.my_books_backend.entity.Role;
import com.example.my_books_backend.entity.RoleName;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.RoleMapper;
import com.example.my_books_backend.repository.RoleRepository;
import com.example.my_books_backend.service.RoleService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RoleServiceImpl implements RoleService {
    private final RoleRepository roleRepository;
    private final RoleMapper roleMapper;

    @Override
    @Cacheable("getAllRoles")
    public List<com.example.my_books_backend.dto.role.RoleResponse> getAllRoles() {
        List<Role> roles = roleRepository.findAll();
        return roleMapper.toRoleResponseList(roles);
    }

    @Override
    public RoleResponse getRoleById(Long id) {
        Role role = findRoleById(id);
        return roleMapper.toRoleResponse(role);
    }

    @Override
    @Transactional
    public RoleResponse createRole(CreateRoleRequest request) {
        Role role = roleMapper.toRoleEntity(request);
        Role saveRole = roleRepository.save(role);
        return roleMapper.toRoleResponse(saveRole);
    }

    @Override
    @Transactional
    public void updateRole(Long id, UpdateRoleRequest request) {
        Role role = findRoleById(id);

        RoleName name = request.getName();
        String description = request.getDescription();

        if (name != null) {
            role.setName(name);
        }

        if (description != null) {
            role.setDescription(description);
        }
        roleRepository.save(role);
    }

    @Override
    @Transactional
    public void deleteRole(Long id) {
        Role role = findRoleById(id);
        roleRepository.delete(role);
    }

    private Role findRoleById(Long id) {
        Role role = roleRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return role;
    }
}

------------------------------------------------------------
UserServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.example.my_books_backend.dto.user.ChangeEmailRequest;
import com.example.my_books_backend.dto.user.ChangePasswordRequest;
import com.example.my_books_backend.dto.user.CreateUserRequest;
import com.example.my_books_backend.dto.user.ProfileCountsResponse;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.dto.user.UpdateUserRequest;
import com.example.my_books_backend.entity.Role;
import com.example.my_books_backend.entity.RoleName;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.ConflictException;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.exception.UnauthorizedException;
import com.example.my_books_backend.exception.ValidationException;
import com.example.my_books_backend.mapper.UserMapper;
import com.example.my_books_backend.repository.FavoriteRepository;
import com.example.my_books_backend.repository.MyListRepository;
import com.example.my_books_backend.repository.ReviewRepository;
import com.example.my_books_backend.repository.RoleRepository;
import com.example.my_books_backend.repository.UserRepository;
import com.example.my_books_backend.service.UserService;
import com.example.my_books_backend.util.RandomStringUtil;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final FavoriteRepository favoriteRepository;
    private final MyListRepository myListRepository;
    private final ReviewRepository reviewRepository;

    private final PasswordEncoder passwordEncoder;
    private final UserMapper userMapper;
    private final RandomStringUtil randomStringUtil;

    @Value("${spring.app.defaultAvatarUrl}")
    private String DEFAULT_AVATAR_URL;

    @Override
    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    @Override
    public List<UserResponse> getAllUsers() {
        List<User> users = userRepository.findAll();
        return userMapper.toUserResponseList(users);
    }

    @Override
    public UserResponse getUserById(Long id) {
        User user = findUserById(id);
        return userMapper.toUserResponse(user);
    }

    @Override
    @Transactional
    public UserResponse createUser(CreateUserRequest request) {
        User user = userMapper.toUserEntity(request);

        user.setPassword(passwordEncoder.encode(request.getPassword()));

        if (user.getRoles() == null) {
            Role role = roleRepository.findByName(RoleName.ROLE_USER);
            user.setRoles(Collections.singletonList(role));
        }

        if (user.getName() == null) {
            String name = "USER_" + randomStringUtil.generateRandomString();
            user.setName(name);
        }

        if (user.getAvatarUrl() == null) {
            String avatarUrl = DEFAULT_AVATAR_URL;
            user.setAvatarUrl(avatarUrl);
        }

        User saveUser = userRepository.save(user);
        return userMapper.toUserResponse(saveUser);
    }

    @Override
    public UserResponse getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();
        return userMapper.toUserResponse(user);
    }

    @Override
    public ProfileCountsResponse getProfileCounts() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();

        Integer favoritesCount = favoriteRepository.countByUserId(user.getId());
        Integer myListCount = myListRepository.countByUserId(user.getId());
        Integer reviewCount = reviewRepository.countByUserId(user.getId());

        return new ProfileCountsResponse(favoritesCount, myListCount, reviewCount);
    }

    @Override
    @Transactional
    public void updateCurrentUser(UpdateUserRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();

        String name = request.getName();
        String avatarUrl = request.getAvatarUrl();

        if (name != null) {
            user.setName(name);
        }
        if (avatarUrl != null) {
            user.setAvatarUrl(avatarUrl);
        }
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void changeEmail(ChangeEmailRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();

        String email = request.getEmail();
        String password = request.getPassword();

        if (!passwordEncoder.matches(password, user.getPassword())) {
            throw new UnauthorizedException("パスワードが間違っています。");
        }

        if (userRepository.existsByEmail(email)) {
            throw new ConflictException("このメールアドレスは既に登録されています。: " + email);
        }

        // 本来はここで新しいメールアドレスにメールを送ってメール内のリンクを
        // クリックしてもらうなどで、新しいメールアドレスが本人のものであるか
        // 確認してから、メールアドレスを更新する

        user.setEmail(email);
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void changePassword(ChangePasswordRequest request) {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User user = (User) authentication.getPrincipal();

        String newPassword = request.getNewPassword();
        String confirmNewPassword = request.getConfirmNewPassword();
        String currentPassword = request.getCurrentPassword();

        if (!newPassword.equals(confirmNewPassword)) {
            throw new ValidationException("新しいパスワードと確認用パスワードが一致していません。");
        }

        if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
            throw new UnauthorizedException("現在のパスワードが間違っています。");
        }

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    @Override
    @Transactional
    public void deleteUser(Long id) {
        User user = findUserById(id);
        userRepository.delete(user);
    }

    @Override
    public Boolean checkNameExists(String name) {
        return userRepository.existsByName(name);
    }

    private User findUserById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return user;
    }
}

------------------------------------------------------------
BookService

package com.example.my_books_backend.service;

import java.util.List;
import com.example.my_books_backend.dto.book.BookDetailResponse;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;

public interface BookService {
    PaginatedBookResponse searchByTitle(String q, Integer page, Integer maxResults);

    PaginatedBookResponse searchByGenreId(String genreId, Integer page, Integer maxResults);

    List<BookResponse> getNewReleases();

    BookDetailResponse getBookDetailById(String bookId);
}

------------------------------------------------------------
FavoriteService

package com.example.my_books_backend.service;

import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.favorite.FavoriteRequest;
import com.example.my_books_backend.dto.favorite.FavoriteResponse;
import com.example.my_books_backend.dto.favorite.FavoriteStateResponse;

public interface FavoriteService {
    PaginatedBookResponse getFavorites(Integer page, Integer maxResults);

    FavoriteResponse addFavorite(FavoriteRequest request);

    void removeFavorite(String bookId);

    FavoriteStateResponse getFavoriteState(String bookId);
}

------------------------------------------------------------
GenreService

package com.example.my_books_backend.service;

import java.util.List;
import com.example.my_books_backend.dto.genre.GenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;

public interface GenreService {
    List<GenreResponse> getAllGenres();

    GenreResponse getGenreById(Long id);

    GenreResponse createGenre(GenreRequest request);

    void updateGenre(Long id, GenreRequest request);

    void deleteGenre(Long id);
}

------------------------------------------------------------
MyListService

package com.example.my_books_backend.service;

import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.dto.my_list.MyListRequest;
import com.example.my_books_backend.dto.my_list.MyListResponse;

public interface MyListService {
    PaginatedBookResponse getMyLists(Integer page, Integer maxResults);

    MyListResponse addToMyList(MyListRequest request);

    void removeFromMyList(String bookId);
}

------------------------------------------------------------
ReviewService

package com.example.my_books_backend.service;

import java.util.List;
import com.example.my_books_backend.dto.review.MyReviewResponse;
import com.example.my_books_backend.dto.review.ReviewRequest;
import com.example.my_books_backend.dto.review.ReviewResponse;

public interface ReviewService {
    List<ReviewResponse> getReviewsByBookId(String bookId);

    List<MyReviewResponse> getMyReviews();

    ReviewResponse createReview(ReviewRequest request);

    ReviewResponse updateReview(ReviewRequest request);

    void deleteReview(String bookId);
}

------------------------------------------------------------


