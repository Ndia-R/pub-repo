------------------------------------------------------------
AuthController

package com.example.my_books_backend.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.auth.LoginRequest;
import com.example.my_books_backend.dto.auth.LoginResponse;
import com.example.my_books_backend.dto.auth.SignupRequest;
import com.example.my_books_backend.dto.auth.TokenRefreshRequest;
import com.example.my_books_backend.dto.auth.TokenRefreshResponse;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.service.AuthService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1")
@RequiredArgsConstructor
public class AuthController {
    private final AuthService authService;

    @PostMapping("/login")
    public ResponseEntity<LoginResponse> login(@Valid @RequestBody LoginRequest loginRequest) {
        LoginResponse loginResponse = authService.login(loginRequest);
        return ResponseEntity.ok(loginResponse);
    }

    @PostMapping("/signup")
    public ResponseEntity<UserResponse> signup(@Valid @RequestBody SignupRequest signupRequest) {
        UserResponse userResponse = authService.signup(signupRequest);
        return ResponseEntity.ok(userResponse);
    }

    @PostMapping("/refresh-token")
    public ResponseEntity<TokenRefreshResponse> refreshToken(
            @RequestBody TokenRefreshRequest tokenRefreshRequest) {
        TokenRefreshResponse tokenRefreshResponse = authService.refreshToken(tokenRefreshRequest);
        return ResponseEntity.ok(tokenRefreshResponse);
    }
}


------------------------------------------------------------
BookController

package com.example.my_books_backend.controller;

import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.service.BookService;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/books")
@RequiredArgsConstructor
public class BookController {
    private final BookService bookService;

    @GetMapping("")
    public ResponseEntity<List<BookResponse>> getAllBooks() {
        List<BookResponse> books = bookService.getAllBooks();
        return ResponseEntity.ok(books);
    }

    @GetMapping("/{id}")
    public ResponseEntity<BookResponse> getBookById(@PathVariable String id) {
        BookResponse book = bookService.getBookById(id);
        return ResponseEntity.ok(book);
    }

    @GetMapping("/search")
    public ResponseEntity<PaginatedBookResponse> searchByTitle(@RequestParam String q,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse paginatedBookResponse =
                bookService.searchByTitle(q, page, maxResults);
        return ResponseEntity.ok(paginatedBookResponse);
    }

    @GetMapping("/discover")
    public ResponseEntity<PaginatedBookResponse> searchByGenreId(@RequestParam String genreId,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        PaginatedBookResponse paginatedBookResponse =
                bookService.searchByGenreId(genreId, page, maxResults);
        return ResponseEntity.ok(paginatedBookResponse);
    }

    @GetMapping("/new-releases")
    public ResponseEntity<List<BookResponse>> getNewReleases() {
        List<BookResponse> books = bookService.getNewReleases();
        return ResponseEntity.ok(books);
    }
}

------------------------------------------------------------
GenreController

package com.example.my_books_backend.controller;

import java.net.URI;
import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.my_books_backend.dto.genre.CreateGenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.dto.genre.UpdateGenreRequest;
import com.example.my_books_backend.service.GenreService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/genres")
@RequiredArgsConstructor
public class GenreController {
    private final GenreService genreService;

    @GetMapping("")
    public ResponseEntity<List<GenreResponse>> getAllGenres() {
        List<GenreResponse> genres = genreService.getAllGenres();
        return ResponseEntity.ok(genres);
    }

    @GetMapping("/{id}")
    public ResponseEntity<GenreResponse> getGenreById(@PathVariable Integer id) {
        GenreResponse genre = genreService.getGenreById(id);
        return ResponseEntity.ok(genre);
    }

    @PostMapping("")
    public ResponseEntity<GenreResponse> createGenre(
            @Valid @RequestBody CreateGenreRequest createGenreRequest) {
        GenreResponse genre = genreService.createGenre(createGenreRequest);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(genre.getId()).toUri();
        return ResponseEntity.created(location).body(genre);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Void> putGenre(@PathVariable Integer id,
            @Valid @RequestBody UpdateGenreRequest updateGenreRequest) {
        genreService.putGenre(id, updateGenreRequest);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}")
    public ResponseEntity<Void> patchGenre(@PathVariable Integer id,
            @Valid @RequestBody UpdateGenreRequest updateGenreRequest) {
        genreService.patchGenre(id, updateGenreRequest);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteGenre(@PathVariable Integer id) {
        genreService.deleteGenre(id);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
UserController

package com.example.my_books_backend.controller;

import java.util.List;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.example.my_books_backend.dto.user.EmailChangeRequest;
import com.example.my_books_backend.dto.user.PasswordChangeRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.dto.user.UpdateUserRequest;
import com.example.my_books_backend.service.UserService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
public class UserController {
    private final UserService userService;

    @GetMapping("")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<List<UserResponse>> getAllUsers() {
        List<UserResponse> users = userService.getAllUsers();
        return ResponseEntity.ok(users);
    }

    @GetMapping("/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<UserResponse> getUserById(@PathVariable Integer id) {
        UserResponse user = userService.getUserById(id);
        return ResponseEntity.ok(user);
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN')")
    public ResponseEntity<Void> deleteUser(@PathVariable Integer id) {
        userService.deleteUser(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/me")
    public ResponseEntity<UserResponse> getCurrentUser() {
        UserResponse user = userService.getCurrentUser();
        return ResponseEntity.ok(user);
    }

    @PatchMapping("/me")
    public ResponseEntity<Void> updateCurrentUser(
            @Valid @RequestBody UpdateUserRequest updateUserRequest) {
        userService.updateCurrentUser(updateUserRequest);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/me/email")
    public ResponseEntity<Void> changeEmail(
            @Valid @RequestBody EmailChangeRequest emailChangeRequest) {
        userService.changeEmail(emailChangeRequest);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/me/password")
    public ResponseEntity<Void> changePassword(
            @Valid @RequestBody PasswordChangeRequest passwordChangeRequest) {
        userService.changePassword(passwordChangeRequest);
        return ResponseEntity.noContent().build();
    }
}

------------------------------------------------------------
LoginRequest

package com.example.my_books_backend.dto.auth;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginRequest {
    @NotNull
    @Email(message = "無効なメールアドレスです")
    private String email;

    @NotNull
    private String password;
}

------------------------------------------------------------
LoginResponse

package com.example.my_books_backend.dto.auth;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class LoginResponse {
    private String accessToken;
    private String refreshToken;
    private String username;
    private List<String> roles;
}

------------------------------------------------------------
SignupRequest

package com.example.my_books_backend.dto.auth;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class SignupRequest {
    @NotNull
    @NotBlank(message = "メールアドレスは必須です")
    @Email(message = "有効なメールアドレスを入力してください")
    private String email;

    @NotNull
    @NotBlank(message = "パスワードは必須です")
    @Size(min = 4, message = "パスワードは4文字以上で入力してください")
    private String password;

    @NotBlank(message = "確認パスワードは必須です")
    private String confirmPassword;
}

------------------------------------------------------------
TokenRefreshRequest

package com.example.my_books_backend.dto.auth;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TokenRefreshRequest {
    private String refreshToken;
}

------------------------------------------------------------
TokenRefreshResponse

package com.example.my_books_backend.dto.auth;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class TokenRefreshResponse {
    private String accessToken;
    private String refreshToken;
}

------------------------------------------------------------
BookResponse

package com.example.my_books_backend.dto.book;

import java.sql.Date;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class BookResponse {
    private String id;
    private String title;
    private String description;
    private List<Integer> genreIds;
    private List<String> authors;
    private String publisher;
    private Date publishedDate;
    private Integer price;
    private Integer pageCount;
    private String isbn;
    private String imageUrl;
}

------------------------------------------------------------
PaginatedBookResponse

package com.example.my_books_backend.dto.book;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class PaginatedBookResponse {
    private Integer page;
    private Integer totalPages;
    private Integer totalItems;
    private List<BookResponse> books;
}

------------------------------------------------------------
CreateGenreRequest

package com.example.my_books_backend.dto.genre;

import org.hibernate.validator.constraints.Length;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CreateGenreRequest {
    @NotNull
    @Length(max = 50)
    private String name;

    @NotNull
    @Length(max = 255)
    private String description;
}

------------------------------------------------------------
GenreResponse

package com.example.my_books_backend.dto.genre;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GenreResponse {
    private Integer id;
    private String name;
}

------------------------------------------------------------
UpdateGenreRequest

package com.example.my_books_backend.dto.genre;

import org.hibernate.validator.constraints.Length;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UpdateGenreRequest {
    @NotNull
    @Length(max = 50)
    private String name;

    @NotNull
    @Length(max = 255)
    private String description;
}

------------------------------------------------------------
CreateUserRequest

package com.example.my_books_backend.dto.user;

import java.util.List;
import com.example.my_books_backend.entity.Role;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class CreateUserRequest {
    @NotNull
    @Email
    private String email;

    @NotNull
    private String password;

    private List<Role> roles;
    private String name;
    private String avatarUrl;
}

------------------------------------------------------------
EmailChangeRequest

package com.example.my_books_backend.dto.user;

import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotBlank;
import lombok.Getter;

@Getter
public class EmailChangeRequest {
    @NotBlank(message = "新しいメールアドレスは必須です")
    @Email
    private String newEmail;
}

------------------------------------------------------------
PasswordChangeRequest

package com.example.my_books_backend.dto.user;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Getter;

@Getter
public class PasswordChangeRequest {
    @NotBlank(message = "現在のパスワードは必須です")
    private String currentPassword;

    @NotBlank(message = "新しいパスワードは必須です")
    @Size(min = 6, message = "パスワードは6文字以上で入力してください")
    private String newPassword;

    @NotBlank(message = "確認用パスワードは必須です")
    private String confirmNewPassword;
}

------------------------------------------------------------
UpdateUserRequest

package com.example.my_books_backend.dto.user;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UpdateUserRequest {
    private String name;
    private String avatarUrl;
}

------------------------------------------------------------
UserResponse

package com.example.my_books_backend.dto.user;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserResponse {
    private Integer id;
    private String email;
    private List<String> roles;
    private String name;
    private String avatarUrl;
}

------------------------------------------------------------
EntityBase

package com.example.my_books_backend.entity.shared;

import java.time.LocalDateTime;
import jakarta.persistence.Column;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import lombok.Data;

@Data
@MappedSuperclass
public class EntityBase {
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;

    @PrePersist
    protected void prePersist() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void preUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}

------------------------------------------------------------
Book

package com.example.my_books_backend.entity;

import java.sql.Date;
import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "books")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Book extends EntityBase {
    @Id
    @Column(name = "id", nullable = false)
    private String id;

    @Column(name = "title", nullable = false)
    private String title;

    @Column(name = "description", nullable = false, columnDefinition = "TEXT")
    private String description;

    @Column(name = "genre_ids", nullable = false)
    private String genreIds;

    @Column(name = "authors", nullable = false)
    private String authors;

    @Column(name = "publisher", nullable = false)
    private String publisher;

    @Column(name = "published_date", nullable = false)
    private Date publishedDate;

    @Column(name = "price", nullable = false)
    private Integer price;

    @Column(name = "page_count", nullable = false)
    private Integer pageCount;

    @Column(name = "isbn", nullable = false)
    private String isbn;

    @Column(name = "image_url")
    private String imageUrl;
}

------------------------------------------------------------
Genre

package com.example.my_books_backend.entity;

import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "genres")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Genre extends EntityBase {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "description", nullable = false)
    private String description;
}

------------------------------------------------------------
Role

package com.example.my_books_backend.entity;

import com.example.my_books_backend.entity.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "roles")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Role extends EntityBase {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "name", nullable = false, unique = true)
    @Enumerated(EnumType.STRING)
    private RoleName name;

    @Column(name = "description", nullable = false)
    private String description;

    public Role(RoleName name) {
        this.name = name;
    }

    public String getName() {
        return name.toString();
    }
}

------------------------------------------------------------
RoleName

package com.example.my_books_backend.entity;

public enum RoleName {
    ROLE_ADMIN, ROLE_USER
}

------------------------------------------------------------
User

package com.example.my_books_backend.entity;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import com.example.my_books_backend.entity.shared.EntityBase;
import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "users")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class User extends EntityBase implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "email", nullable = false, unique = true)
    private String email;

    @JsonIgnore
    @Column(name = "password", nullable = false)
    private String password;

    @ManyToMany(fetch = FetchType.EAGER)
    @JoinTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"),
            inverseJoinColumns = @JoinColumn(name = "role_id"))
    private List<Role> roles;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "avatar_url")
    private String avatarUrl;

    // 以下はUserDetailsインターフェースでOverrideする必要があるメソッド

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        this.roles.forEach(role -> authorities.add(new SimpleGrantedAuthority(role.getName())));
        return authorities;
    }

    @Override
    public String getUsername() {
        return this.email; // emailをSpring Securityの内部的なユーザー名として使用
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}

------------------------------------------------------------
ConflictException

package com.example.my_books_backend.exception;

public class ConflictException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public ConflictException() {}

    public ConflictException(String message) {
        super(message);
    }

    public ConflictException(Throwable cause) {
        super(cause);
    }

    public ConflictException(String message, Throwable cause) {
        super(message, cause);
    }

    public ConflictException(String message, Throwable cause, boolean enableSuppression,
            boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
}

------------------------------------------------------------
NotFoundException

package com.example.my_books_backend.exception;

public class NotFoundException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public NotFoundException() {}

    public NotFoundException(String message) {
        super(message);
    }

    public NotFoundException(Throwable cause) {
        super(cause);
    }

    public NotFoundException(String message, Throwable cause) {
        super(message, cause);
    }

    public NotFoundException(String message, Throwable cause, boolean enableSuppression,
            boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
}

------------------------------------------------------------
UnauthorizedException

package com.example.my_books_backend.exception;

public class UnauthorizedException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public UnauthorizedException() {}

    public UnauthorizedException(String message) {
        super(message);
    }

    public UnauthorizedException(Throwable cause) {
        super(cause);
    }

    public UnauthorizedException(String message, Throwable cause) {
        super(message, cause);
    }

    public UnauthorizedException(String message, Throwable cause, boolean enableSuppression,
            boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
}

------------------------------------------------------------
ValidationException

package com.example.my_books_backend.exception;

public class ValidationException extends RuntimeException {
    private static final long serialVersionUID = 1L;

    public ValidationException() {}

    public ValidationException(String message) {
        super(message);
    }

    public ValidationException(Throwable cause) {
        super(cause);
    }

    public ValidationException(String message, Throwable cause) {
        super(message, cause);
    }

    public ValidationException(String message, Throwable cause, boolean enableSuppression,
            boolean writableStackTrace) {
        super(message, cause, enableSuppression, writableStackTrace);
    }
}

------------------------------------------------------------
BookMapper

package com.example.my_books_backend.mapper;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.modelmapper.ModelMapper;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.entity.Book;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class BookMapper {
    private final ModelMapper modelMapper;

    public BookResponse toResponse(Book book) {
        BookResponse bookResponse = modelMapper.map(book, BookResponse.class);

        List<Integer> genreIds =
                Arrays.stream(book.getGenreIds().split(",")).map(Integer::parseInt).toList();
        bookResponse.setGenreIds(genreIds);

        List<String> authors = Arrays.asList(book.getAuthors().split(","));
        bookResponse.setAuthors(authors);

        return bookResponse;
    }

    public Book toEntity(BookResponse bookResponse) {
        Book book = modelMapper.map(bookResponse, Book.class);

        String genreIds = bookResponse.getGenreIds().stream().map(String::valueOf)
                .collect(Collectors.joining(","));
        book.setGenreIds(genreIds);

        String authors = String.join(",", bookResponse.getAuthors());
        book.setAuthors(authors);

        return book;
    }

    public List<BookResponse> toResponseList(List<Book> books) {
        return books.stream().map(book -> toResponse(book)).toList();
    }

    public PaginatedBookResponse toPaginatedBookResponse(Page<Book> pageBook) {
        Integer page = pageBook.getNumber();
        Integer totalPages = pageBook.getTotalPages();
        Integer totalItems = (int) pageBook.getTotalElements();
        List<BookResponse> booksDto = toResponseList(pageBook.getContent());
        return new PaginatedBookResponse(page, totalPages, totalItems, booksDto);
    }
}

------------------------------------------------------------
GenreMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.genre.CreateGenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.entity.Genre;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class GenreMapper {
    private final ModelMapper modelMapper;

    public GenreResponse toResponse(Genre genre) {
        return modelMapper.map(genre, GenreResponse.class);
    }

    public Genre toEntity(GenreResponse genreResponse) {
        return modelMapper.map(genreResponse, Genre.class);
    }

    public Genre toEntity(CreateGenreRequest createGenreDto) {
        return modelMapper.map(createGenreDto, Genre.class);
    }

    public List<GenreResponse> toResponseList(List<Genre> genres) {
        return genres.stream().map(genre -> toResponse(genre)).toList();
    }
}

------------------------------------------------------------
UserMapper

package com.example.my_books_backend.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.dto.user.CreateUserRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.entity.User;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class UserMapper {
    private final ModelMapper modelMapper;

    public UserResponse toResponse(User user) {
        UserResponse userResponse = modelMapper.map(user, UserResponse.class);

        List<String> roles = user.getRoles().stream().map(role -> role.getName()).toList();
        userResponse.setRoles(roles);

        return userResponse;
    }

    public User toEntity(UserResponse userResponse) {
        return modelMapper.map(userResponse, User.class);
    }

    public User toEntity(CreateUserRequest createUserRequest) {
        return modelMapper.map(createUserRequest, User.class);
    }

    public List<UserResponse> toResponseList(List<User> users) {
        return users.stream().map(user -> toResponse(user)).toList();
    }
}

------------------------------------------------------------
BookRepository

package com.example.my_books_backend.repository;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Book;

@Repository
public interface BookRepository extends JpaRepository<Book, String> {
    Page<Book> findByTitleContaining(String q, Pageable pageable);

    List<Book> findTop10ByOrderByPublishedDateDesc();
}

------------------------------------------------------------
BookRepositoryCustom

package com.example.my_books_backend.repository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import com.example.my_books_backend.entity.Book;

public interface BookRepositoryCustom {
    Page<Book> findByGenreIds(String genreIdsParam, Pageable pageable);
}

------------------------------------------------------------
BookRepositoryCustomImpl

package com.example.my_books_backend.repository;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Book;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;

@Repository
public class BookRepositoryCustomImpl implements BookRepositoryCustom {
    @PersistenceContext
    private EntityManager entityManager;

    // // 基本的な呼び出し
    // List<String> genres = Arrays.asList("ミステリー", "サスペンス");
    // Pageable pageable = PageRequest.of(0, 10); // 1ページ目、10件ずつ
    // Page<Book> result = bookRepository.findByGenreIds(genres, pageable);

    // // ソート条件付きの呼び出し
    // Pageable pageableWithSort = PageRequest.of(
    // 0,
    // 10,
    // Sort.by(Sort.Direction.DESC, "publishedDate")
    // );
    // Page<Book> sortedResult = bookRepository.findByGenreIds(genres,
    // pageableWithSort);

    @Override
    public Page<Book> findByGenreIds(String genreIdsParam, Pageable pageable) {
        // AND条件とOR条件を解析
        List<String> andConditions = Arrays.asList(genreIdsParam.split(","));
        List<List<String>> orConditions = new ArrayList<>();
        for (String andCondition : andConditions) {
            orConditions.add(Arrays.asList(andCondition.split("\\|")));
        }

        // SQLクエリ作成
        String sql = buildQueryWithGenres("SELECT * FROM books WHERE ", orConditions);

        // ソート条件を適用
        sql += buildOrderByClause(pageable);

        // ページングクエリの実行
        Query query = entityManager.createNativeQuery(sql, Book.class);
        setParameters(query, orConditions);
        query.setFirstResult((int) pageable.getOffset());
        query.setMaxResults(pageable.getPageSize());

        @SuppressWarnings("unchecked")
        List<Book> books = query.getResultList(); // ここで型の警告がでるので、アノテーション指定または型キャストする

        // 総件数取得用のクエリを作成
        String countSql = buildQueryWithGenres("SELECT COUNT(*) FROM books WHERE ", orConditions);
        Query countQuery = entityManager.createNativeQuery(countSql);
        setParameters(countQuery, orConditions);
        Long total = ((Number) countQuery.getSingleResult()).longValue();

        // 結果をPageオブジェクトで返却
        return new PageImpl<>(books, pageable, total);
    }

    // SQLクエリのWHERE句を、ジャンルIDのリストに基づいて動的に構築
    private String buildQueryWithGenres(String baseQuery, List<List<String>> orConditions) {
        StringBuilder query = new StringBuilder(baseQuery);
        for (int i = 0; i < orConditions.size(); i++) {
            if (i > 0) {
                query.append(" AND ");
            }
            query.append("(");
            List<String> orCondition = orConditions.get(i);
            for (int j = 0; j < orCondition.size(); j++) {
                if (j > 0) {
                    query.append(" OR ");
                }
                query.append("FIND_IN_SET(:genre_id").append(i).append("_").append(j)
                        .append(", genre_ids) > 0");
            }
            query.append(")");
        }
        return query.toString();
    }

    // SortオブジェクトからORDER BY句を作成
    private String buildOrderByClause(Pageable pageable) {
        Sort sort = pageable.getSort().isSorted() ? pageable.getSort()
                : Sort.by(Sort.Direction.ASC, "title");
        StringBuilder orderBy = new StringBuilder(" ORDER BY ");
        sort.forEach(order -> {
            // エンティティのフィールド名をデータベースのカラム名に変換
            String columnName = convertToColumnName(order.getProperty());
            orderBy.append(columnName).append(" ").append(order.isAscending() ? "ASC" : "DESC")
                    .append(", ");
        });
        orderBy.setLength(orderBy.length() - 2); // 最後のカンマを削除
        return orderBy.toString();
    }

    // ジャンルIDのリストをクエリのパラメータに設定
    private void setParameters(Query query, List<List<String>> orConditions) {
        for (int i = 0; i < orConditions.size(); i++) {
            List<String> orCondition = orConditions.get(i);
            for (int j = 0; j < orCondition.size(); j++) {
                query.setParameter("genre_id" + i + "_" + j, orCondition.get(j));
            }
        }
    }

    // エンティティのフィールド名をデータベースのカラム名に変換する
    private String convertToColumnName(String fieldName) {
        switch (fieldName) {
            case "genreIds":
                return "genre_ids";
            case "publishedDate":
                return "published_date";
            case "pageCount":
                return "page_count";
            case "imageUrl":
                return "image_url";
            default:
                return fieldName;
        }
    }
}

------------------------------------------------------------
GenreRepository

package com.example.my_books_backend.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Genre;

@Repository
public interface GenreRepository extends JpaRepository<Genre, Integer> {
}

------------------------------------------------------------
RoleRepository

package com.example.my_books_backend.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.Role;
import com.example.my_books_backend.entity.RoleName;

@Repository
public interface RoleRepository extends JpaRepository<Role, Integer> {
    Role findByName(RoleName name);
}

------------------------------------------------------------
UserRepository

package com.example.my_books_backend.repository;

import java.util.Optional;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import com.example.my_books_backend.entity.User;

@Repository
public interface UserRepository extends JpaRepository<User, Integer> {
    Optional<User> findByEmail(String email);

    Boolean existsByEmail(String email);
}

------------------------------------------------------------
BookServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;
import com.example.my_books_backend.entity.Book;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.BookMapper;
import com.example.my_books_backend.repository.BookRepository;
import com.example.my_books_backend.repository.BookRepositoryCustom;
import com.example.my_books_backend.service.BookService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class BookServiceImpl implements BookService {
    private final BookRepository bookRepository;
    private final BookRepositoryCustom bookRepositoryCustom;
    private final BookMapper bookMapper;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by(Sort.Direction.DESC, "publishedDate");

    @Override
    public List<BookResponse> getAllBooks() {
        List<Book> books = bookRepository.findAll();
        return bookMapper.toResponseList(books);
    }

    @Override
    public BookResponse getBookById(String id) {
        Book book = findBookById(id);
        return bookMapper.toResponse(book);
    }

    @Override
    public PaginatedBookResponse searchByTitle(String q, Integer page, Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepository.findByTitleContaining(q, pageable);
        return bookMapper.toPaginatedBookResponse(pageBook);
    }

    @Override
    public PaginatedBookResponse searchByGenreId(String genreId, Integer page, Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepositoryCustom.findByGenreIds(genreId, pageable);
        return bookMapper.toPaginatedBookResponse(pageBook);
    }

    @Override
    public List<BookResponse> getNewReleases() {
        List<Book> books = bookRepository.findTop10ByOrderByPublishedDateDesc();
        return bookMapper.toResponseList(books);
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }

    private Book findBookById(String id) {
        Book book = bookRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return book;
    }
}

------------------------------------------------------------
GenreServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.List;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.dto.genre.CreateGenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.dto.genre.UpdateGenreRequest;
import com.example.my_books_backend.entity.Genre;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.mapper.GenreMapper;
import com.example.my_books_backend.repository.GenreRepository;
import com.example.my_books_backend.service.GenreService;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class GenreServiceImpl implements GenreService {
    private final GenreRepository genreRepository;
    private final GenreMapper genreMapper;

    @Override
    @Cacheable("getAllGenres")
    public List<GenreResponse> getAllGenres() {
        List<Genre> genres = genreRepository.findAll();
        return genreMapper.toResponseList(genres);
    }

    @Override
    @Cacheable(value = "getGenreById", key = "#p0")
    public GenreResponse getGenreById(Integer id) {
        Genre genre = findGenreById(id);
        return genreMapper.toResponse(genre);
    }

    @Override
    @CacheEvict(value = "getAllGenres", allEntries = true)
    public GenreResponse createGenre(CreateGenreRequest createGenreRequest) {
        Genre genre = genreMapper.toEntity(createGenreRequest);
        Genre saveGenre = genreRepository.save(genre);
        return genreMapper.toResponse(saveGenre);
    }

    @Override
    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getAllGenres", allEntries = true)})
    public void putGenre(Integer id, UpdateGenreRequest updateGenreRequest) {
        Genre genre = findGenreById(id);

        genre.setName(updateGenreRequest.getName());
        genre.setDescription(updateGenreRequest.getDescription());
        genreRepository.save(genre);
    }

    @Override
    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getAllGenres", allEntries = true)})
    public void patchGenre(Integer id, UpdateGenreRequest updateGenreRequest) {
        Genre genre = findGenreById(id);

        String name = updateGenreRequest.getName();
        String description = updateGenreRequest.getDescription();

        if (name != null) {
            genre.setName(name);
        }

        if (description != null) {
            genre.setName(description);
        }
        genreRepository.save(genre);
    }

    @Override
    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getAllGenres", allEntries = true)})
    public void deleteGenre(Integer id) {
        Genre genre = findGenreById(id);
        genreRepository.delete(genre);
    }

    private Genre findGenreById(Integer id) {
        Genre genre = genreRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return genre;
    }
}

------------------------------------------------------------
UserDetailsServiceImpl

package com.example.my_books_backend.service.impl;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UserDetailsService;

@Service
@RequiredArgsConstructor
public class UserDetailsServiceImpl implements UserDetailsService {
    private final UserRepository userRepository;

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
                .orElseThrow(() -> new UsernameNotFoundException("見つかりませんでした。 email: " + email));
        return user;
    }
}

------------------------------------------------------------
UserServiceImpl

package com.example.my_books_backend.service.impl;

import java.util.Collections;
import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.dto.user.EmailChangeRequest;
import com.example.my_books_backend.dto.user.PasswordChangeRequest;
import com.example.my_books_backend.dto.user.CreateUserRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.dto.user.UpdateUserRequest;
import com.example.my_books_backend.entity.Role;
import com.example.my_books_backend.entity.RoleName;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.ConflictException;
import com.example.my_books_backend.exception.NotFoundException;
import com.example.my_books_backend.exception.UnauthorizedException;
import com.example.my_books_backend.exception.ValidationException;
import com.example.my_books_backend.mapper.UserMapper;
import com.example.my_books_backend.repository.RoleRepository;
import com.example.my_books_backend.repository.UserRepository;
import com.example.my_books_backend.service.UserService;
import com.example.my_books_backend.util.RandomStringUtil;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserMapper userMapper;
    private final RandomStringUtil randomStringUtil;

    @Value("${spring.app.default.avatarUrl}")
    private String DEFAULT_AVATAR_URL;

    @Override
    public Optional<User> findByEmail(String email) {
        return userRepository.findByEmail(email);
    }

    @Override
    public List<UserResponse> getAllUsers() {
        List<User> users = userRepository.findAll();
        return userMapper.toResponseList(users);
    }

    @Override
    public UserResponse getUserById(Integer id) {
        User user = findUserById(id);
        return userMapper.toResponse(user);
    }

    @Override
    public UserResponse createUser(CreateUserRequest createUserRequest) {
        User user = userMapper.toEntity(createUserRequest);

        user.setPassword(passwordEncoder.encode(createUserRequest.getPassword()));

        if (user.getRoles() == null) {
            Role role = roleRepository.findByName(RoleName.ROLE_USER);
            user.setRoles(Collections.singletonList(role));
        }

        if (user.getName() == null) {
            String name = "USER_" + randomStringUtil.generateRandomString();
            user.setName(name);
        }

        if (user.getAvatarUrl() == null) {
            String avatarUrl = DEFAULT_AVATAR_URL;
            user.setAvatarUrl(avatarUrl);
        }

        User saveUser = userRepository.save(user);
        return userMapper.toResponse(saveUser);
    }

    @Override
    public UserResponse getCurrentUser() {
        User user = getAuthenticatedUser();
        return userMapper.toResponse(user);
    }

    @Override
    public void updateCurrentUser(UpdateUserRequest updateUserRequest) {
        User user = getAuthenticatedUser();

        String name = updateUserRequest.getName();
        String avatarUrl = updateUserRequest.getAvatarUrl();

        if (name != null) {
            user.setName(name);
        }
        if (avatarUrl != null) {
            user.setAvatarUrl(avatarUrl);
        }
        userRepository.save(user);
    }

    @Override
    public void changeEmail(EmailChangeRequest emailChangeRequest) {
        User user = getAuthenticatedUser();

        String email = emailChangeRequest.getNewEmail();

        if (userRepository.existsByEmail(email)) {
            throw new ConflictException("このメールアドレスは既に登録されています。: " + email);
        }

        // 本来はここで新しいメールアドレスにメールを送ってメール内のリンクを
        // クリックしてもらうなどで、新しいメールアドレスが本人のものであるか
        // 確認してから、メールアドレスを更新する

        user.setEmail(email);
        userRepository.save(user);
    }

    @Override
    public void changePassword(PasswordChangeRequest passwordChangeRequest) {
        User user = getAuthenticatedUser();

        String newPassword = passwordChangeRequest.getNewPassword();
        String confirmNewPassword = passwordChangeRequest.getConfirmNewPassword();
        String currentPassword = passwordChangeRequest.getCurrentPassword();

        if (!newPassword.equals(confirmNewPassword)) {
            throw new ValidationException("新しいパスワードと確認用パスワードが一致していません。");
        }

        if (!passwordEncoder.matches(currentPassword, user.getPassword())) {
            throw new UnauthorizedException("現在のパスワードが間違っています。");
        }

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    @Override
    public void deleteUser(Integer id) {
        User user = findUserById(id);
        userRepository.delete(user);
    }

    private User findUserById(Integer id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new NotFoundException("見つかりませんでした。 ID: " + id));
        return user;
    }

    private User getAuthenticatedUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        User authenticatedUser = (User) authentication.getPrincipal();
        return authenticatedUser;
    }

}

------------------------------------------------------------
AuthService

package com.example.my_books_backend.service;

import java.util.List;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import com.example.my_books_backend.dto.auth.LoginRequest;
import com.example.my_books_backend.dto.auth.LoginResponse;
import com.example.my_books_backend.dto.auth.SignupRequest;
import com.example.my_books_backend.dto.auth.TokenRefreshRequest;
import com.example.my_books_backend.dto.auth.TokenRefreshResponse;
import com.example.my_books_backend.dto.user.CreateUserRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.entity.User;
import com.example.my_books_backend.exception.ConflictException;
import com.example.my_books_backend.exception.UnauthorizedException;
import com.example.my_books_backend.exception.ValidationException;
import com.example.my_books_backend.repository.UserRepository;
import com.example.my_books_backend.util.JwtUtil;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthService {

    private final AuthenticationManager authenticationManager;
    private final UserRepository userRepository;
    private final UserService userService;
    private final JwtUtil jwtUtil;

    public LoginResponse login(LoginRequest loginRequest) {
        Authentication authentication;
        try {
            authentication =
                    authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(
                            loginRequest.getEmail(), loginRequest.getPassword()));
        } catch (AuthenticationException e) {
            throw new UnauthorizedException("ログインに失敗しました。メールアドレスまたはパスワードが無効です。");
        }

        SecurityContextHolder.getContext().setAuthentication(authentication);

        User user = (User) authentication.getPrincipal();

        String accessToken = jwtUtil.generateAccessToken(user);
        String refreshToken = jwtUtil.generateRefreshToken(user);

        String name = user.getName();
        List<String> roles = user.getRoles().stream().map(role -> role.getName()).toList();

        return new LoginResponse(accessToken, refreshToken, name, roles);
    }

    public UserResponse signup(SignupRequest signupRequest) {
        String email = signupRequest.getEmail();
        String password = signupRequest.getPassword();
        String confirmPassword = signupRequest.getConfirmPassword();

        if (!password.equals(confirmPassword)) {
            throw new ValidationException("パスワードと確認用パスワードが一致していません。");
        }

        if (userRepository.existsByEmail(email)) {
            throw new ConflictException("サインアップに失敗しました。このメールアドレスは既に登録されています。: " + email);
        }

        CreateUserRequest createUserRequest = new CreateUserRequest();
        createUserRequest.setEmail(email);
        createUserRequest.setPassword(password);

        return userService.createUser(createUserRequest);
    }

    public TokenRefreshResponse refreshToken(TokenRefreshRequest request) {
        String requestRefreshToken = request.getRefreshToken();

        if (jwtUtil.validateRefreshToken(requestRefreshToken)) {
            String email = jwtUtil.getSubjectFromToken(requestRefreshToken);
            User user = userRepository.findByEmail(email)
                    .orElseThrow(() -> new UnauthorizedException("ユーザーが見つかりません。"));

            String newAccessToken = jwtUtil.generateAccessToken(user);
            return new TokenRefreshResponse(newAccessToken, requestRefreshToken);
        } else {
            throw new UnauthorizedException("リフレッシュトークンが無効です。");
        }
    }
}

------------------------------------------------------------
BookService

package com.example.my_books_backend.service;

import java.util.List;
import com.example.my_books_backend.dto.book.BookResponse;
import com.example.my_books_backend.dto.book.PaginatedBookResponse;

public interface BookService {
    List<BookResponse> getAllBooks();

    BookResponse getBookById(String id);

    PaginatedBookResponse searchByTitle(String q, Integer page, Integer maxResults);

    PaginatedBookResponse searchByGenreId(String genreId, Integer page, Integer maxResults);

    List<BookResponse> getNewReleases();
}

------------------------------------------------------------
GenreService

package com.example.my_books_backend.service;

import java.util.List;
import com.example.my_books_backend.dto.genre.CreateGenreRequest;
import com.example.my_books_backend.dto.genre.GenreResponse;
import com.example.my_books_backend.dto.genre.UpdateGenreRequest;

public interface GenreService {
    List<GenreResponse> getAllGenres();

    GenreResponse getGenreById(Integer id);

    GenreResponse createGenre(CreateGenreRequest createGenreRequest);

    void putGenre(Integer id, UpdateGenreRequest updateGenreRequest);

    void patchGenre(Integer id, UpdateGenreRequest updateGenreRequest);

    void deleteGenre(Integer id);
}

------------------------------------------------------------
UserService

package com.example.my_books_backend.service;

import java.util.List;
import java.util.Optional;
import com.example.my_books_backend.dto.user.EmailChangeRequest;
import com.example.my_books_backend.dto.user.PasswordChangeRequest;
import com.example.my_books_backend.dto.user.CreateUserRequest;
import com.example.my_books_backend.dto.user.UserResponse;
import com.example.my_books_backend.dto.user.UpdateUserRequest;
import com.example.my_books_backend.entity.User;

public interface UserService {
    Optional<User> findByEmail(String email);

    List<UserResponse> getAllUsers();

    UserResponse getUserById(Integer id);

    void deleteUser(Integer id);

    UserResponse createUser(CreateUserRequest createUserRequest);

    UserResponse getCurrentUser();

    void updateCurrentUser(UpdateUserRequest updateUserRequest);

    void changeEmail(EmailChangeRequest emailChangeRequest);

    void changePassword(PasswordChangeRequest passwordChangeRequest);
}

------------------------------------------------------------
JwtUtil

package com.example.my_books_backend.util;

import java.security.Key;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import javax.crypto.SecretKey;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import com.example.my_books_backend.entity.Role;
import com.example.my_books_backend.entity.User;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {
    private static final Logger logger = LoggerFactory.getLogger(JwtUtil.class);

    @Value("${spring.app.jwtSecret}")
    private String secret;

    @Value("${spring.app.jwtAccessExpirationMs}")
    private int accessExpiration;

    @Value("${spring.app.jwtRefreshExpirationMs}")
    private int refreshExpiration;

    // アクセストークン生成
    public String generateAccessToken(User user) {
        String email = user.getEmail();
        String username = user.getName();
        String roles = user.getRoles().stream().map(Role::getName).collect(Collectors.joining(","));

        return Jwts.builder().subject(email).claim("username", username).claim("roles", roles)
                .issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + accessExpiration)).signWith(key())
                .compact();
    }

    // リフレッシュトークン生成
    public String generateRefreshToken(User user) {
        String email = user.getEmail();

        return Jwts.builder().subject(email).issuedAt(new Date())
                .expiration(new Date(System.currentTimeMillis() + refreshExpiration))
                .signWith(key()).compact();
    }

    // 秘密鍵の生成
    private Key key() {
        byte[] keyBytes = Decoders.BASE64.decode(secret);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    // アクセストークンの検証
    public boolean validateAccessToken(String token) {
        try {
            Jwts.parser().verifyWith((SecretKey) key()).build().parseSignedClaims(token);
            return true;
        } catch (MalformedJwtException e) {
            logger.error("Invalid JWT token: {}", e.getMessage());
        } catch (ExpiredJwtException e) {
            logger.error("JWT token is expired: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            logger.error("JWT token is unsupported: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            logger.error("JWT claims string is empty: {}", e.getMessage());
        }
        return false;
    }

    // リフレッシュトークンの検証
    public boolean validateRefreshToken(String token) {
        try {
            Jwts.parser().verifyWith((SecretKey) key()).build().parseSignedClaims(token);
            return true;
        } catch (Exception e) {
            logger.error("Invalid JWT token: {}", e.getMessage());
        }
        return false;
    }

    // トークンからサブジェクトを取得
    public String getSubjectFromToken(String token) {
        return getClaimFromToken(token, claims -> claims.getSubject());
    }

    // トークンのロールを取得
    public List<String> getRolesFromToken(String token) {
        return getClaimFromToken(token, claims -> {
            String rolesString = claims.get("roles", String.class);
            return rolesString != null ? Arrays.asList(rolesString.split(","))
                    : Collections.emptyList();
        });
    }

    // トークンの有効期限を取得
    public Date getExpirationDateFromToken(String token) {
        return getClaimFromToken(token, claims -> claims.getExpiration());
    }

    // トークンの有効期限チェック
    public Boolean isTokenExpired(String token) {
        return getExpirationDateFromToken(token).before(new Date());
    }

    // 汎用的なクレーム取得メソッド
    private <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = getAllClaimsFromToken(token);
        return claimsResolver.apply(claims);
    }

    // すべてのクレームを取得
    private Claims getAllClaimsFromToken(String token) {
        return Jwts.parser().verifyWith((SecretKey) key()).build().parseSignedClaims(token)
                .getPayload();
    }
}

// ---------------------------------------------------------------------------
// JWT秘密鍵
// @Value("${spring.app.jwtSecret}")
// private String secret;
//
// 以下のようなプログラムで生成した値を環境変数に設定
// import java.security.SecureRandom;
// import java.util.Base64;
//
// public class JwtSecretGenerator {
// public static void main(String[] args) {
// // 256ビット（32バイト）のランダムな秘密鍵を生成
// byte[] keyBytes = new byte[32];
// new SecureRandom().nextBytes(keyBytes);
//
// // Base64エンコード
// String base64EncodedSecret = Base64.getEncoder().encodeToString(keyBytes);
//
// System.out.println("生成されたBase64エンコード秘密鍵:");
// System.out.println(base64EncodedSecret);
// }
// }

------------------------------------------------------------
docker-compose

services:
  app:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - .:/my-books-backend
    tty: true
    ports:
      - 8080:8080
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/my-books-db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_APP_JWT_SECRET: Ry9CqEZVzQH7k1234abcdefghijklmnopqrstuvwxyzABCD+/=
      SPRING_APP_JWT_ACCESS_EXPIRATION_MS: 3600000
      SPRING_APP_JWT_REFRESH_EXPIRATION_MS: 86400000
    depends_on:
      - db

  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: my-books-db
    ports:
      - 3306:3306
    volumes:
      - ./.devcontainer/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./.devcontainer/db/data.csv:/docker-entrypoint-initdb.d/data.csv
      - ./.devcontainer/db/my.cnf:/etc/mysql/conf.d/my.cnf
      - db_data:/var/lib/mysql
    command: --secure-file-priv=/docker-entrypoint-initdb.d

volumes:
  db_data:
------------------------------------------------------------
application

spring.application.name=my-books-backend

# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
spring.jpa.properties.hibernate.hbm2dll.create_namespaces=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false

# DB
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# JWT
spring.app.jwtSecret=${SPRING_APP_JWT_SECRET}
# spring.app.jwtAccessExpirationMs=${SPRING_APP_JWT_ACCESS_EXPIRATION_MS}
# spring.app.jwtRefreshExpirationMs=${SPRING_APP_JWT_REFRESH_EXPIRATION_MS}
spring.app.jwtAccessExpirationMs=60000
spring.app.jwtRefreshExpirationMs=180000

# User default avatarUrl
spring.app.default.avatarUrl="http://localhost:18080/images/avatars/avatar00.jpg"

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------

------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------
------------------------------------------------------------

