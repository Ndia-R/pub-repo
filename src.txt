--------------------------------------------------
init.sql

DROP DATABASE IF EXISTS `my-books-db`;
CREATE DATABASE `my-books-db`;

USE `my-books-db`;

-- bookテーブルの削除と再作成
DROP TABLE IF EXISTS `books`;
CREATE TABLE `books` (
  `id` VARCHAR(255) NOT NULL,
  `title` VARCHAR(255) NOT NULL DEFAULT '',
  `description` TEXT NOT NULL,
  `genre_ids` VARCHAR(255) NOT NULL DEFAULT '',
  `authors` VARCHAR(255) NOT NULL DEFAULT '',
  `publisher` VARCHAR(255) NOT NULL DEFAULT '',
  `published_date` DATE NOT NULL,
  `price` INT(11) NOT NULL DEFAULT 0,
  `page_count` INT(11) NOT NULL DEFAULT 0,
  `isbn` VARCHAR(255) NOT NULL DEFAULT '',
  `image_url` VARCHAR(255) DEFAULT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id_UNIQUE` (`id`)
);

-- genreテーブルの削除と再作成
DROP TABLE IF EXISTS `genres`;
CREATE TABLE `genres` (
  `id` INT(11) NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(255) NOT NULL DEFAULT '',
  `description` TEXT NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `is_deleted` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`id`)
) AUTO_INCREMENT=10;

-- データのロード
LOAD DATA INFILE '/docker-entrypoint-initdb.d/data.csv'
INTO TABLE books
FIELDS TERMINATED BY ','
ENCLOSED BY '"'
LINES TERMINATED BY '\n'
(`id`, `title`, `description`, `genre_ids`, `authors`, `publisher`, `published_date`, `price`, `page_count`, `isbn`, `image_url`);

INSERT INTO `genres` (`name`, `description`) VALUES
('ミステリー', '謎解きや推理をテーマにした作品'),
('サスペンス', '緊張感や驚きを伴う作品'),
('ロマンス', '恋愛をテーマにした作品'),
('ファンタジー', '魔法や異世界を舞台にした作品'),
('SF', '科学技術や未来をテーマにした作品'),
('ホラー', '恐怖をテーマにした作品'),
('歴史', '歴史的な出来事や人物をテーマにした作品'),
('絵本', '子供向けのイラストが多い本'),
('教科書', '教育機関で使用される教材'),
('専門書', '特定の分野に特化した書籍'),
('研究書', '学術的な研究をまとめた書籍'),
('環境', '自然や環境問題をテーマにした作品'),
('冒険', '冒険や探検をテーマにした作品'),
('図鑑', '特定のテーマに関する情報を集めた書籍'),
('音楽', '音楽に関する書籍'),
('ドラマ', '人間関係や感情を描いた作品'),
('教育', '教育に関する書籍');

--------------------------------------------------
my.cnf

[mysqld]
character-set-server=utf8mb4
collation-server=utf8mb4_unicode_ci
default-time-zone = 'Asia/Tokyo'

[client]
default-character-set=utf8mb4

[mysql]
default-character-set=utf8mb4

--------------------------------------------------
settings.json

{
  // ミニマップを非表示にする
  "editor.minimap.enabled": false,

  // 制御文字を表示する
  "editor.renderControlCharacters": true,

  // コードフォーマット
  "editor.defaultFormatter": "redhat.java",
  "java.format.settings.url": "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml",
  "java.format.settings.profile": "GoogleStyle",

  // ファイル保存時にフォーマット
  "[java]": {
    "editor.formatOnSave": true
  },

  // コード補完機能を有効にするかどうか
  "java.completion.enabled": true,

  // Nullアノテーションタイプの解析を有効にする
  "java.compile.nullAnalysis.mode": "automatic",
  
  // スペルチェックの対象外にするワード
  "cSpell.words": [
    "Cacheable",
    "checkstyle",
    "esbenp",
    "initdb",
    "mhutchie",
    "mosapride",
    "mysqld",
    "Servlet",
    "shengchen",
    "vscjava",
    "zenkaku"
  ],
  "java.configuration.updateBuildConfiguration": "interactive",
  "remote.autoForwardPortsFallback": 0
}

--------------------------------------------------
config/ModelMapperConfig.java

package com.example.spring_boot_api.config;

import org.modelmapper.ModelMapper;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ModelMapperConfig {

    @Bean
    public ModelMapper modelMapper() {
        return new ModelMapper();
    }
}

--------------------------------------------------
BookController.java

package com.example.spring_boot_api.controller;

import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import com.example.spring_boot_api.dto.book.BookDto;
import com.example.spring_boot_api.dto.book.BookResponseDto;
import com.example.spring_boot_api.service.BookService;

@RestController
@RequestMapping("/books")
public class BookController {

    @Autowired
    private BookService bookService;

    @GetMapping("")
    public ResponseEntity<List<BookDto>> getBooks() {
        List<BookDto> books = bookService.getBooks();
        return ResponseEntity.ok(books);
    }

    @GetMapping("/{id}")
    public ResponseEntity<BookDto> getBookById(@PathVariable String id) {
        BookDto book = bookService.getBookById(id);
        return ResponseEntity.ok(book);
    }

    @GetMapping("/search")
    public ResponseEntity<BookResponseDto> searchByTitle(@RequestParam String q,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        BookResponseDto bookResponse = bookService.searchByTitle(q, page, maxResults);
        return ResponseEntity.ok(bookResponse);
    }

    @GetMapping("/discover")
    public ResponseEntity<BookResponseDto> searchByGenreId(@RequestParam String genreId,
            @RequestParam(required = false) Integer page,
            @RequestParam(required = false) Integer maxResults) {
        List<String> genreIds = Arrays.asList(genreId.split(","));
        BookResponseDto bookResponse = bookService.searchByGenreId(genreIds, page, maxResults);
        return ResponseEntity.ok(bookResponse);
    }

}

--------------------------------------------------
GenreController.java

package com.example.spring_boot_api.controller;

import java.net.URI;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import com.example.spring_boot_api.dto.genre.GenreCreateDto;
import com.example.spring_boot_api.dto.genre.GenreDto;
import com.example.spring_boot_api.dto.genre.GenreUpdateDto;
import com.example.spring_boot_api.model.Genre;
import com.example.spring_boot_api.service.GenreService;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/genres")
public class GenreController {

    @Autowired
    private GenreService genreService;

    @GetMapping("")
    public ResponseEntity<List<GenreDto>> getGenres() {
        List<GenreDto> genres = genreService.getGenres();
        return ResponseEntity.ok(genres);
    }

    @GetMapping("/{id}")
    public ResponseEntity<GenreDto> getGenreById(@PathVariable Integer id) {
        GenreDto genre = genreService.getGenreById(id);
        return ResponseEntity.ok(genre);
    }

    @PostMapping("")
    public ResponseEntity<GenreDto> createGenre(@Valid @RequestBody GenreCreateDto dto) {
        GenreDto genre = genreService.createGenre(dto);
        URI location = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}")
                .buildAndExpand(genre.getId()).toUri();
        return ResponseEntity.created(location).body(genre);
    }

    @PutMapping("/{id}")
    public ResponseEntity<GenreDto> updateGenre(@PathVariable Integer id,
            @Valid @RequestBody GenreUpdateDto dto) {
        genreService.updateGenre(id, dto);
        return ResponseEntity.noContent().build();
    }

    @PatchMapping("/{id}")
    public ResponseEntity<GenreDto> patchGenre(@PathVariable Integer id,
            @Valid @RequestBody Map<String, Object> updates) {
        genreService.patchGenre(id, updates);
        return ResponseEntity.noContent().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Genre> deleteGenre(@PathVariable Integer id) {
        genreService.deleteGenre(id);
        return ResponseEntity.noContent().build();
    }
}

--------------------------------------------------
BookDto.java

package com.example.spring_boot_api.dto.book;

import java.sql.Date;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class BookDto {
    private String id;
    private String title;
    private String description;
    private List<Integer> genreIds;
    private List<String> authors;
    private String publisher;
    private Date publishedDate;
    private Integer price;
    private Integer pageCount;
    private String isbn;
    private String imageUrl;
}

--------------------------------------------------
BookResponseDto.java

package com.example.spring_boot_api.dto.book;

import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class BookResponseDto {
    private Integer page;
    private Integer totalPages;
    private Integer totalItems;
    private List<BookDto> books;
}

--------------------------------------------------
GenreCreateDto.java
GenreUpdateDto.java

package com.example.spring_boot_api.dto.genre;

import org.hibernate.validator.constraints.Length;
import jakarta.validation.constraints.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GenreCreateDto {
    @NotNull
    @Length(max = 50)
    private String name;

    @NotNull
    @Length(max = 255)
    private String description;
}

--------------------------------------------------
GenreDto.java

package com.example.spring_boot_api.dto.genre;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class GenreDto {
    private Integer id;
    private String name;
}


--------------------------------------------------
BookMapper.java

package com.example.spring_boot_api.mapper;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Component;
import com.example.spring_boot_api.dto.book.BookDto;
import com.example.spring_boot_api.dto.book.BookResponseDto;
import com.example.spring_boot_api.model.Book;

@Component
public class BookMapper {

    @Autowired
    private ModelMapper modelMapper;

    public BookDto toDto(Book book) {
        BookDto bookDto = modelMapper.map(book, BookDto.class);

        List<Integer> genreIds =
                Arrays.stream(book.getGenreIds().split(",")).map(Integer::parseInt).toList();
        bookDto.setGenreIds(genreIds);

        List<String> authors = Arrays.asList(book.getAuthors().split(","));
        bookDto.setAuthors(authors);

        return bookDto;
    }

    public Book toEntity(BookDto bookDto) {
        Book book = modelMapper.map(bookDto, Book.class);

        String genreIds = bookDto.getGenreIds().stream().map(String::valueOf)
                .collect(Collectors.joining(","));
        book.setGenreIds(genreIds);

        String authors = String.join(",", bookDto.getAuthors());
        book.setAuthors(authors);

        return book;
    }

    public List<BookDto> toDtoList(List<Book> books) {
        return books.stream().map(book -> toDto(book)).toList();
    }

    public BookResponseDto toResponseDto(Page<Book> pageBook) {
        Integer page = pageBook.getNumber();
        Integer totalPages = pageBook.getTotalPages();
        Integer totalItems = (int) pageBook.getTotalElements();
        List<BookDto> booksDto = toDtoList(pageBook.getContent());
        return new BookResponseDto(page, totalPages, totalItems, booksDto);
    }
}

--------------------------------------------------
GenreMapper.java

package com.example.spring_boot_api.mapper;

import java.util.List;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import com.example.spring_boot_api.dto.genre.GenreCreateDto;
import com.example.spring_boot_api.dto.genre.GenreDto;
import com.example.spring_boot_api.model.Genre;

@Component
public class GenreMapper {

    @Autowired
    private ModelMapper modelMapper;

    public GenreDto toDto(Genre genre) {
        return modelMapper.map(genre, GenreDto.class);
    }

    public Genre toEntity(GenreDto genreDto) {
        return modelMapper.map(genreDto, Genre.class);
    }

    public List<GenreDto> toDtoList(List<Genre> genres) {
        return genres.stream().map(genre -> toDto(genre)).toList();
    }

    public Genre CreateDtoToEntity(GenreCreateDto createGenreDto) {
        return modelMapper.map(createGenreDto, Genre.class);
    }
}

--------------------------------------------------
Book.java

package com.example.spring_boot_api.model;

import java.sql.Date;
import com.example.spring_boot_api.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "books")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Book extends EntityBase {

    @Id
    @Column(name = "id", nullable = false)
    private String id;

    @Column(name = "title", nullable = false)
    private String title;

    @Column(name = "description", nullable = false, columnDefinition = "TEXT")
    private String description;

    @Column(name = "genre_ids", nullable = false)
    private String genreIds;

    @Column(name = "authors", nullable = false)
    private String authors;

    @Column(name = "publisher", nullable = false)
    private String publisher;

    @Column(name = "published_date", nullable = false)
    private Date publishedDate;

    @Column(name = "price", nullable = false)
    private Integer price;

    @Column(name = "page_count", nullable = false)
    private Integer pageCount;

    @Column(name = "isbn", nullable = false)
    private String isbn;

    @Column(name = "image_url")
    private String imageUrl;
}

--------------------------------------------------
Genre.java

package com.example.spring_boot_api.model;

import com.example.spring_boot_api.shared.EntityBase;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

@Entity
@Table(name = "genres")
@Data
@EqualsAndHashCode(callSuper = true)
@NoArgsConstructor
@AllArgsConstructor
public class Genre extends EntityBase {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "description", nullable = false)
    private String description;
}

--------------------------------------------------
BookService.java

package com.example.spring_boot_api.service;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import com.example.spring_boot_api.dto.book.BookDto;
import com.example.spring_boot_api.dto.book.BookResponseDto;
import com.example.spring_boot_api.exception.NotFoundException;
import com.example.spring_boot_api.mapper.BookMapper;
import com.example.spring_boot_api.model.Book;
import com.example.spring_boot_api.repository.BookRepository;
import com.example.spring_boot_api.repository.BookRepositoryCustom;

@Service
public class BookService {

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private BookRepositoryCustom bookRepositoryCustom;

    @Autowired
    private BookMapper bookMapper;

    private static final Integer DEFAULT_START_PAGE = 0;
    private static final Integer DEFAULT_MAX_RESULTS = 20;
    private static final Sort DEFAULT_SORT = Sort.by("title").ascending();

    public List<BookDto> getBooks() {
        List<Book> books = bookRepository.findAll();
        List<BookDto> booksDto = bookMapper.toDtoList(books);
        return booksDto;
    }

    public BookDto getBookById(String id) {
        Book book = findBookById(id);
        BookDto bookDto = bookMapper.toDto(book);
        return bookDto;
    }

    public BookResponseDto searchByTitle(String q, Integer page, Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepository.findByTitleContaining(q, pageable);
        BookResponseDto bookResponseDto = bookMapper.toResponseDto(pageBook);
        return bookResponseDto;
    }

    public BookResponseDto searchByGenreId(List<String> genreIds, Integer page,
            Integer maxResults) {
        Pageable pageable = createPageable(page, maxResults);
        Page<Book> pageBook = bookRepositoryCustom.findByGenreIds(genreIds, pageable);
        BookResponseDto bookResponseDto = bookMapper.toResponseDto(pageBook);
        return bookResponseDto;
    }

    private Pageable createPageable(Integer page, Integer maxResults) {
        page = (page != null) ? page : DEFAULT_START_PAGE;
        maxResults = (maxResults != null) ? maxResults : DEFAULT_MAX_RESULTS;
        return PageRequest.of(page, maxResults, DEFAULT_SORT);
    }

    private Book findBookById(String id) {
        Optional<Book> found = bookRepository.findById(id);
        if (found.isEmpty()) {
            throw new NotFoundException("Not found with this ID: " + id);
        }
        return found.get();
    }
}

--------------------------------------------------
GenreService.java

package com.example.spring_boot_api.service;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.Caching;
import org.springframework.stereotype.Service;
import com.example.spring_boot_api.dto.genre.GenreCreateDto;
import com.example.spring_boot_api.dto.genre.GenreDto;
import com.example.spring_boot_api.dto.genre.GenreUpdateDto;
import com.example.spring_boot_api.exception.NotFoundException;
import com.example.spring_boot_api.mapper.GenreMapper;
import com.example.spring_boot_api.model.Genre;
import com.example.spring_boot_api.repository.GenreRepository;

@Service
public class GenreService {

    @Autowired
    private GenreRepository genreRepository;

    @Autowired
    private GenreMapper genreMapper;

    @Cacheable("getGenres")
    public List<GenreDto> getGenres() {
        List<Genre> genres = genreRepository.findAll();
        List<GenreDto> genresDto = genreMapper.toDtoList(genres);
        return genresDto;
    }

    @Cacheable(value = "getGenreById", key = "#p0")
    public GenreDto getGenreById(Integer id) {
        Genre genre = findGenreById(id);
        GenreDto genreDto = genreMapper.toDto(genre);
        return genreDto;
    }

    @CacheEvict(value = "getGenres", allEntries = true)
    public GenreDto createGenre(GenreCreateDto dto) {
        Genre genre = genreMapper.CreateDtoToEntity(dto);
        Genre saveGenre = genreRepository.save(genre);
        GenreDto genreDto = genreMapper.toDto(saveGenre);
        return genreDto;
    }

    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getGenres", allEntries = true)})
    public void updateGenre(Integer id, GenreUpdateDto dto) {
        Genre genre = findGenreById(id);
        genre.setName(dto.getName());
        genre.setDescription(dto.getDescription());
        genreRepository.save(genre);
    }

    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getGenres", allEntries = true)})
    public void patchGenre(Integer id, Map<String, Object> updates) {
        Genre genre = findGenreById(id);
        updates.forEach((key, value) -> {
            switch (key) {
                case "name":
                    genre.setName((String) value);
                    break;
                case "description":
                    genre.setDescription((String) value);
                    break;
            }
        });
        genreRepository.save(genre);
    }

    @Caching(evict = {@CacheEvict(value = "getGenreById", key = "#p0"),
            @CacheEvict(value = "getGenres", allEntries = true)})
    public void deleteGenre(Integer id) {
        Genre genre = findGenreById(id);
        genreRepository.delete(genre);
    }

    private Genre findGenreById(Integer id) {
        Optional<Genre> found = genreRepository.findById(id);
        if (found.isEmpty()) {
            throw new NotFoundException("Not found with this ID: " + id);
        }
        return found.get();
    }
}

--------------------------------------------------
EntityBase.java

package com.example.spring_boot_api.shared;

import java.time.LocalDateTime;
import jakarta.persistence.Column;
import jakarta.persistence.MappedSuperclass;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import lombok.Data;

@Data
@MappedSuperclass
public class EntityBase {

    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Column(name = "is_deleted", nullable = false)
    private Boolean isDeleted = false;

    @PrePersist
    protected void prePersist() {
        this.createdAt = LocalDateTime.now();
        this.updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    protected void preUpdate() {
        this.updatedAt = LocalDateTime.now();
    }
}

--------------------------------------------------
application.properties

spring.application.name=spring-boot-api

spring.datasource.url=jdbc:mysql://localhost:3306/my-books-db
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.hbm2dll.create_namespaces=true
spring.jpa.hibernate.ddl-auto=validate
# update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false

# Hibernate Dialectを設定
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

--------------------------------------------------
build.gradle

plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

bootWar {
    archiveFileName = 'my-books.war'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	developmentOnly 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.modelmapper:modelmapper:3.1.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------
--------------------------------------------------


